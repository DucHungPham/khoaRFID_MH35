

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Mon Dec 23 15:37:57 2019

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F685
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,delta=2
    13                           	psect	swtext1,local,class=CONST,delta=2
    14                           	psect	text570,local,class=CODE,delta=2
    15                           	psect	text571,local,class=CODE,delta=2
    16                           	psect	text572,local,class=CODE,delta=2
    17                           	psect	text573,local,class=CODE,delta=2
    18                           	psect	text574,local,class=CODE,delta=2
    19                           	psect	text575,local,class=CODE,delta=2
    20                           	psect	text576,local,class=CODE,delta=2
    21                           	psect	text577,local,class=CODE,delta=2
    22                           	psect	text578,local,class=CODE,delta=2
    23                           	psect	text579,local,class=CODE,delta=2
    24                           	psect	text580,local,class=CODE,delta=2
    25                           	psect	text581,local,class=CODE,delta=2
    26                           	psect	text582,local,class=CODE,delta=2
    27                           	psect	text583,local,class=CODE,delta=2
    28                           	psect	text584,local,class=CODE,delta=2
    29                           	psect	text585,local,class=CODE,delta=2
    30                           	psect	text586,local,class=CODE,delta=2
    31                           	psect	text587,local,class=CODE,delta=2
    32                           	psect	text588,local,class=CODE,delta=2
    33                           	psect	text589,local,class=CODE,delta=2
    34                           	psect	text590,local,class=CODE,delta=2
    35                           	psect	text591,local,class=CODE,delta=2
    36                           	psect	text592,local,class=CODE,delta=2
    37                           	psect	text593,local,class=CODE,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text594,local,class=CODE,delta=2
    40                           	psect	pa_nodes,global,class=CODE,delta=2
    41                           	dabs	1,0x19D,1
    42                           	dabs	1,0x19E,1
    43                           	dabs	1,0x19E,1
    44                           	dabs	1,0x19E,1
    45                           	dabs	1,0x18C,1
    46                           	dabs	1,0x19E,1
    47                           	dabs	1,0x19E,1
    48                           	dabs	1,0x19E,1
    49                           	dabs	1,0x19E,1
    50                           	dabs	1,0x19D,1
    51                           	dabs	1,0x19D,1
    52                           	dabs	1,0x19D,1
    53                           	dabs	1,0x19D,1
    54                           	dabs	1,0x19D,1
    55                           	dabs	1,0x18C,1
    56                           	dabs	1,0x7E,2
    57  000A                     
    58                           	psect	idataBANK0
    59  046A                     __pidataBANK0:	
    60                           
    61                           ;initializer for id_clear@F971
    62  046A  34FF               	retlw	255
    63  046B  34FF               	retlw	255
    64  046C  34FF               	retlw	255
    65  046D  34FF               	retlw	255
    66  046E  34FF               	retlw	255
    67                           
    68                           ;initializer for _buzFre
    69  046F  340C               	retlw	12
    70                           
    71                           ;initializer for _buffTag
    72  0470  3400               	retlw	0
    73  0471  3400               	retlw	0
    74  0472  3411               	retlw	17
    75  0473  340B               	retlw	11
    76  0474  344F               	retlw	79
    77  0475  3400               	retlw	0
    78  0476  3400               	retlw	0
    79  0477  3481               	retlw	129
    80  0478  342F               	retlw	47
    81  0479  3422               	retlw	34
    82  047A  3400               	retlw	0
    83  047B  3400               	retlw	0
    84  047C  347D               	retlw	125
    85  047D  3467               	retlw	103
    86  047E  3405               	retlw	5
    87  047F  3400               	retlw	0
    88  0480  3400               	retlw	0
    89  0481  347E               	retlw	126
    90  0482  3431               	retlw	49
    91  0483  34E7               	retlw	231
    92  0484  3400               	retlw	0
    93  0485  3400               	retlw	0
    94  0486  347E               	retlw	126
    95  0487  3451               	retlw	81
    96  0488  34E6               	retlw	230
    97  019D                     _PSTRCON	set	413	;_PSTRCON
    98  019E                     _SRCON	set	414	;_SRCON
    99  0CF5                     _C1SEN	set	3317	;_C1SEN
   100  0CF4                     _C2REN	set	3316	;_C2REN
   101  0C67                     _EEPGD	set	3175	;_EEPGD
   102  0CF2                     _PULSR	set	3314	;_PULSR
   103  0CF3                     _PULSS	set	3315	;_PULSS
   104  0CF6                     _SR0	set	3318	;_SR0
   105  0CF7                     _SR1	set	3319	;_SR1
   106  0CE8                     _STRA	set	3304	;_STRA
   107  0CE9                     _STRB	set	3305	;_STRB
   108  0CEA                     _STRC	set	3306	;_STRC
   109  0CEB                     _STRD	set	3307	;_STRD
   110  0CEC                     _STRSYNC	set	3308	;_STRSYNC
   111  0C62                     _WREN	set	3170	;_WREN
   112  0015                     _EPWM1CON	set	21
   113  0013                     _EPWMR1L	set	19
   114  000B                     _INTCON	set	11
   115  000C                     _PIR1	set	12
   116  0005                     _PORTA	set	5
   117  0007                     _PORTC	set	7
   118  0016                     _PWM1CON	set	22
   119  0010                     _T1CON	set	16
   120  0012                     _T2CON	set	18
   121  0001                     _TMR0	set	1
   122  000F                     _TMR1H	set	15
   123  000E                     _TMR1L	set	14
   124  0011                     _TMR2	set	17
   125  0067                     _EEIF	set	103
   126  005F                     _GIE	set	95
   127  005E                     _PEIE	set	94
   128  002A                     _RA2	set	42
   129  002B                     _RA3	set	43
   130  002C                     _RA4	set	44
   131  0038                     _RC0	set	56
   132  0039                     _RC1	set	57
   133  005D                     _T0IE	set	93
   134  005A                     _T0IF	set	90
   135  0060                     _TMR1IF	set	96
   136  0080                     _TMR1ON	set	128
   137  0061                     _TMR2IF	set	97
   138  009B                     _EEADR	set	155
   139  009C                     _EECON1	set	156
   140  009A                     _EEDAT	set	154
   141  0090                     _EPWM1AUX	set	144
   142  0081                     _OPTION	set	129
   143  008F                     _OSCCON	set	143
   144  008C                     _PIE1	set	140
   145  0092                     _PR2	set	146
   146  0085                     _TRISA	set	133
   147  0087                     _TRISC	set	135
   148  0095                     _WPUA	set	149
   149  0088                     _WPUC	set	136
   150  047A                     _HTS	set	1146
   151  04E0                     _RD	set	1248
   152  0460                     _TMR1IE	set	1120
   153  0461                     _TMR2IE	set	1121
   154  04E8                     _WR	set	1256
   155                           
   156                           	psect	strings
   157  05AC                     __pstrings:	
   158  05AC                     stringtab:	
   159                           ;	global	stringdir,stringtab,__stringbase
   160                           
   161  05AC                     stringcode:	
   162                           ;	String table - string pointers are 1 byte each
   163                           
   164  05AC                     stringdir:	
   165  05AC  3005               	movlw	high stringdir
   166  05AD  008A               	movwf	10
   167  05AE  0804               	movf	4,w
   168  05AF  0A84               	incf	4,f
   169  05B0  0782               	addwf	2,f
   170  05B1                     __stringbase:	
   171  05B1  3400               	retlw	0
   172  05B2                     STR_1:	
   173  05B2  340A               	retlw	10
   174  05B3  3454               	retlw	84	;'T'
   175  05B4  3461               	retlw	97	;'a'
   176  05B5  3467               	retlw	103	;'g'
   177  05B6  343A               	retlw	58	;':'
   178  05B7  3420               	retlw	32	;' '
   179  05B8  3400               	retlw	0
   180                           
   181                           	psect	cinit
   182  0513                     start_initialization:	
   183  0513  303F               	movlw	low (__pdataBANK0+31)
   184                           
   185                           ; Clear objects allocated to BANK0
   186  0514  01DA               	clrf	__pbssBANK0& (0+127)
   187  0515  01DB               	clrf	(__pbssBANK0+1)& (0+127)
   188  0516  01DC               	clrf	(__pbssBANK0+2)& (0+127)
   189  0517  01DD               	clrf	(__pbssBANK0+3)& (0+127)
   190  0518  01DE               	clrf	(__pbssBANK0+4)& (0+127)
   191  0519  01DF               	clrf	(__pbssBANK0+5)& (0+127)
   192  051A  01E0               	clrf	(__pbssBANK0+6)& (0+127)
   193  051B  01E1               	clrf	(__pbssBANK0+7)& (0+127)
   194  051C  01E2               	clrf	(__pbssBANK0+8)& (0+127)
   195  051D  01E3               	clrf	(__pbssBANK0+9)& (0+127)
   196  051E  01E4               	clrf	(__pbssBANK0+10)& (0+127)
   197                           
   198                           ; Initialize objects allocated to BANK0
   199  051F  1383               	bcf	3,7	;select IRP bank0
   200  0520  00FD               	movwf	125
   201  0521  3004               	movlw	high __pidataBANK0
   202  0522  00FE               	movwf	126
   203  0523  306A               	movlw	low __pidataBANK0
   204  0524  00FF               	movwf	127
   205  0525  3020               	movlw	low __pdataBANK0
   206  0526  0084               	movwf	4
   207  0527  2584               	fcall	init_ram
   208  0528                     end_of_initialization:	
   209                           ;End of C runtime variable initialization code
   210                           
   211  0528  0183               	clrf	3
   212  0529  280B               	ljmp	_main	;jump to C main() function
   213                           
   214                           	psect	bssBANK0
   215  005A                     __pbssBANK0:	
   216  005A                     _timeOut:	
   217  005A                     	ds	2
   218  005C                     _timeTick:	
   219  005C                     	ds	2
   220  005E                     _PwInNum:	
   221  005E                     	ds	1
   222  005F                     _mtState:	
   223  005F                     	ds	1
   224  0060                     _keyID:	
   225  0060                     	ds	5
   226                           
   227                           	psect	dataBANK0
   228  0020                     __pdataBANK0:	
   229  0020                     id_clear@F971:	
   230  0020                     	ds	5
   231  0025                     _buzFre:	
   232  0025                     	ds	1
   233  0026                     _buffTag:	
   234  0026                     	ds	25
   235                           
   236                           	psect	inittext
   237  0580                     init_fetch:	
   238                           ;	Called with low address in FSR and high address in W
   239                           
   240  0580  087E               	movf	126,w
   241  0581  008A               	movwf	10
   242  0582  087F               	movf	127,w
   243  0583  0082               	movwf	2
   244  0584                     init_ram:	
   245                           ;Called with:
   246                           ;	high address of idata address in btemp 
   247                           ;	low address of idata address in btemp+1 
   248                           ;	low address of data in FSR
   249                           ;	high address + 1 of data in btemp-1
   250                           
   251  0584  2580               	fcall	init_fetch
   252  0585  0080               	movwf	0
   253  0586  0A84               	incf	4,f
   254  0587  0804               	movf	4,w
   255  0588  067D               	xorwf	125,w
   256  0589  1903               	btfsc	3,2
   257  058A  3400               	retlw	0
   258  058B  0AFF               	incf	127,f
   259  058C  1903               	btfsc	3,2
   260  058D  0AFE               	incf	126,f
   261  058E  2D84               	goto	init_ram
   262                           
   263                           	psect	cstackCOMMON
   264  0070                     __pcstackCOMMON:	
   265  0070                     ?_swUartSendString:	
   266  0070                     ?_SendNum:	
   267                           ; 0 bytes @ 0x0
   268                           
   269  0070                     ?_sys_init:	
   270                           ; 0 bytes @ 0x0
   271                           
   272  0070                     ?_gpio_init:	
   273                           ; 0 bytes @ 0x0
   274                           
   275  0070                     ?_timer_init:	
   276                           ; 0 bytes @ 0x0
   277                           
   278  0070                     ?_int_init:	
   279                           ; 0 bytes @ 0x0
   280                           
   281  0070                     ?_SET_EPWM_ON:	
   282                           ; 0 bytes @ 0x0
   283                           
   284  0070                     ?_delay_x10ms:	
   285                           ; 0 bytes @ 0x0
   286                           
   287  0070                     ?_ISR:	
   288                           ; 0 bytes @ 0x0
   289                           
   290  0070                     ??_ISR:	
   291                           ; 0 bytes @ 0x0
   292                           
   293  0070                     ?_main:	
   294                           ; 0 bytes @ 0x0
   295                           
   296  0070                     ?_swUartSendByte:	
   297                           ; 0 bytes @ 0x0
   298                           
   299  0070                     ?_eepromReadByte:	
   300                           ; 0 bytes @ 0x0
   301                           
   302  0070                     ?_get_RFID:	
   303                           ; 1 bytes @ 0x0
   304                           
   305                           
   306                           ; 1 bytes @ 0x0
   307  0070                     	ds	2
   308  0072                     ??_sys_init:	
   309  0072                     ??_gpio_init:	
   310                           ; 0 bytes @ 0x2
   311                           
   312  0072                     ??_timer_init:	
   313                           ; 0 bytes @ 0x2
   314                           
   315  0072                     ??_int_init:	
   316                           ; 0 bytes @ 0x2
   317                           
   318  0072                     ??_eepromReadByte:	
   319                           ; 0 bytes @ 0x2
   320                           
   321  0072                     ?_eepromWriteByte:	
   322                           ; 0 bytes @ 0x2
   323                           
   324  0072                     ??_SET_EPWM_ON:	
   325                           ; 0 bytes @ 0x2
   326                           
   327  0072                     ??_delay_x10ms:	
   328                           ; 0 bytes @ 0x2
   329                           
   330  0072                     ?_setState:	
   331                           ; 0 bytes @ 0x2
   332                           
   333  0072                     ??_swUartSendByte:	
   334                           ; 0 bytes @ 0x2
   335                           
   336  0072                     ?_comArr:	
   337                           ; 0 bytes @ 0x2
   338                           
   339  0072                     ?___bmul:	
   340                           ; 1 bytes @ 0x2
   341                           
   342  0072                     ?___lbdiv:	
   343                           ; 1 bytes @ 0x2
   344                           
   345  0072                     ?_timerOut:	
   346                           ; 1 bytes @ 0x2
   347                           
   348  0072                     eepromReadByte@EEAddr:	
   349                           ; 2 bytes @ 0x2
   350                           
   351  0072                     eepromWriteByte@EEData:	
   352                           ; 1 bytes @ 0x2
   353                           
   354  0072                     comArr@arr2:	
   355                           ; 1 bytes @ 0x2
   356                           
   357  0072                     ___bmul@multiplicand:	
   358                           ; 1 bytes @ 0x2
   359                           
   360  0072                     ___lbdiv@divisor:	
   361                           ; 1 bytes @ 0x2
   362                           
   363  0072                     timerOut@time:	
   364                           ; 1 bytes @ 0x2
   365                           
   366  0072                     setState@_tOut:	
   367                           ; 2 bytes @ 0x2
   368                           
   369                           
   370                           ; 2 bytes @ 0x2
   371  0072                     	ds	1
   372  0073                     ??_eepromWriteByte:	
   373  0073                     ??___bmul:	
   374                           ; 0 bytes @ 0x3
   375                           
   376  0073                     ??___lbdiv:	
   377                           ; 0 bytes @ 0x3
   378                           
   379  0073                     eepromReadByte@ReEepromData:	
   380                           ; 0 bytes @ 0x3
   381                           
   382  0073                     comArr@len1:	
   383                           ; 1 bytes @ 0x3
   384                           
   385  0073                     swUartSendByte@dat:	
   386                           ; 1 bytes @ 0x3
   387                           
   388  0073                     ___bmul@product:	
   389                           ; 1 bytes @ 0x3
   390                           
   391  0073                     ___lbdiv@dividend:	
   392                           ; 1 bytes @ 0x3
   393                           
   394                           
   395                           ; 1 bytes @ 0x3
   396  0073                     	ds	1
   397  0074                     ?_eepromReadBlock:	
   398  0074                     ??_timerOut:	
   399                           ; 0 bytes @ 0x4
   400                           
   401  0074                     ??_setState:	
   402                           ; 0 bytes @ 0x4
   403                           
   404  0074                     eepromReadBlock@buff:	
   405                           ; 0 bytes @ 0x4
   406                           
   407  0074                     comArr@len2:	
   408                           ; 1 bytes @ 0x4
   409                           
   410  0074                     timerOut@Logic:	
   411                           ; 1 bytes @ 0x4
   412                           
   413  0074                     delay_x10ms@t:	
   414                           ; 1 bytes @ 0x4
   415                           
   416  0074                     setState@stt:	
   417                           ; 1 bytes @ 0x4
   418                           
   419  0074                     swUartSendByte@i:	
   420                           ; 1 bytes @ 0x4
   421                           
   422  0074                     ___bmul@multiplier:	
   423                           ; 1 bytes @ 0x4
   424                           
   425  0074                     ___lbdiv@counter:	
   426                           ; 1 bytes @ 0x4
   427                           
   428                           
   429                           ; 1 bytes @ 0x4
   430  0074                     	ds	1
   431  0075                     ??_swUartSendString:	
   432  0075                     ??_SendNum:	
   433                           ; 0 bytes @ 0x5
   434                           
   435  0075                     ??_comArr:	
   436                           ; 0 bytes @ 0x5
   437                           
   438  0075                     ?_beep:	
   439                           ; 0 bytes @ 0x5
   440                           
   441  0075                     eepromReadBlock@len:	
   442                           ; 0 bytes @ 0x5
   443                           
   444  0075                     eepromWriteByte@EEAddr:	
   445                           ; 1 bytes @ 0x5
   446                           
   447  0075                     beep@rep:	
   448                           ; 1 bytes @ 0x5
   449                           
   450  0075                     swUartSendString@str:	
   451                           ; 1 bytes @ 0x5
   452                           
   453  0075                     ___lbdiv@quotient:	
   454                           ; 1 bytes @ 0x5
   455                           
   456  0075                     timerOut@CurTimer:	
   457                           ; 1 bytes @ 0x5
   458                           
   459  0075                     _SendNum$4581:	
   460                           ; 2 bytes @ 0x5
   461                           
   462                           
   463                           ; 2 bytes @ 0x5
   464  0075                     	ds	1
   465  0076                     ??_eepromReadBlock:	
   466  0076                     ?_eepromWriteBlock:	
   467                           ; 0 bytes @ 0x6
   468                           
   469  0076                     ??_beep:	
   470                           ; 0 bytes @ 0x6
   471                           
   472  0076                     eepromWriteBlock@buff:	
   473                           ; 0 bytes @ 0x6
   474                           
   475  0076                     beep@delay:	
   476                           ; 1 bytes @ 0x6
   477                           
   478                           
   479                           ; 1 bytes @ 0x6
   480  0076                     	ds	1
   481  0077                     ??_get_RFID:	
   482  0077                     eepromReadBlock@addStart:	
   483                           ; 0 bytes @ 0x7
   484                           
   485  0077                     eepromWriteBlock@len:	
   486                           ; 1 bytes @ 0x7
   487                           
   488  0077                     _SendNum$4582:	
   489                           ; 1 bytes @ 0x7
   490                           
   491                           
   492                           ; 2 bytes @ 0x7
   493  0077                     	ds	1
   494  0078                     ??_eepromWriteBlock:	
   495  0078                     eepromReadBlock@i:	
   496                           ; 0 bytes @ 0x8
   497                           
   498  0078                     comArr@arr1:	
   499                           ; 1 bytes @ 0x8
   500                           
   501                           
   502                           ; 1 bytes @ 0x8
   503  0078                     	ds	1
   504  0079                     eepromWriteBlock@addStart:	
   505  0079                     comArr@i:	
   506                           ; 1 bytes @ 0x9
   507                           
   508  0079                     SendNum@num:	
   509                           ; 1 bytes @ 0x9
   510                           
   511                           
   512                           ; 1 bytes @ 0x9
   513  0079                     	ds	1
   514  007A                     ?_id_search:	
   515  007A                     eepromWriteBlock@i:	
   516                           ; 1 bytes @ 0xA
   517                           
   518  007A                     id_search@buff:	
   519                           ; 1 bytes @ 0xA
   520                           
   521  007A                     SendNum@nib:	
   522                           ; 1 bytes @ 0xA
   523                           
   524                           
   525                           ; 1 bytes @ 0xA
   526  007A                     	ds	1
   527  007B                     ??_id_search:	
   528  007B                     id_replate@id:	
   529                           ; 0 bytes @ 0xB
   530                           
   531                           
   532                           ; 1 bytes @ 0xB
   533  007B                     	ds	1
   534  007C                     ??_id_clear:	
   535                           
   536                           	psect	cstackBANK0
   537  003F                     __pcstackBANK0:	
   538                           ; 0 bytes @ 0xC
   539                           
   540  003F                     ?_id_replate:	
   541  003F                     id_search@id_input:	
   542                           ; 0 bytes @ 0x0
   543                           
   544  003F                     id_replate@Cont:	
   545                           ; 1 bytes @ 0x0
   546                           
   547  003F                     get_RFID@RF_serial_55bits:	
   548                           ; 1 bytes @ 0x0
   549                           
   550                           
   551                           ; 11 bytes @ 0x0
   552  003F                     	ds	1
   553  0040                     id_search@i:	
   554  0040                     id_replate@buff:	
   555                           ; 1 bytes @ 0x1
   556                           
   557                           
   558                           ; 1 bytes @ 0x1
   559  0040                     	ds	1
   560  0041                     ??_id_replate:	
   561                           
   562                           ; 0 bytes @ 0x2
   563  0041                     	ds	2
   564  0043                     ?_id_clear:	
   565  0043                     id_clear@idMax:	
   566                           ; 0 bytes @ 0x4
   567                           
   568                           
   569                           ; 1 bytes @ 0x4
   570  0043                     	ds	1
   571  0044                     id_clear@tmp:	
   572                           
   573                           ; 5 bytes @ 0x5
   574  0044                     	ds	5
   575  0049                     id_clear@idMin:	
   576                           
   577                           ; 1 bytes @ 0xA
   578  0049                     	ds	1
   579  004A                     get_RFID@flag_RFID_syn:	
   580                           
   581                           ; 1 bytes @ 0xB
   582  004A                     	ds	1
   583  004B                     get_RFID@even_col:	
   584                           
   585                           ; 1 bytes @ 0xC
   586  004B                     	ds	1
   587  004C                     get_RFID@even_row:	
   588                           
   589                           ; 1 bytes @ 0xD
   590  004C                     	ds	1
   591  004D                     get_RFID@j:	
   592                           
   593                           ; 1 bytes @ 0xE
   594  004D                     	ds	1
   595  004E                     get_RFID@i:	
   596                           
   597                           ; 1 bytes @ 0xF
   598  004E                     	ds	1
   599  004F                     get_RFID@flag_RFID_last:	
   600                           
   601                           ; 1 bytes @ 0x10
   602  004F                     	ds	1
   603  0050                     get_RFID@timeOutVal:	
   604                           
   605                           ; 2 bytes @ 0x11
   606  0050                     	ds	2
   607  0052                     get_RFID@ii:	
   608                           
   609                           ; 1 bytes @ 0x13
   610  0052                     	ds	1
   611  0053                     ??_main:	
   612                           
   613                           ; 0 bytes @ 0x14
   614  0053                     	ds	3
   615  0056                     main@t1:	
   616                           
   617                           ; 1 bytes @ 0x17
   618  0056                     	ds	1
   619  0057                     main@idState:	
   620                           
   621                           ; 1 bytes @ 0x18
   622  0057                     	ds	1
   623  0058                     main@idop:	
   624                           
   625                           ; 1 bytes @ 0x19
   626  0058                     	ds	1
   627  0059                     main@tmp:	
   628                           
   629                           ; 1 bytes @ 0x1A
   630  0059                     	ds	1
   631                           
   632                           	psect	maintext
   633  000B                     __pmaintext:	
   634 ;;Data sizes: Strings 7, constant 0, data 31, bss 11, persistent 0 stack 0
   635 ;;Auto spaces:   Size  Autos    Used
   636 ;; COMMON          14     12      12
   637 ;; BANK0           80     27      69
   638 ;; BANK1           32      0       0
   639 ;;
   640 ;; Pointer list with targets:
   641 ;; ?_timerOut	unsigned int  size(1) Largest target is 0
   642 ;;
   643 ;; swUartSendString@str	PTR unsigned char  size(1) Largest target is 7
   644 ;;		 -> STR_1(CODE[7]), 
   645 ;;
   646 ;; id_replate@Cont	PTR unsigned char  size(1) Largest target is 5
   647 ;;		 -> id_clear@tmp(BANK0[5]), keyID(BANK0[5]), 
   648 ;;
   649 ;; id_replate@buff	PTR unsigned char  size(1) Largest target is 25
   650 ;;		 -> buffTag(BANK0[25]), 
   651 ;;
   652 ;; id_search@buff	PTR unsigned char  size(1) Largest target is 25
   653 ;;		 -> buffTag(BANK0[25]), 
   654 ;;
   655 ;; id_search@id_input	PTR unsigned char  size(1) Largest target is 5
   656 ;;		 -> keyID(BANK0[5]), 
   657 ;;
   658 ;; comArr@arr2	PTR unsigned char  size(1) Largest target is 25
   659 ;;		 -> buffTag(BANK0[25]), 
   660 ;;
   661 ;; comArr@arr1	PTR unsigned char  size(1) Largest target is 5
   662 ;;		 -> keyID(BANK0[5]), 
   663 ;;
   664 ;; eepromWriteBlock@buff	PTR unsigned char  size(1) Largest target is 25
   665 ;;		 -> buffTag(BANK0[25]), 
   666 ;;
   667 ;; eepromReadBlock@buff	PTR unsigned char  size(1) Largest target is 25
   668 ;;		 -> buffTag(BANK0[25]), 
   669 ;;
   670 ;;
   671 ;; Critical Paths under _main in COMMON
   672 ;;
   673 ;;   _main->_id_search
   674 ;;   _main->_id_replate
   675 ;;   _id_clear->_id_replate
   676 ;;   _id_replate->_eepromWriteBlock
   677 ;;   _SendNum->_swUartSendByte
   678 ;;   _swUartSendString->_swUartSendByte
   679 ;;   _beep->_delay_x10ms
   680 ;;   _eepromWriteBlock->_eepromWriteByte
   681 ;;   _id_search->_comArr
   682 ;;   _get_RFID->_timerOut
   683 ;;   _eepromReadBlock->_eepromReadByte
   684 ;;
   685 ;; Critical Paths under _ISR in COMMON
   686 ;;
   687 ;;   None.
   688 ;;
   689 ;; Critical Paths under _main in BANK0
   690 ;;
   691 ;;   _main->_get_RFID
   692 ;;   _id_clear->_id_replate
   693 ;;
   694 ;; Critical Paths under _ISR in BANK0
   695 ;;
   696 ;;   None.
   697 ;;
   698 ;; Critical Paths under _main in BANK1
   699 ;;
   700 ;;   None.
   701 ;;
   702 ;; Critical Paths under _ISR in BANK1
   703 ;;
   704 ;;   None.
   705 ;;
   706 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   707 ;;
   708 ;;
   709 ;;Call Graph Tables:
   710 ;;
   711 ;; ---------------------------------------------------------------------------------
   712 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   713 ;; ---------------------------------------------------------------------------------
   714 ;; (0) _main                                                 7     7      0    5135
   715 ;;                                             20 BANK0      7     7      0
   716 ;;                           _sys_init
   717 ;;                          _gpio_init
   718 ;;                         _timer_init
   719 ;;                           _int_init
   720 ;;                    _eepromWriteByte
   721 ;;                        _SET_EPWM_ON
   722 ;;                     _eepromReadByte
   723 ;;                    _eepromReadBlock
   724 ;;                           _setState
   725 ;;                               _beep
   726 ;;                           _get_RFID
   727 ;;                   _swUartSendString
   728 ;;                            _SendNum
   729 ;;                          _id_search
   730 ;;                           _id_clear
   731 ;;                         _id_replate
   732 ;; ---------------------------------------------------------------------------------
   733 ;; (1) _id_clear                                             7     6      1     718
   734 ;;                                              4 BANK0      7     6      1
   735 ;;                         _id_replate
   736 ;; ---------------------------------------------------------------------------------
   737 ;; (1) _id_replate                                           5     3      2     623
   738 ;;                                             11 COMMON     1     1      0
   739 ;;                                              0 BANK0      4     2      2
   740 ;;                             ___bmul
   741 ;;                   _eepromWriteBlock
   742 ;; ---------------------------------------------------------------------------------
   743 ;; (1) _SendNum                                              6     6      0     300
   744 ;;                                              5 COMMON     6     6      0
   745 ;;                     _swUartSendByte
   746 ;; ---------------------------------------------------------------------------------
   747 ;; (1) _swUartSendString                                     1     1      0     114
   748 ;;                                              5 COMMON     1     1      0
   749 ;;                     _swUartSendByte
   750 ;; ---------------------------------------------------------------------------------
   751 ;; (1) _beep                                                 2     1      1      66
   752 ;;                                              5 COMMON     2     1      1
   753 ;;                        _delay_x10ms
   754 ;; ---------------------------------------------------------------------------------
   755 ;; (2) _eepromWriteBlock                                     5     3      2     178
   756 ;;                                              6 COMMON     5     3      2
   757 ;;                    _eepromWriteByte
   758 ;; ---------------------------------------------------------------------------------
   759 ;; (2) _swUartSendByte                                       3     3      0      69
   760 ;;                                              2 COMMON     3     3      0
   761 ;; ---------------------------------------------------------------------------------
   762 ;; (1) _id_search                                            4     3      1     518
   763 ;;                                             10 COMMON     2     1      1
   764 ;;                                              0 BANK0      2     2      0
   765 ;;                             _comArr
   766 ;;                            ___lbdiv
   767 ;; ---------------------------------------------------------------------------------
   768 ;; (2) _delay_x10ms                                          3     3      0      22
   769 ;;                                              2 COMMON     3     3      0
   770 ;; ---------------------------------------------------------------------------------
   771 ;; (1) _get_RFID                                            21    21      0    1917
   772 ;;                                              7 COMMON     1     1      0
   773 ;;                                              0 BANK0     20    20      0
   774 ;;                           _timerOut
   775 ;;                            ___lbdiv
   776 ;; ---------------------------------------------------------------------------------
   777 ;; (3) _eepromWriteByte                                      4     3      1      44
   778 ;;                                              2 COMMON     4     3      1
   779 ;; ---------------------------------------------------------------------------------
   780 ;; (1) _eepromReadBlock                                      5     3      2     179
   781 ;;                                              4 COMMON     5     3      2
   782 ;;                     _eepromReadByte
   783 ;; ---------------------------------------------------------------------------------
   784 ;; (1) _sys_init                                             0     0      0       0
   785 ;; ---------------------------------------------------------------------------------
   786 ;; (2) ___lbdiv                                              4     3      1     162
   787 ;;                                              2 COMMON     4     3      1
   788 ;; ---------------------------------------------------------------------------------
   789 ;; (2) ___bmul                                               3     2      1      92
   790 ;;                                              2 COMMON     3     2      1
   791 ;; ---------------------------------------------------------------------------------
   792 ;; (1) _setState                                             3     1      2      44
   793 ;;                                              2 COMMON     3     1      2
   794 ;; ---------------------------------------------------------------------------------
   795 ;; (1) _SET_EPWM_ON                                          0     0      0       0
   796 ;; ---------------------------------------------------------------------------------
   797 ;; (2) _timerOut                                             5     3      2      90
   798 ;;                                              2 COMMON     5     3      2
   799 ;; ---------------------------------------------------------------------------------
   800 ;; (2) _comArr                                               8     5      3     222
   801 ;;                                              2 COMMON     8     5      3
   802 ;; ---------------------------------------------------------------------------------
   803 ;; (2) _eepromReadByte                                       2     2      0      45
   804 ;;                                              2 COMMON     2     2      0
   805 ;; ---------------------------------------------------------------------------------
   806 ;; (1) _int_init                                             0     0      0       0
   807 ;; ---------------------------------------------------------------------------------
   808 ;; (1) _timer_init                                           0     0      0       0
   809 ;; ---------------------------------------------------------------------------------
   810 ;; (1) _gpio_init                                            0     0      0       0
   811 ;; ---------------------------------------------------------------------------------
   812 ;; Estimated maximum stack depth 3
   813 ;; ---------------------------------------------------------------------------------
   814 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   815 ;; ---------------------------------------------------------------------------------
   816 ;; (5) _ISR                                                  2     2      0       0
   817 ;;                                              0 COMMON     2     2      0
   818 ;; ---------------------------------------------------------------------------------
   819 ;; Estimated maximum stack depth 5
   820 ;; ---------------------------------------------------------------------------------
   821 ;; Call Graph Graphs:
   822 ;; _main (ROOT)
   823 ;;   _sys_init
   824 ;;   _gpio_init
   825 ;;   _timer_init
   826 ;;   _int_init
   827 ;;   _eepromWriteByte
   828 ;;   _SET_EPWM_ON
   829 ;;   _eepromReadByte
   830 ;;   _eepromReadBlock
   831 ;;     _eepromReadByte
   832 ;;   _setState
   833 ;;   _beep
   834 ;;     _delay_x10ms
   835 ;;   _get_RFID
   836 ;;     _timerOut
   837 ;;     ___lbdiv
   838 ;;   _swUartSendString
   839 ;;     _swUartSendByte
   840 ;;   _SendNum
   841 ;;     _swUartSendByte
   842 ;;   _id_search
   843 ;;     _comArr
   844 ;;     ___lbdiv
   845 ;;   _id_clear
   846 ;;     _id_replate
   847 ;;       ___bmul
   848 ;;       _eepromWriteBlock
   849 ;;         _eepromWriteByte
   850 ;;   _id_replate
   851 ;;     ___bmul
   852 ;;     _eepromWriteBlock
   853 ;;       _eepromWriteByte
   854 ;;
   855 ;; _ISR (ROOT)
   856 ;;
   857 ;; Address spaces:
   858 ;;Name               Size   Autos  Total    Cost      Usage
   859 ;;SFR2                 0      0       0       5        0.0%
   860 ;;BITSFR2              0      0       0       5        0.0%
   861 ;;SFR1                 0      0       0       2        0.0%
   862 ;;BITSFR1              0      0       0       2        0.0%
   863 ;;BANK1               20      0       0       6        0.0%
   864 ;;BITBANK1            20      0       0       5        0.0%
   865 ;;CODE                 0      0       0       0        0.0%
   866 ;;DATA                 0      0      55       8        0.0%
   867 ;;ABS                  0      0      51       7        0.0%
   868 ;;NULL                 0      0       0       0        0.0%
   869 ;;STACK                0      0       4       2        0.0%
   870 ;;BANK0               50     1B      45       4       86.3%
   871 ;;BITBANK0            50      0       0       3        0.0%
   872 ;;SFR0                 0      0       0       1        0.0%
   873 ;;BITSFR0              0      0       0       1        0.0%
   874 ;;COMMON               E      C       C       1       85.7%
   875 ;;BITCOMMON            E      0       0       0        0.0%
   876 ;;EEDATA              80      0       0       0        0.0%
   877                           
   878                           
   879 ;; *************** function _main *****************
   880 ;; Defined at:
   881 ;;		line 164 in file "MAIN.C"
   882 ;; Parameters:    Size  Location     Type
   883 ;;		None
   884 ;; Auto vars:     Size  Location     Type
   885 ;;  tmp             1   26[BANK0 ] unsigned char 
   886 ;;  idop            1   25[BANK0 ] unsigned char 
   887 ;;  idState         1   24[BANK0 ] unsigned char 
   888 ;;  t1              1   23[BANK0 ] unsigned char 
   889 ;; Return value:  Size  Location     Type
   890 ;;		None               void
   891 ;; Registers used:
   892 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   893 ;; Tracked objects:
   894 ;;		On entry : 17F/0
   895 ;;		On exit  : 60/0
   896 ;;		Unchanged: 0/0
   897 ;; Data sizes:     COMMON   BANK0   BANK1
   898 ;;      Params:         0       0       0
   899 ;;      Locals:         0       4       0
   900 ;;      Temps:          0       3       0
   901 ;;      Totals:         0       7       0
   902 ;;Total ram usage:        7 bytes
   903 ;; Hardware stack levels required when called:    5
   904 ;; This function calls:
   905 ;;		_sys_init
   906 ;;		_gpio_init
   907 ;;		_timer_init
   908 ;;		_int_init
   909 ;;		_eepromWriteByte
   910 ;;		_SET_EPWM_ON
   911 ;;		_eepromReadByte
   912 ;;		_eepromReadBlock
   913 ;;		_setState
   914 ;;		_beep
   915 ;;		_get_RFID
   916 ;;		_swUartSendString
   917 ;;		_SendNum
   918 ;;		_id_search
   919 ;;		_id_clear
   920 ;;		_id_replate
   921 ;; This function is called by:
   922 ;;		Startup code after reset
   923 ;; This function uses a non-reentrant model
   924 ;;
   925  000B                     _main:	
   926                           
   927                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   928  000B  3007               	movlw	7	;#
   929  000C  0099               	movwf	25	;#
   930                           
   931                           ;MAIN.C: 171: unsigned char idop,tmp,idState=0;
   932  000D  1283               	bcf	3,5	;RP0=0, select bank0
   933  000E  1303               	bcf	3,6	;RP1=0, select bank0
   934  000F  01D7               	clrf	main@idState
   935  0010  0064               	clrwdt	;#
   936                           
   937                           ;MAIN.C: 175: sys_init();
   938  0011  25D1               	fcall	_sys_init
   939                           
   940                           ;MAIN.C: 176: gpio_init();
   941  0012  258F               	fcall	_gpio_init
   942                           
   943                           ;MAIN.C: 178: timer_init();
   944  0013  25DB               	fcall	_timer_init
   945                           
   946                           ;MAIN.C: 179: int_init();
   947  0014  253C               	fcall	_int_init
   948                           
   949                           ;MAIN.C: 185: eepromWriteByte(0x7F,0xAA);
   950  0015  30AA               	movlw	170
   951  0016  00F2               	movwf	?_eepromWriteByte
   952  0017  307F               	movlw	127
   953  0018  2406               	fcall	_eepromWriteByte
   954                           
   955                           ;MAIN.C: 186: eepromWriteByte(0x7F,0xAA);
   956  0019  30AA               	movlw	170
   957  001A  00F2               	movwf	?_eepromWriteByte
   958  001B  307F               	movlw	127
   959  001C  2406               	fcall	_eepromWriteByte
   960                           
   961                           ;MAIN.C: 189: TRISC &=0xfe;
   962  001D  1683               	bsf	3,5	;RP0=1, select bank1
   963  001E  1303               	bcf	3,6	;RP1=0, select bank1
   964  001F  1007               	bcf	7,0	;volatile
   965                           
   966                           ;MAIN.C: 191: SET_EPWM_ON();
   967  0020  24FB               	fcall	_SET_EPWM_ON
   968                           
   969                           ;MAIN.C: 195: _delay((unsigned long)((20)*(8000000/4000.0)));
   970  0021  3034               	movlw	52
   971  0022  1283               	bcf	3,5	;RP0=0, select bank0
   972  0023  00D4               	movwf	??_main+1
   973  0024  30F1               	movlw	241
   974  0025  00D3               	movwf	??_main
   975  0026                     u2237:	
   976  0026  0BD3               	decfsz	??_main,f
   977  0027  2826               	goto	u2237
   978  0028  0BD4               	decfsz	??_main+1,f
   979  0029  2826               	goto	u2237
   980  002A  282B               	nop2
   981                           
   982                           ;MAIN.C: 200: if(eepromReadByte(0x02) == 0xff) eepromWriteByte(0x02,0);
   983  002B  3002               	movlw	2
   984  002C  25E5               	fcall	_eepromReadByte
   985  002D  3AFF               	xorlw	255
   986  002E  1D03               	skipz
   987  002F  2833               	goto	l6665
   988  0030  3002               	movlw	2
   989  0031  01F2               	clrf	?_eepromWriteByte
   990  0032  2406               	fcall	_eepromWriteByte
   991  0033                     l6665:	
   992                           
   993                           ;MAIN.C: 201: if(eepromReadByte(0x01)==0xff)eepromWriteByte(0x01,0);
   994  0033  3001               	movlw	1
   995  0034  25E5               	fcall	_eepromReadByte
   996  0035  3AFF               	xorlw	255
   997  0036  1D03               	skipz
   998  0037  283B               	goto	l6669
   999  0038  3001               	movlw	1
  1000  0039  01F2               	clrf	?_eepromWriteByte
  1001  003A  2406               	fcall	_eepromWriteByte
  1002  003B                     l6669:	
  1003                           
  1004                           ;MAIN.C: 203: if(eepromReadByte(0x06)!=0){
  1005  003B  3006               	movlw	6
  1006  003C  25E5               	fcall	_eepromReadByte
  1007  003D  3A00               	xorlw	0
  1008  003E  1903               	skipnz
  1009  003F  2852               	goto	l6673
  1010  0040  3006               	movlw	6
  1011                           
  1012                           ;MAIN.C: 207: eepromWriteByte(0x06,0);
  1013  0041  01F2               	clrf	?_eepromWriteByte
  1014  0042  2406               	fcall	_eepromWriteByte
  1015  0043  3007               	movlw	7
  1016                           
  1017                           ;MAIN.C: 208: eepromWriteByte(0x06+1,0);
  1018  0044  01F2               	clrf	?_eepromWriteByte
  1019  0045  2406               	fcall	_eepromWriteByte
  1020                           
  1021                           ;MAIN.C: 209: eepromWriteByte(0x06+2,0x87);
  1022  0046  3087               	movlw	135
  1023  0047  00F2               	movwf	?_eepromWriteByte
  1024  0048  3008               	movlw	8
  1025  0049  2406               	fcall	_eepromWriteByte
  1026                           
  1027                           ;MAIN.C: 210: eepromWriteByte(0x06+3,0x3a);
  1028  004A  303A               	movlw	58
  1029  004B  00F2               	movwf	?_eepromWriteByte
  1030  004C  3009               	movlw	9
  1031  004D  2406               	fcall	_eepromWriteByte
  1032                           
  1033                           ;MAIN.C: 211: eepromWriteByte(0x06+4,0xf8);
  1034  004E  30F8               	movlw	248
  1035  004F  00F2               	movwf	?_eepromWriteByte
  1036  0050  300A               	movlw	10
  1037  0051  2406               	fcall	_eepromWriteByte
  1038  0052                     l6673:	
  1039                           
  1040                           ;MAIN.C: 213: }
  1041                           ;MAIN.C: 214: eepromReadBlock(0x06,buffTag,5*5);
  1042  0052  3026               	movlw	_buffTag& (0+255)
  1043  0053  00F4               	movwf	?_eepromReadBlock
  1044  0054  3019               	movlw	25
  1045  0055  00F5               	movwf	?_eepromReadBlock+1
  1046  0056  3006               	movlw	6
  1047  0057  254E               	fcall	_eepromReadBlock
  1048                           
  1049                           ;MAIN.C: 217: {
  1050                           ;MAIN.C: 218: if( eepromReadByte(0x00) == 7){
  1051  0058  3000               	movlw	0
  1052  0059  25E5               	fcall	_eepromReadByte
  1053  005A  3A07               	xorlw	7
  1054  005B  1D03               	skipz
  1055  005C  28A9               	goto	l6701
  1056                           
  1057                           ;MAIN.C: 219: tmp = eepromReadByte(0x02);
  1058  005D  3002               	movlw	2
  1059  005E  25E5               	fcall	_eepromReadByte
  1060  005F  1283               	bcf	3,5	;RP0=0, select bank0
  1061  0060  00D9               	movwf	main@tmp
  1062                           
  1063                           ;MAIN.C: 220: t1 = tmp;
  1064  0061  00D6               	movwf	main@t1
  1065                           
  1066                           ;MAIN.C: 222: if(t1 == 3){
  1067  0062  3A03               	xorlw	3
  1068  0063  1D03               	skipz
  1069  0064  2899               	goto	l6693
  1070                           
  1071                           ;MAIN.C: 227: if((eepromReadByte(0x03)==8) && (eepromReadByte(0x04)==3)&&(eepromReadByte
      +                          (0x05)==3)){
  1072  0065  3003               	movlw	3
  1073  0066  25E5               	fcall	_eepromReadByte
  1074  0067  3A08               	xorlw	8
  1075  0068  1D03               	skipz
  1076  0069  2880               	goto	l6691
  1077  006A  3004               	movlw	4
  1078  006B  25E5               	fcall	_eepromReadByte
  1079  006C  3A03               	xorlw	3
  1080  006D  1D03               	skipz
  1081  006E  2880               	goto	l6691
  1082  006F  3005               	movlw	5
  1083  0070  25E5               	fcall	_eepromReadByte
  1084  0071  3A03               	xorlw	3
  1085  0072  1D03               	skipz
  1086  0073  2880               	goto	l6691
  1087  0074  3001               	movlw	1
  1088                           
  1089                           ;MAIN.C: 228: eepromWriteByte(0x01,1);
  1090  0075  01F2               	clrf	?_eepromWriteByte
  1091  0076  0AF2               	incf	?_eepromWriteByte,f
  1092  0077  2406               	fcall	_eepromWriteByte
  1093  0078  3000               	movlw	0
  1094                           
  1095                           ;MAIN.C: 229: setState(0,0);
  1096  0079  01F2               	clrf	?_setState
  1097  007A  01F3               	clrf	?_setState+1
  1098  007B  25C6               	fcall	_setState
  1099                           
  1100                           ;MAIN.C: 230: beep(20,2);
  1101  007C  3002               	movlw	2
  1102  007D  00F5               	movwf	?_beep
  1103  007E  3014               	movlw	20
  1104  007F  2888               	goto	L1
  1105  0080                     l6691:	
  1106                           ;MAIN.C: 231: }
  1107                           
  1108                           
  1109                           ;MAIN.C: 232: else{
  1110                           ;MAIN.C: 233: setState(1,45);
  1111  0080  302D               	movlw	45
  1112  0081  00F2               	movwf	?_setState
  1113  0082  3001               	movlw	1
  1114  0083  01F3               	clrf	?_setState+1
  1115  0084  25C6               	fcall	_setState
  1116                           
  1117                           ;MAIN.C: 234: beep(10,5);
  1118  0085  3005               	movlw	5
  1119  0086  00F5               	movwf	?_beep
  1120  0087  300A               	movlw	10
  1121  0088                     L1:	
  1122  0088  24A8               	fcall	_beep
  1123  0089  3000               	movlw	0
  1124                           
  1125                           ;MAIN.C: 235: }
  1126                           ;MAIN.C: 237: eepromWriteByte(0x00,0);
  1127  008A  01F2               	clrf	?_eepromWriteByte
  1128  008B  2406               	fcall	_eepromWriteByte
  1129  008C  3002               	movlw	2
  1130                           
  1131                           ;MAIN.C: 238: eepromWriteByte(0x02,0);
  1132  008D  01F2               	clrf	?_eepromWriteByte
  1133  008E  2406               	fcall	_eepromWriteByte
  1134  008F  3005               	movlw	5
  1135                           
  1136                           ;MAIN.C: 239: eepromWriteByte(0x05,0);
  1137  0090  01F2               	clrf	?_eepromWriteByte
  1138  0091  2406               	fcall	_eepromWriteByte
  1139  0092  3004               	movlw	4
  1140                           
  1141                           ;MAIN.C: 240: eepromWriteByte(0x04,0);
  1142  0093  01F2               	clrf	?_eepromWriteByte
  1143  0094  2406               	fcall	_eepromWriteByte
  1144  0095  3003               	movlw	3
  1145                           
  1146                           ;MAIN.C: 241: eepromWriteByte(0x03,0);
  1147  0096  01F2               	clrf	?_eepromWriteByte
  1148  0097  2406               	fcall	_eepromWriteByte
  1149                           
  1150                           ;MAIN.C: 243: }
  1151  0098  28AE               	goto	l6703
  1152  0099                     l6693:	
  1153                           
  1154                           ;MAIN.C: 244: else{
  1155                           ;MAIN.C: 245: tmp = eepromReadByte(0x02) ;
  1156  0099  3002               	movlw	2
  1157  009A  25E5               	fcall	_eepromReadByte
  1158  009B  1283               	bcf	3,5	;RP0=0, select bank0
  1159  009C  00D9               	movwf	main@tmp
  1160                           
  1161                           ;MAIN.C: 246: tmp++;
  1162  009D  0AD9               	incf	main@tmp,f
  1163                           
  1164                           ;MAIN.C: 247: eepromWriteByte(0x02,tmp);
  1165  009E  0859               	movf	main@tmp,w
  1166  009F  00F2               	movwf	?_eepromWriteByte
  1167  00A0  3002               	movlw	2
  1168  00A1  2406               	fcall	_eepromWriteByte
  1169  00A2  300A               	movlw	10
  1170                           
  1171                           ;MAIN.C: 248: PwInNum=0;
  1172  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  1173  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  1174  00A5  01DE               	clrf	_PwInNum
  1175                           
  1176                           ;MAIN.C: 249: setState(7,10);
  1177  00A6  00F2               	movwf	?_setState
  1178  00A7  3007               	movlw	7
  1179  00A8  28AC               	goto	L2
  1180  00A9                     l6701:	
  1181                           
  1182                           ;MAIN.C: 253: else{
  1183                           ;MAIN.C: 254: setState(1,45);
  1184  00A9  302D               	movlw	45
  1185  00AA  00F2               	movwf	?_setState
  1186  00AB  3001               	movlw	1
  1187  00AC                     L2:	
  1188  00AC  01F3               	clrf	?_setState+1
  1189  00AD  25C6               	fcall	_setState
  1190  00AE                     l6703:	
  1191                           
  1192                           ;MAIN.C: 255: }
  1193                           ;MAIN.C: 257: if(eepromReadByte(0x01)== 1){
  1194  00AE  3001               	movlw	1
  1195  00AF  25E5               	fcall	_eepromReadByte
  1196  00B0  3A01               	xorlw	1
  1197  00B1  1D03               	skipz
  1198  00B2  28B7               	goto	l3489
  1199  00B3  3000               	movlw	0
  1200                           
  1201                           ;MAIN.C: 258: setState(0,0);
  1202  00B4  01F2               	clrf	?_setState
  1203  00B5  01F3               	clrf	?_setState+1
  1204  00B6  25C6               	fcall	_setState
  1205  00B7                     l3489:	
  1206                           
  1207                           ;MAIN.C: 259: }
  1208                           ;MAIN.C: 260: }
  1209                           ;MAIN.C: 262: setState(1,45);
  1210  00B7  302D               	movlw	45
  1211  00B8  00F2               	movwf	?_setState
  1212  00B9  3001               	movlw	1
  1213  00BA  01F3               	clrf	?_setState+1
  1214  00BB  25C6               	fcall	_setState
  1215                           
  1216                           ;MAIN.C: 267: tmp=0;
  1217  00BC  01D9               	clrf	main@tmp
  1218  00BD                     l6709:	
  1219                           
  1220                           ;MAIN.C: 271: idop = get_RFID();
  1221  00BD  2230               	fcall	_get_RFID
  1222  00BE  00D8               	movwf	main@idop
  1223                           
  1224                           ;MAIN.C: 273: if(idop){
  1225  00BF  0858               	movf	main@idop,w
  1226  00C0  1903               	btfsc	3,2
  1227  00C1  29AB               	goto	l6817
  1228                           
  1229                           ;MAIN.C: 274: swUartSendString("\nTag: ");
  1230  00C2  3001               	movlw	(STR_1-__stringbase)& (0+255)
  1231  00C3  25B9               	fcall	_swUartSendString
  1232                           
  1233                           ;MAIN.C: 276: SendNum(keyID[1]);
  1234  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  1235  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  1236  00C6  0861               	movf	_keyID+1,w
  1237  00C7  23E0               	fcall	_SendNum
  1238                           
  1239                           ;MAIN.C: 277: SendNum(keyID[2]);
  1240  00C8  1283               	bcf	3,5	;RP0=0, select bank0
  1241  00C9  1303               	bcf	3,6	;RP1=0, select bank0
  1242  00CA  0862               	movf	_keyID+2,w
  1243  00CB  23E0               	fcall	_SendNum
  1244                           
  1245                           ;MAIN.C: 278: SendNum(keyID[3]);
  1246  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  1247  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  1248  00CE  0863               	movf	_keyID+3,w
  1249  00CF  23E0               	fcall	_SendNum
  1250                           
  1251                           ;MAIN.C: 279: SendNum(keyID[4]);
  1252  00D0  1283               	bcf	3,5	;RP0=0, select bank0
  1253  00D1  1303               	bcf	3,6	;RP1=0, select bank0
  1254  00D2  0864               	movf	_keyID+4,w
  1255  00D3  23E0               	fcall	_SendNum
  1256                           
  1257                           ;MAIN.C: 280: idop = id_search(keyID,buffTag);
  1258  00D4  3026               	movlw	_buffTag& (0+255)
  1259  00D5  00FA               	movwf	?_id_search
  1260  00D6  3060               	movlw	_keyID& (0+255)
  1261  00D7  24C4               	fcall	_id_search
  1262  00D8  00D8               	movwf	main@idop
  1263                           
  1264                           ;MAIN.C: 281: switch (mtState){
  1265  00D9  2992               	goto	l6813
  1266  00DA                     l6723:	
  1267                           
  1268                           ;MAIN.C: 284: case 1:
  1269                           ;MAIN.C: 285: case 2:
  1270                           ;MAIN.C: 287: if((idop>1) && (idop <6))
  1271  00DA  3002               	movlw	2
  1272  00DB  0258               	subwf	main@idop,w
  1273  00DC  1C03               	skipc
  1274  00DD  2905               	goto	l6735
  1275  00DE  3006               	movlw	6
  1276  00DF  0258               	subwf	main@idop,w
  1277  00E0  1803               	skipnc
  1278  00E1  2905               	goto	l6735
  1279                           
  1280                           ;MAIN.C: 288: {
  1281                           ;MAIN.C: 289: if( eepromReadByte(0x00) == 7) eepromWriteByte(0x00,0);
  1282  00E2  3000               	movlw	0
  1283  00E3  25E5               	fcall	_eepromReadByte
  1284  00E4  3A07               	xorlw	7
  1285  00E5  1D03               	skipz
  1286  00E6  28EA               	goto	l6731
  1287  00E7  3000               	movlw	0
  1288  00E8  01F2               	clrf	?_eepromWriteByte
  1289  00E9  2406               	fcall	_eepromWriteByte
  1290  00EA                     l6731:	
  1291                           
  1292                           ;MAIN.C: 290: if(mtState==7){
  1293  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  1294  00EB  1303               	bcf	3,6	;RP1=0, select bank0
  1295  00EC  085F               	movf	_mtState,w
  1296  00ED  3A07               	xorlw	7
  1297  00EE  1D03               	skipz
  1298  00EF  28FC               	goto	l3498
  1299  00F0  3002               	movlw	2
  1300                           
  1301                           ;MAIN.C: 291: eepromWriteByte(0x02,0);
  1302  00F1  01F2               	clrf	?_eepromWriteByte
  1303  00F2  2406               	fcall	_eepromWriteByte
  1304  00F3  3005               	movlw	5
  1305                           
  1306                           ;MAIN.C: 292: eepromWriteByte(0x05,0);
  1307  00F4  01F2               	clrf	?_eepromWriteByte
  1308  00F5  2406               	fcall	_eepromWriteByte
  1309  00F6  3004               	movlw	4
  1310                           
  1311                           ;MAIN.C: 293: eepromWriteByte(0x04,0);
  1312  00F7  01F2               	clrf	?_eepromWriteByte
  1313  00F8  2406               	fcall	_eepromWriteByte
  1314  00F9  3003               	movlw	3
  1315                           
  1316                           ;MAIN.C: 294: eepromWriteByte(0x03,0);
  1317  00FA  01F2               	clrf	?_eepromWriteByte
  1318  00FB  2406               	fcall	_eepromWriteByte
  1319  00FC                     l3498:	
  1320  00FC  3000               	movlw	0
  1321                           
  1322                           ;MAIN.C: 295: }
  1323                           ;MAIN.C: 296: setState(0,0);
  1324  00FD  01F2               	clrf	?_setState
  1325  00FE  01F3               	clrf	?_setState+1
  1326  00FF  25C6               	fcall	_setState
  1327  0100  300A               	movlw	10
  1328                           
  1329                           ;MAIN.C: 297: beep(10,1);
  1330  0101  01F5               	clrf	?_beep
  1331  0102  0AF5               	incf	?_beep,f
  1332  0103  24A8               	fcall	_beep
  1333                           
  1334                           ;MAIN.C: 298: }
  1335  0104  299D               	goto	l3501
  1336  0105                     l6735:	
  1337                           
  1338                           ;MAIN.C: 300: else if(idop==1)
  1339  0105  0B58               	decfsz	main@idop,w
  1340  0106  299D               	goto	l3501
  1341                           
  1342                           ;MAIN.C: 301: {
  1343                           ;MAIN.C: 303: id_clear(2,5);
  1344  0107  3005               	movlw	5
  1345  0108  00C3               	movwf	?_id_clear
  1346  0109  3002               	movlw	2
  1347  010A  244A               	fcall	_id_clear
  1348  010B  3003               	movlw	3
  1349                           
  1350                           ;MAIN.C: 304: setState(3,0);
  1351  010C  01F2               	clrf	?_setState
  1352  010D  01F3               	clrf	?_setState+1
  1353  010E  25C6               	fcall	_setState
  1354  010F  3003               	movlw	3
  1355                           
  1356                           ;MAIN.C: 305: tmp=1;
  1357  0110  01D9               	clrf	main@tmp
  1358  0111  0AD9               	incf	main@tmp,f
  1359                           
  1360                           ;MAIN.C: 306: beep(10,3);
  1361  0112  00F5               	movwf	?_beep
  1362  0113  300A               	movlw	10
  1363  0114  24A8               	fcall	_beep
  1364  0115  299D               	goto	l3501
  1365  0116                     l6745:	
  1366                           
  1367                           ;MAIN.C: 312: if(idop<=5 && idop!=1 ){
  1368  0116  3006               	movlw	6
  1369  0117  0258               	subwf	main@idop,w
  1370  0118  1803               	skipnc
  1371  0119  299D               	goto	l3501
  1372  011A  0358               	decf	main@idop,w
  1373  011B  1903               	skipnz
  1374  011C  299D               	goto	l3501
  1375                           
  1376                           ;MAIN.C: 313: if(eepromReadByte(0x01)==1){
  1377  011D  3001               	movlw	1
  1378  011E  25E5               	fcall	_eepromReadByte
  1379  011F  3A01               	xorlw	1
  1380  0120  1D03               	skipz
  1381  0121  299D               	goto	l3501
  1382  0122  3001               	movlw	1
  1383                           
  1384                           ;MAIN.C: 314: eepromWriteByte(0x01,0);
  1385  0123  01F2               	clrf	?_eepromWriteByte
  1386  0124  2406               	fcall	_eepromWriteByte
  1387                           
  1388                           ;MAIN.C: 315: beep(10,2);
  1389  0125  3002               	movlw	2
  1390  0126  00F5               	movwf	?_beep
  1391  0127  300A               	movlw	10
  1392  0128  24A8               	fcall	_beep
  1393  0129  299D               	goto	l3501
  1394  012A                     l6755:	
  1395                           
  1396                           ;MAIN.C: 326: if(idop==1 && idState == 0){
  1397  012A  0B58               	decfsz	main@idop,w
  1398  012B  293E               	goto	l6767
  1399  012C  08D7               	movf	main@idState,f
  1400  012D  1D03               	skipz
  1401  012E  293E               	goto	l6767
  1402                           
  1403                           ;MAIN.C: 328: id_clear(2,5);
  1404  012F  3005               	movlw	5
  1405  0130  00C3               	movwf	?_id_clear
  1406  0131  3002               	movlw	2
  1407  0132  244A               	fcall	_id_clear
  1408  0133  3003               	movlw	3
  1409                           
  1410                           ;MAIN.C: 329: setState(3,0);
  1411  0134  01F2               	clrf	?_setState
  1412  0135  01F3               	clrf	?_setState+1
  1413  0136  25C6               	fcall	_setState
  1414  0137  3003               	movlw	3
  1415                           
  1416                           ;MAIN.C: 330: tmp=1;
  1417  0138  01D9               	clrf	main@tmp
  1418  0139  0AD9               	incf	main@tmp,f
  1419                           
  1420                           ;MAIN.C: 331: beep(10,3);
  1421  013A  00F5               	movwf	?_beep
  1422  013B  300A               	movlw	10
  1423  013C  24A8               	fcall	_beep
  1424                           
  1425                           ;MAIN.C: 332: }
  1426  013D  299D               	goto	l3501
  1427  013E                     l6767:	
  1428                           
  1429                           ;MAIN.C: 334: else if(idop==2 && idState == 0){
  1430  013E  0858               	movf	main@idop,w
  1431  013F  3A02               	xorlw	2
  1432  0140  1D03               	skipz
  1433  0141  299D               	goto	l3501
  1434  0142  08D7               	movf	main@idState,f
  1435  0143  1D03               	skipz
  1436  0144  299D               	goto	l3501
  1437                           
  1438                           ;MAIN.C: 336: id_clear(3,5);
  1439  0145  3005               	movlw	5
  1440  0146  00C3               	movwf	?_id_clear
  1441  0147  3003               	movlw	3
  1442  0148  244A               	fcall	_id_clear
  1443  0149  3005               	movlw	5
  1444                           
  1445                           ;MAIN.C: 337: setState(5,0);
  1446  014A  01F2               	clrf	?_setState
  1447  014B  01F3               	clrf	?_setState+1
  1448  014C  25C6               	fcall	_setState
  1449                           
  1450                           ;MAIN.C: 338: tmp=2;
  1451  014D  3002               	movlw	2
  1452  014E  00D9               	movwf	main@tmp
  1453                           
  1454                           ;MAIN.C: 339: beep(10,2);
  1455  014F  00F5               	movwf	?_beep
  1456  0150  300A               	movlw	10
  1457  0151  24A8               	fcall	_beep
  1458  0152  299D               	goto	l3501
  1459  0153                     l6779:	
  1460                           
  1461                           ;MAIN.C: 345: if (idState == 0){
  1462  0153  08D7               	movf	main@idState,f
  1463  0154  1D03               	skipz
  1464  0155  296D               	goto	l6793
  1465                           
  1466                           ;MAIN.C: 352: if( idop !=1){
  1467  0156  0358               	decf	main@idop,w
  1468  0157  1903               	skipnz
  1469  0158  299D               	goto	l3501
  1470  0159  3006               	movlw	6
  1471                           
  1472                           ;MAIN.C: 353: tmp++;
  1473  015A  0AD9               	incf	main@tmp,f
  1474                           
  1475                           ;MAIN.C: 355: if(tmp <=5){
  1476  015B  0259               	subwf	main@tmp,w
  1477  015C  1803               	skipnc
  1478  015D  299D               	goto	l3501
  1479                           
  1480                           ;MAIN.C: 356: id_replate(tmp,keyID,buffTag);
  1481  015E  3060               	movlw	_keyID& (0+255)
  1482  015F  00BF               	movwf	?_id_replate
  1483  0160  3026               	movlw	_buffTag& (0+255)
  1484  0161  00C0               	movwf	?_id_replate+1
  1485  0162  0859               	movf	main@tmp,w
  1486  0163  237D               	fcall	_id_replate
  1487  0164  300A               	movlw	10
  1488                           
  1489                           ;MAIN.C: 357: timeTick=0;
  1490  0165  1283               	bcf	3,5	;RP0=0, select bank0
  1491  0166  1303               	bcf	3,6	;RP1=0, select bank0
  1492  0167  01DC               	clrf	_timeTick
  1493  0168  01DD               	clrf	_timeTick+1
  1494  0169  01F5               	clrf	?_beep
  1495  016A  0AF5               	incf	?_beep,f
  1496  016B  24A8               	fcall	_beep
  1497  016C  299D               	goto	l3501
  1498  016D                     l6793:	
  1499  016D  300A               	movlw	10
  1500                           
  1501                           ;MAIN.C: 364: beep(10,1);
  1502  016E  01F5               	clrf	?_beep
  1503  016F  0AF5               	incf	?_beep,f
  1504  0170  24A8               	fcall	_beep
  1505  0171  299D               	goto	l3501
  1506  0172                     l6795:	
  1507                           
  1508                           ;MAIN.C: 370: if(idState == 0){
  1509  0172  08D7               	movf	main@idState,f
  1510  0173  1D03               	skipz
  1511  0174  298D               	goto	l6809
  1512                           
  1513                           ;MAIN.C: 371: if( idop >2){
  1514  0175  3003               	movlw	3
  1515  0176  0258               	subwf	main@idop,w
  1516  0177  1C03               	skipc
  1517  0178  299D               	goto	l3501
  1518  0179  3006               	movlw	6
  1519                           
  1520                           ;MAIN.C: 372: tmp++;
  1521  017A  0AD9               	incf	main@tmp,f
  1522                           
  1523                           ;MAIN.C: 374: if(tmp <=5){
  1524  017B  0259               	subwf	main@tmp,w
  1525  017C  1803               	skipnc
  1526  017D  299D               	goto	l3501
  1527                           
  1528                           ;MAIN.C: 375: id_replate(tmp,keyID,buffTag);
  1529  017E  3060               	movlw	_keyID& (0+255)
  1530  017F  00BF               	movwf	?_id_replate
  1531  0180  3026               	movlw	_buffTag& (0+255)
  1532  0181  00C0               	movwf	?_id_replate+1
  1533  0182  0859               	movf	main@tmp,w
  1534  0183  237D               	fcall	_id_replate
  1535  0184  300A               	movlw	10
  1536                           
  1537                           ;MAIN.C: 376: timeTick=0;
  1538  0185  1283               	bcf	3,5	;RP0=0, select bank0
  1539  0186  1303               	bcf	3,6	;RP1=0, select bank0
  1540  0187  01DC               	clrf	_timeTick
  1541  0188  01DD               	clrf	_timeTick+1
  1542  0189  01F5               	clrf	?_beep
  1543  018A  0AF5               	incf	?_beep,f
  1544  018B  24A8               	fcall	_beep
  1545  018C  299D               	goto	l3501
  1546  018D                     l6809:	
  1547  018D  300A               	movlw	10
  1548                           
  1549                           ;MAIN.C: 383: beep(10,1);
  1550  018E  01F5               	clrf	?_beep
  1551  018F  0AF5               	incf	?_beep,f
  1552  0190  24A8               	fcall	_beep
  1553  0191  299D               	goto	l3501
  1554  0192                     l6813:	
  1555  0192  085F               	movf	_mtState,w
  1556                           
  1557                           ; Switch size 1, requested type "space"
  1558                           ; Number of cases is 7, Range of values is 0 to 7
  1559                           ; switch strategies available:
  1560                           ; Name         Instructions Cycles
  1561                           ; direct_byte           14     6 (fixed)
  1562                           ; simple_byte           22    12 (average)
  1563                           ; jumptable            260     6 (fixed)
  1564                           ; rangetable            12     6 (fixed)
  1565                           ; spacedrange           22     9 (fixed)
  1566                           ; locatedrange           8     3 (fixed)
  1567                           ;	Chosen strategy is direct_byte
  1568  0193  0084               	movwf	4
  1569  0194  3008               	movlw	8
  1570  0195  0204               	subwf	4,w
  1571  0196  1803               	skipnc
  1572  0197  299D               	goto	l3501
  1573  0198  3005               	movlw	high S6915
  1574  0199  008A               	movwf	10
  1575  019A  30EE               	movlw	low S6915
  1576  019B  0704               	addwf	4,w
  1577  019C  0082               	movwf	2
  1578  019D                     l3501:	
  1579  019D  309F               	movlw	159
  1580                           
  1581                           ;MAIN.C: 408: idState = 1;
  1582  019E  1283               	bcf	3,5	;RP0=0, select bank0
  1583  019F  1303               	bcf	3,6	;RP1=0, select bank0
  1584  01A0  01D7               	clrf	main@idState
  1585  01A1  0AD7               	incf	main@idState,f
  1586                           
  1587                           ;MAIN.C: 409: _delay((unsigned long)((61)*(8000000/4000.0)));
  1588  01A2  00D4               	movwf	??_main+1
  1589  01A3  306F               	movlw	111
  1590  01A4  00D3               	movwf	??_main
  1591  01A5                     u2247:	
  1592  01A5  0BD3               	decfsz	??_main,f
  1593  01A6  29A5               	goto	u2247
  1594  01A7  0BD4               	decfsz	??_main+1,f
  1595  01A8  29A5               	goto	u2247
  1596  01A9  29AA               	nop2
  1597                           
  1598                           ;MAIN.C: 410: }
  1599  01AA  29B8               	goto	l6821
  1600  01AB                     l6817:	
  1601  01AB  3002               	movlw	2
  1602                           
  1603                           ;MAIN.C: 411: else{
  1604                           ;MAIN.C: 412: idState =0;
  1605  01AC  01D7               	clrf	main@idState
  1606                           
  1607                           ;MAIN.C: 413: _delay((unsigned long)((150)*(8000000/4000.0)));
  1608  01AD  00D5               	movwf	??_main+2
  1609  01AE  3086               	movlw	134
  1610  01AF  00D4               	movwf	??_main+1
  1611  01B0  3099               	movlw	153
  1612  01B1  00D3               	movwf	??_main
  1613  01B2                     u2257:	
  1614  01B2  0BD3               	decfsz	??_main,f
  1615  01B3  29B2               	goto	u2257
  1616  01B4  0BD4               	decfsz	??_main+1,f
  1617  01B5  29B2               	goto	u2257
  1618  01B6  0BD5               	decfsz	??_main+2,f
  1619  01B7  29B2               	goto	u2257
  1620  01B8                     l6821:	
  1621                           
  1622                           ;MAIN.C: 414: }
  1623                           ;MAIN.C: 418: if((timeOut!=0)&&( timeTick > timeOut)){
  1624  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  1625  01B9  1303               	bcf	3,6	;RP1=0, select bank0
  1626  01BA  085B               	movf	_timeOut+1,w
  1627  01BB  045A               	iorwf	_timeOut,w
  1628  01BC  1903               	skipnz
  1629  01BD  2A0F               	goto	l6861
  1630  01BE  085D               	movf	_timeTick+1,w
  1631  01BF  025B               	subwf	_timeOut+1,w
  1632  01C0  1D03               	skipz
  1633  01C1  29C4               	goto	u2155
  1634  01C2  085C               	movf	_timeTick,w
  1635  01C3  025A               	subwf	_timeOut,w
  1636  01C4                     u2155:	
  1637  01C4  1C03               	btfss	3,0
  1638  01C5  2A01               	goto	l6859
  1639  01C6  2A0F               	goto	l6861
  1640  01C7                     l6827:	
  1641                           
  1642                           ;MAIN.C: 423: setState(2,80);
  1643  01C7  3050               	movlw	80
  1644  01C8  00F2               	movwf	?_setState
  1645  01C9  3002               	movlw	2
  1646  01CA  01F3               	clrf	?_setState+1
  1647  01CB  25C6               	fcall	_setState
  1648                           
  1649                           ;MAIN.C: 424: buzFre=0x6a;
  1650  01CC  306A               	movlw	106
  1651  01CD  00A5               	movwf	_buzFre
  1652                           
  1653                           ;MAIN.C: 425: break;
  1654  01CE  2A0F               	goto	l6861
  1655  01CF                     l6831:	
  1656                           
  1657                           ;MAIN.C: 427: setState(6,35);
  1658  01CF  3023               	movlw	35
  1659  01D0  00F2               	movwf	?_setState
  1660  01D1  3006               	movlw	6
  1661  01D2  01F3               	clrf	?_setState+1
  1662  01D3  25C6               	fcall	_setState
  1663                           
  1664                           ;MAIN.C: 428: break;
  1665  01D4  2A0F               	goto	l6861
  1666  01D5                     l6833:	
  1667  01D5  3002               	movlw	2
  1668                           
  1669                           ;MAIN.C: 430: setState(2,0);
  1670  01D6  01F2               	clrf	?_setState
  1671  01D7  01F3               	clrf	?_setState+1
  1672  01D8  25C6               	fcall	_setState
  1673                           
  1674                           ;MAIN.C: 431: buzFre=0x6a;
  1675  01D9  306A               	movlw	106
  1676  01DA  00A5               	movwf	_buzFre
  1677                           
  1678                           ;MAIN.C: 432: eepromWriteByte(0x00,7);
  1679  01DB  3007               	movlw	7
  1680  01DC  00F2               	movwf	?_eepromWriteByte
  1681  01DD  3000               	movlw	0
  1682  01DE  2406               	fcall	_eepromWriteByte
  1683  01DF  3002               	movlw	2
  1684                           
  1685                           ;MAIN.C: 433: eepromWriteByte(0x02,0);
  1686  01E0  01F2               	clrf	?_eepromWriteByte
  1687  01E1  2406               	fcall	_eepromWriteByte
  1688                           
  1689                           ;MAIN.C: 434: break;
  1690  01E2  2A0F               	goto	l6861
  1691  01E3                     l3530:	
  1692                           ;MAIN.C: 435: case 7:
  1693                           
  1694                           
  1695                           ;MAIN.C: 437: if(RC1==1){
  1696  01E3  1C87               	btfss	7,1
  1697  01E4  2A0F               	goto	l6861
  1698  01E5  3002               	movlw	2
  1699                           
  1700                           ;MAIN.C: 438: PwInNum++;
  1701  01E6  0ADE               	incf	_PwInNum,f
  1702                           
  1703                           ;MAIN.C: 439: tmp = eepromReadByte(0x02);
  1704  01E7  25E5               	fcall	_eepromReadByte
  1705  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  1706  01E9  00D9               	movwf	main@tmp
  1707                           
  1708                           ;MAIN.C: 440: if(tmp>0&&tmp<4){
  1709  01EA  0859               	movf	main@tmp,w
  1710  01EB  1903               	btfsc	3,2
  1711  01EC  29F7               	goto	l6853
  1712  01ED  3004               	movlw	4
  1713  01EE  0259               	subwf	main@tmp,w
  1714  01EF  1803               	skipnc
  1715  01F0  29F7               	goto	l6853
  1716                           
  1717                           ;MAIN.C: 441: tmp--;
  1718  01F1  03D9               	decf	main@tmp,f
  1719                           
  1720                           ;MAIN.C: 442: eepromWriteByte(0x03+tmp,PwInNum);
  1721  01F2  085E               	movf	_PwInNum,w
  1722  01F3  00F2               	movwf	?_eepromWriteByte
  1723  01F4  0859               	movf	main@tmp,w
  1724  01F5  3E03               	addlw	3
  1725  01F6  2406               	fcall	_eepromWriteByte
  1726  01F7                     l6853:	
  1727  01F7  300A               	movlw	10
  1728                           
  1729                           ;MAIN.C: 443: }
  1730                           ;MAIN.C: 445: beep(10,1);
  1731  01F8  01F5               	clrf	?_beep
  1732  01F9  0AF5               	incf	?_beep,f
  1733  01FA  24A8               	fcall	_beep
  1734                           
  1735                           ;MAIN.C: 446: setState(7,10);
  1736  01FB  300A               	movlw	10
  1737  01FC  00F2               	movwf	?_setState
  1738  01FD  3007               	movlw	7
  1739  01FE  01F3               	clrf	?_setState+1
  1740  01FF  25C6               	fcall	_setState
  1741  0200  2A0F               	goto	l6861
  1742  0201                     l6859:	
  1743  0201  085F               	movf	_mtState,w
  1744                           
  1745                           ; Switch size 1, requested type "space"
  1746                           ; Number of cases is 4, Range of values is 1 to 7
  1747                           ; switch strategies available:
  1748                           ; Name         Instructions Cycles
  1749                           ; simple_byte           13     7 (average)
  1750                           ; direct_byte           16     9 (fixed)
  1751                           ; jumptable            263     9 (fixed)
  1752                           ;	Chosen strategy is simple_byte
  1753  0202  3A01               	xorlw	1	; case 1
  1754  0203  1903               	skipnz
  1755  0204  29C7               	goto	l6827
  1756  0205  3A03               	xorlw	3	; case 2
  1757  0206  1903               	skipnz
  1758  0207  29CF               	goto	l6831
  1759  0208  3A04               	xorlw	4	; case 6
  1760  0209  1903               	skipnz
  1761  020A  29D5               	goto	l6833
  1762  020B  3A01               	xorlw	1	; case 7
  1763  020C  1903               	skipnz
  1764  020D  29E3               	goto	l3530
  1765  020E  2A0F               	goto	l6861
  1766  020F                     l6861:	
  1767                           
  1768                           ;MAIN.C: 464: }
  1769                           ;MAIN.C: 467: if(mtState==0) RA3 = 1;
  1770  020F  1283               	bcf	3,5	;RP0=0, select bank0
  1771  0210  1303               	bcf	3,6	;RP1=0, select bank0
  1772  0211  08DF               	movf	_mtState,f
  1773  0212  1D03               	skipz
  1774  0213  2A16               	goto	l3533
  1775  0214  1585               	bsf	5,3
  1776  0215  2A17               	goto	l6865
  1777  0216                     l3533:	
  1778                           
  1779                           ;MAIN.C: 468: else RA3 =0;
  1780  0216  1185               	bcf	5,3
  1781  0217                     l6865:	
  1782                           
  1783                           ;MAIN.C: 475: if(mtState == 2) {
  1784  0217  085F               	movf	_mtState,w
  1785  0218  3A02               	xorlw	2
  1786  0219  1D03               	skipz
  1787  021A  2A2A               	goto	l3535
  1788                           
  1789                           ;MAIN.C: 477: TMR1ON = 1;T0IE = 1;
  1790  021B  1410               	bsf	16,0
  1791  021C  168B               	bsf	11,5
  1792                           
  1793                           ;MAIN.C: 478: if(timeTick%4 ==0){
  1794  021D  085C               	movf	_timeTick,w
  1795  021E  3903               	andlw	3
  1796  021F  1D03               	btfss	3,2
  1797  0220  2A2C               	goto	l6877
  1798                           
  1799                           ;MAIN.C: 480: if(buzFre==0x6a){
  1800  0221  0825               	movf	_buzFre,w
  1801  0222  3A6A               	xorlw	106
  1802  0223  1D03               	skipz
  1803  0224  2A27               	goto	l6875
  1804                           
  1805                           ;MAIN.C: 481: buzFre=12;
  1806  0225  300C               	movlw	12
  1807  0226  2A28               	goto	L3
  1808  0227                     l6875:	
  1809                           ;MAIN.C: 482: }else{
  1810                           
  1811                           
  1812                           ;MAIN.C: 483: buzFre=0x6a;
  1813  0227  306A               	movlw	106
  1814  0228                     L3:	
  1815  0228  00A5               	movwf	_buzFre
  1816  0229  2A2C               	goto	l6877
  1817  022A                     l3535:	
  1818  022A  1010               	bcf	16,0
  1819  022B  128B               	bcf	11,5
  1820  022C                     l6877:	
  1821                           
  1822                           ;MAIN.C: 490: timeTick++;
  1823  022C  0ADC               	incf	_timeTick,f
  1824  022D  1903               	skipnz
  1825  022E  0ADD               	incf	_timeTick+1,f
  1826  022F  28BD               	goto	l6709
  1827  0230                     __end_of_main:	
  1828                           
  1829                           	psect	swtext1
  1830  05EE                     __pswtext1:	
  1831  05EE                     S6915:	
  1832  05EE  2916               	ljmp	l6745
  1833  05EF  28DA               	ljmp	l6723
  1834  05F0  28DA               	ljmp	l6723
  1835  05F1  2953               	ljmp	l6779
  1836  05F2  299D               	ljmp	l3501
  1837  05F3  2972               	ljmp	l6795
  1838  05F4  292A               	ljmp	l6755
  1839  05F5  28DA               	ljmp	l6723
  1840                           
  1841                           	psect	text570
  1842  044A                     __ptext570:	
  1843 ;; =============== function _main ends ============
  1844                           
  1845                           
  1846 ;; *************** function _id_clear *****************
  1847 ;; Defined at:
  1848 ;;		line 157 in file "MAIN.C"
  1849 ;; Parameters:    Size  Location     Type
  1850 ;;  idMin           1    wreg     unsigned char 
  1851 ;;  idMax           1    4[BANK0 ] unsigned char 
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;  idMin           1   10[BANK0 ] unsigned char 
  1854 ;;  tmp             5    5[BANK0 ] unsigned char [5]
  1855 ;; Return value:  Size  Location     Type
  1856 ;;		None               void
  1857 ;; Registers used:
  1858 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1859 ;; Tracked objects:
  1860 ;;		On entry : 60/0
  1861 ;;		On exit  : 60/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMMON   BANK0   BANK1
  1864 ;;      Params:         0       1       0
  1865 ;;      Locals:         0       6       0
  1866 ;;      Temps:          0       0       0
  1867 ;;      Totals:         0       7       0
  1868 ;;Total ram usage:        7 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    4
  1871 ;; This function calls:
  1872 ;;		_id_replate
  1873 ;; This function is called by:
  1874 ;;		_main
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877  044A                     _id_clear:	
  1878                           
  1879                           ; Regs used in _id_clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1880                           ;id_clear@idMin stored from wreg
  1881  044A  00C9               	movwf	id_clear@idMin
  1882                           
  1883                           ;MAIN.C: 158: unsigned char tmp[5]={0xff,0xff,0xff,0xff,0xff};
  1884  044B  3044               	movlw	id_clear@tmp& (0+255)
  1885  044C  0084               	movwf	4
  1886  044D  0820               	movf	id_clear@F971,w
  1887  044E  1383               	bcf	3,7	;select IRP bank0
  1888  044F  0080               	movwf	0
  1889  0450  0A84               	incf	4,f
  1890  0451  0821               	movf	id_clear@F971+1,w
  1891  0452  0080               	movwf	0
  1892  0453  0A84               	incf	4,f
  1893  0454  0822               	movf	id_clear@F971+2,w
  1894  0455  0080               	movwf	0
  1895  0456  0A84               	incf	4,f
  1896  0457  0823               	movf	id_clear@F971+3,w
  1897  0458  0080               	movwf	0
  1898  0459  0A84               	incf	4,f
  1899  045A  0824               	movf	id_clear@F971+4,w
  1900  045B  0080               	movwf	0
  1901  045C                     l6635:	
  1902  045C  0849               	movf	id_clear@idMin,w
  1903  045D  0243               	subwf	id_clear@idMax,w
  1904  045E  1C03               	btfss	3,0
  1905  045F  0008               	return
  1906                           
  1907                           ;MAIN.C: 160: id_replate(idMin,tmp,buffTag);
  1908  0460  3044               	movlw	id_clear@tmp& (0+255)
  1909  0461  00BF               	movwf	?_id_replate
  1910  0462  3026               	movlw	_buffTag& (0+255)
  1911  0463  00C0               	movwf	?_id_replate+1
  1912  0464  0849               	movf	id_clear@idMin,w
  1913  0465  237D               	fcall	_id_replate
  1914  0466  1283               	bcf	3,5	;RP0=0, select bank0
  1915  0467  1303               	bcf	3,6	;RP1=0, select bank0
  1916  0468  0AC9               	incf	id_clear@idMin,f
  1917  0469  2C5C               	goto	l6635
  1918  046A                     __end_of_id_clear:	
  1919                           
  1920                           	psect	text571
  1921  037D                     __ptext571:	
  1922 ;; =============== function _id_clear ends ============
  1923                           
  1924                           
  1925 ;; *************** function _id_replate *****************
  1926 ;; Defined at:
  1927 ;;		line 143 in file "MAIN.C"
  1928 ;; Parameters:    Size  Location     Type
  1929 ;;  id              1    wreg     unsigned char 
  1930 ;;  Cont            1    0[BANK0 ] PTR unsigned char 
  1931 ;;		 -> id_clear@tmp(5), keyID(5), 
  1932 ;;  buff            1    1[BANK0 ] PTR unsigned char 
  1933 ;;		 -> buffTag(25), 
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;  id              1   11[COMMON] unsigned char 
  1936 ;; Return value:  Size  Location     Type
  1937 ;;		None               void
  1938 ;; Registers used:
  1939 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1940 ;; Tracked objects:
  1941 ;;		On entry : 60/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMMON   BANK0   BANK1
  1945 ;;      Params:         0       2       0
  1946 ;;      Locals:         1       0       0
  1947 ;;      Temps:          0       2       0
  1948 ;;      Totals:         1       4       0
  1949 ;;Total ram usage:        5 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; Hardware stack levels required when called:    3
  1952 ;; This function calls:
  1953 ;;		___bmul
  1954 ;;		_eepromWriteBlock
  1955 ;; This function is called by:
  1956 ;;		_id_clear
  1957 ;;		_main
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960  037D                     _id_replate:	
  1961                           
  1962                           ; Regs used in _id_replate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1963                           ;id_replate@id stored from wreg
  1964  037D  00FB               	movwf	id_replate@id
  1965                           
  1966                           ;MAIN.C: 144: id=(id-1)*5;
  1967  037E  3005               	movlw	5
  1968  037F  00F2               	movwf	?___bmul
  1969  0380  087B               	movf	id_replate@id,w
  1970  0381  3EFF               	addlw	255
  1971  0382  259E               	fcall	___bmul
  1972  0383  00FB               	movwf	id_replate@id
  1973                           
  1974                           ;MAIN.C: 145: {
  1975                           ;MAIN.C: 146: {
  1976                           ;MAIN.C: 147: *(buff+id) = *Cont;
  1977  0384  083F               	movf	id_replate@Cont,w
  1978  0385  0084               	movwf	4
  1979  0386  1383               	bcf	3,7	;select IRP bank0
  1980  0387  0800               	movf	0,w
  1981  0388  00C1               	movwf	??_id_replate
  1982  0389  087B               	movf	id_replate@id,w
  1983  038A  0740               	addwf	id_replate@buff,w
  1984  038B  00C2               	movwf	??_id_replate+1
  1985  038C  0084               	movwf	4
  1986  038D  0841               	movf	??_id_replate,w
  1987  038E  0080               	movwf	0
  1988                           
  1989                           ;MAIN.C: 148: *(buff+1+id) = *(Cont+1);
  1990  038F  083F               	movf	id_replate@Cont,w
  1991  0390  3E01               	addlw	1
  1992  0391  23B1               	fcall	PL3	;call to abstracted procedure
  1993  0392  3E01               	addlw	1
  1994  0393  0084               	movwf	4
  1995  0394  0841               	movf	??_id_replate,w
  1996  0395  0080               	movwf	0
  1997                           
  1998                           ;MAIN.C: 149: *(buff+2+id) = *(Cont+2);
  1999  0396  083F               	movf	id_replate@Cont,w
  2000  0397  3E02               	addlw	2
  2001  0398  23B1               	fcall	PL3	;call to abstracted procedure
  2002  0399  3E02               	addlw	2
  2003  039A  0084               	movwf	4
  2004  039B  0841               	movf	??_id_replate,w
  2005  039C  0080               	movwf	0
  2006                           
  2007                           ;MAIN.C: 150: *(buff+3+id) = *(Cont+3);
  2008  039D  083F               	movf	id_replate@Cont,w
  2009  039E  3E03               	addlw	3
  2010  039F  23B1               	fcall	PL3	;call to abstracted procedure
  2011  03A0  3E03               	addlw	3
  2012  03A1  0084               	movwf	4
  2013  03A2  0841               	movf	??_id_replate,w
  2014  03A3  0080               	movwf	0
  2015                           
  2016                           ;MAIN.C: 151: *(buff+4+id) = *(Cont+4);
  2017  03A4  083F               	movf	id_replate@Cont,w
  2018  03A5  3E04               	addlw	4
  2019  03A6  23B1               	fcall	PL3	;call to abstracted procedure
  2020  03A7  3E04               	addlw	4
  2021  03A8  0084               	movwf	4
  2022  03A9  0841               	movf	??_id_replate,w
  2023  03AA  0080               	movwf	0
  2024                           
  2025                           ;MAIN.C: 152: }
  2026                           ;MAIN.C: 153: }
  2027                           ;MAIN.C: 155: eepromWriteBlock(0x06,buffTag,25);
  2028  03AB  3026               	movlw	_buffTag& (0+255)
  2029  03AC  00F6               	movwf	?_eepromWriteBlock
  2030  03AD  3019               	movlw	25
  2031  03AE  00F7               	movwf	?_eepromWriteBlock+1
  2032  03AF  3006               	movlw	6
  2033  03B0  2D2A               	ljmp	_eepromWriteBlock
  2034  03B1                     __end_of_id_replate:	
  2035  03B1                     PL3:	
  2036  03B1  0084               	movwf	4
  2037  03B2  0800               	movf	0,w
  2038  03B3  00C1               	movwf	??_id_replate
  2039  03B4  087B               	movf	id_replate@id,w
  2040  03B5  0740               	addwf	id_replate@buff,w
  2041  03B6  00C2               	movwf	??_id_replate+1
  2042  03B7  0008               	return
  2043                           
  2044                           	psect	text572
  2045  03E0                     __ptext572:	
  2046 ;; =============== function _id_replate ends ============
  2047                           
  2048                           
  2049 ;; *************** function _SendNum *****************
  2050 ;; Defined at:
  2051 ;;		line 42 in file "SWUART.C"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;  num             1    wreg     unsigned char 
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;  num             1    9[COMMON] unsigned char 
  2056 ;;  nib             1   10[COMMON] unsigned char 
  2057 ;; Return value:  Size  Location     Type
  2058 ;;		None               void
  2059 ;; Registers used:
  2060 ;;		wreg, status,2, status,0, pclath, cstack
  2061 ;; Tracked objects:
  2062 ;;		On entry : 60/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMMON   BANK0   BANK1
  2066 ;;      Params:         0       0       0
  2067 ;;      Locals:         6       0       0
  2068 ;;      Temps:          0       0       0
  2069 ;;      Totals:         6       0       0
  2070 ;;Total ram usage:        6 bytes
  2071 ;; Hardware stack levels used:    1
  2072 ;; Hardware stack levels required when called:    2
  2073 ;; This function calls:
  2074 ;;		_swUartSendByte
  2075 ;; This function is called by:
  2076 ;;		_main
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079  03E0                     _SendNum:	
  2080                           
  2081                           ; Regs used in _SendNum: [wreg+status,2+status,0+pclath+cstack]
  2082                           ;SendNum@num stored from wreg
  2083  03E0  00F9               	movwf	SendNum@num
  2084                           
  2085                           ;SWUART.C: 43: unsigned char nib = num>>4;
  2086  03E1  0E79               	swapf	SendNum@num,w
  2087  03E2  390F               	andlw	15
  2088  03E3  00FA               	movwf	SendNum@nib
  2089                           
  2090                           ;SWUART.C: 44: swUartSendByte(nib <10 ? (nib+'0') :(nib+'A'-10));
  2091  03E4  300A               	movlw	10
  2092  03E5  027A               	subwf	SendNum@nib,w
  2093  03E6  087A               	movf	SendNum@nib,w
  2094  03E7  00F5               	movwf	_SendNum$4581
  2095  03E8  1C03               	skipc
  2096  03E9  2BEC               	goto	L6
  2097  03EA  3037               	movlw	55
  2098  03EB  2BED               	goto	L4
  2099  03EC                     L6:	
  2100  03EC  3030               	movlw	48
  2101  03ED                     L4:	
  2102  03ED  01F6               	clrf	_SendNum$4581+1
  2103  03EE  07F5               	addwf	_SendNum$4581,f
  2104  03EF  1803               	skipnc
  2105  03F0  0AF6               	incf	_SendNum$4581+1,f
  2106  03F1  0875               	movf	_SendNum$4581,w
  2107  03F2  23B8               	fcall	_swUartSendByte
  2108                           
  2109                           ;SWUART.C: 45: nib = num&0x0f;
  2110  03F3  0879               	movf	SendNum@num,w
  2111  03F4  00FA               	movwf	SendNum@nib
  2112  03F5  300F               	movlw	15
  2113  03F6  05FA               	andwf	SendNum@nib,f
  2114                           
  2115                           ;SWUART.C: 46: swUartSendByte(nib <10 ? (nib+'0') :(nib+'A'-10));
  2116  03F7  300A               	movlw	10
  2117  03F8  027A               	subwf	SendNum@nib,w
  2118  03F9  087A               	movf	SendNum@nib,w
  2119  03FA  00F7               	movwf	_SendNum$4582
  2120  03FB  1C03               	skipc
  2121  03FC  2BFF               	goto	L7
  2122  03FD  3037               	movlw	55
  2123  03FE  2C00               	goto	L5
  2124  03FF                     L7:	
  2125  03FF  3030               	movlw	48
  2126  0400                     L5:	
  2127  0400  01F8               	clrf	_SendNum$4582+1
  2128  0401  07F7               	addwf	_SendNum$4582,f
  2129  0402  1803               	skipnc
  2130  0403  0AF8               	incf	_SendNum$4582+1,f
  2131  0404  0877               	movf	_SendNum$4582,w
  2132  0405  2BB8               	ljmp	_swUartSendByte
  2133  0406                     __end_of_SendNum:	
  2134                           
  2135                           	psect	text573
  2136  05B9                     __ptext573:	
  2137 ;; =============== function _SendNum ends ============
  2138                           
  2139                           
  2140 ;; *************** function _swUartSendString *****************
  2141 ;; Defined at:
  2142 ;;		line 35 in file "SWUART.C"
  2143 ;; Parameters:    Size  Location     Type
  2144 ;;  str             1    wreg     PTR unsigned char 
  2145 ;;		 -> STR_1(7), 
  2146 ;; Auto vars:     Size  Location     Type
  2147 ;;  str             1    5[COMMON] PTR unsigned char 
  2148 ;;		 -> STR_1(7), 
  2149 ;; Return value:  Size  Location     Type
  2150 ;;		None               void
  2151 ;; Registers used:
  2152 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2153 ;; Tracked objects:
  2154 ;;		On entry : 60/0
  2155 ;;		On exit  : 0/0
  2156 ;;		Unchanged: 0/0
  2157 ;; Data sizes:     COMMON   BANK0   BANK1
  2158 ;;      Params:         0       0       0
  2159 ;;      Locals:         1       0       0
  2160 ;;      Temps:          0       0       0
  2161 ;;      Totals:         1       0       0
  2162 ;;Total ram usage:        1 bytes
  2163 ;; Hardware stack levels used:    1
  2164 ;; Hardware stack levels required when called:    2
  2165 ;; This function calls:
  2166 ;;		_swUartSendByte
  2167 ;; This function is called by:
  2168 ;;		_main
  2169 ;; This function uses a non-reentrant model
  2170 ;;
  2171  05B9                     _swUartSendString:	
  2172                           
  2173                           ; Regs used in _swUartSendString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2174                           ;swUartSendString@str stored from wreg
  2175  05B9  00F5               	movwf	swUartSendString@str
  2176  05BA                     l6591:	
  2177                           ;SWUART.C: 36: while(*str){
  2178                           
  2179  05BA  0875               	movf	swUartSendString@str,w
  2180  05BB  0084               	movwf	4
  2181  05BC  25AC               	fcall	stringdir
  2182  05BD  3800               	iorlw	0
  2183  05BE  1903               	btfsc	3,2
  2184  05BF  0008               	return
  2185                           
  2186                           ;SWUART.C: 37: swUartSendByte((char)*str);
  2187  05C0  0875               	movf	swUartSendString@str,w
  2188  05C1  0084               	movwf	4
  2189  05C2  25AC               	fcall	stringdir
  2190  05C3  23B8               	fcall	_swUartSendByte
  2191                           
  2192                           ;SWUART.C: 38: str++;
  2193  05C4  0AF5               	incf	swUartSendString@str,f
  2194  05C5  2DBA               	goto	l6591
  2195  05C6                     __end_of_swUartSendString:	
  2196                           
  2197                           	psect	text574
  2198  04A8                     __ptext574:	
  2199 ;; =============== function _swUartSendString ends ============
  2200                           
  2201                           
  2202 ;; *************** function _beep *****************
  2203 ;; Defined at:
  2204 ;;		line 56 in file "MAIN.C"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;  delay           1    wreg     unsigned char 
  2207 ;;  rep             1    5[COMMON] unsigned char 
  2208 ;; Auto vars:     Size  Location     Type
  2209 ;;  delay           1    6[COMMON] unsigned char 
  2210 ;; Return value:  Size  Location     Type
  2211 ;;		None               void
  2212 ;; Registers used:
  2213 ;;		wreg, status,2, status,0, pclath, cstack
  2214 ;; Tracked objects:
  2215 ;;		On entry : 0/0
  2216 ;;		On exit  : 0/0
  2217 ;;		Unchanged: 0/0
  2218 ;; Data sizes:     COMMON   BANK0   BANK1
  2219 ;;      Params:         1       0       0
  2220 ;;      Locals:         1       0       0
  2221 ;;      Temps:          0       0       0
  2222 ;;      Totals:         2       0       0
  2223 ;;Total ram usage:        2 bytes
  2224 ;; Hardware stack levels used:    1
  2225 ;; Hardware stack levels required when called:    2
  2226 ;; This function calls:
  2227 ;;		_delay_x10ms
  2228 ;; This function is called by:
  2229 ;;		_main
  2230 ;; This function uses a non-reentrant model
  2231 ;;
  2232  04A8                     _beep:	
  2233                           
  2234                           ; Regs used in _beep: [wreg+status,2+status,0+pclath+cstack]
  2235                           ;beep@delay stored from wreg
  2236  04A8  00F6               	movwf	beep@delay
  2237                           
  2238                           ;MAIN.C: 57: TMR1ON = 1;T0IE = 1;
  2239  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  2240  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  2241  04AB  1410               	bsf	16,0
  2242  04AC  168B               	bsf	11,5
  2243  04AD                     l6583:	
  2244                           ;MAIN.C: 59: while(rep--){
  2245                           
  2246  04AD  03F5               	decf	beep@rep,f
  2247  04AE  0875               	movf	beep@rep,w
  2248  04AF  3AFF               	xorlw	255
  2249  04B0  1903               	btfsc	3,2
  2250  04B1  2CC2               	goto	l3452
  2251  04B2  302A               	movlw	42
  2252                           
  2253                           ;MAIN.C: 60: TMR1ON = 1;T0IE = 1;
  2254  04B3  1283               	bcf	3,5	;RP0=0, select bank0
  2255  04B4  1303               	bcf	3,6	;RP1=0, select bank0
  2256  04B5  1410               	bsf	16,0
  2257  04B6  168B               	bsf	11,5
  2258                           
  2259                           ;MAIN.C: 61: buzFre=42;
  2260  04B7  00A5               	movwf	_buzFre
  2261                           
  2262                           ;MAIN.C: 62: delay_x10ms(delay);
  2263  04B8  0876               	movf	beep@delay,w
  2264  04B9  2570               	fcall	_delay_x10ms
  2265  04BA  3014               	movlw	20
  2266                           
  2267                           ;MAIN.C: 63: T0IE = 0;
  2268  04BB  128B               	bcf	11,5
  2269                           
  2270                           ;MAIN.C: 64: TMR1ON = 0;RC0 =0;
  2271  04BC  1283               	bcf	3,5	;RP0=0, select bank0
  2272  04BD  1303               	bcf	3,6	;RP1=0, select bank0
  2273  04BE  1010               	bcf	16,0
  2274  04BF  1007               	bcf	7,0
  2275                           
  2276                           ;MAIN.C: 65: delay_x10ms(20);
  2277  04C0  2570               	fcall	_delay_x10ms
  2278  04C1  2CAD               	goto	l6583
  2279  04C2                     l3452:	
  2280                           
  2281                           ;MAIN.C: 66: }
  2282                           ;MAIN.C: 68: T0IE = 0;
  2283  04C2  128B               	bcf	11,5
  2284  04C3  0008               	return
  2285  04C4                     __end_of_beep:	
  2286                           
  2287                           	psect	text575
  2288  052A                     __ptext575:	
  2289 ;; =============== function _beep ends ============
  2290                           
  2291                           
  2292 ;; *************** function _eepromWriteBlock *****************
  2293 ;; Defined at:
  2294 ;;		line 43 in file "ms82_eeprom.c"
  2295 ;; Parameters:    Size  Location     Type
  2296 ;;  addStart        1    wreg     unsigned char 
  2297 ;;  buff            1    6[COMMON] PTR unsigned char 
  2298 ;;		 -> buffTag(25), 
  2299 ;;  len             1    7[COMMON] unsigned char 
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;  addStart        1    9[COMMON] unsigned char 
  2302 ;;  i               1   10[COMMON] unsigned char 
  2303 ;; Return value:  Size  Location     Type
  2304 ;;		None               void
  2305 ;; Registers used:
  2306 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2307 ;; Tracked objects:
  2308 ;;		On entry : 160/0
  2309 ;;		On exit  : 0/0
  2310 ;;		Unchanged: 0/0
  2311 ;; Data sizes:     COMMON   BANK0   BANK1
  2312 ;;      Params:         2       0       0
  2313 ;;      Locals:         2       0       0
  2314 ;;      Temps:          1       0       0
  2315 ;;      Totals:         5       0       0
  2316 ;;Total ram usage:        5 bytes
  2317 ;; Hardware stack levels used:    1
  2318 ;; Hardware stack levels required when called:    2
  2319 ;; This function calls:
  2320 ;;		_eepromWriteByte
  2321 ;; This function is called by:
  2322 ;;		_id_replate
  2323 ;; This function uses a non-reentrant model
  2324 ;;
  2325  052A                     _eepromWriteBlock:	
  2326                           
  2327                           ; Regs used in _eepromWriteBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2328                           ;eepromWriteBlock@addStart stored from wreg
  2329  052A  00F9               	movwf	eepromWriteBlock@addStart
  2330                           
  2331                           ;ms82_eeprom.c: 44: unsigned char i;
  2332                           ;ms82_eeprom.c: 45: for(i=0;i<len;i++){
  2333  052B  01FA               	clrf	eepromWriteBlock@i
  2334  052C                     l6567:	
  2335  052C  0877               	movf	eepromWriteBlock@len,w
  2336  052D  027A               	subwf	eepromWriteBlock@i,w
  2337  052E  1803               	btfsc	3,0
  2338  052F  0008               	return
  2339                           
  2340                           ;ms82_eeprom.c: 46: eepromWriteByte(addStart+i,buff[i]);
  2341  0530  087A               	movf	eepromWriteBlock@i,w
  2342  0531  0776               	addwf	eepromWriteBlock@buff,w
  2343  0532  00F8               	movwf	??_eepromWriteBlock
  2344  0533  0084               	movwf	4
  2345  0534  1383               	bcf	3,7	;select IRP bank0
  2346  0535  0800               	movf	0,w
  2347  0536  00F2               	movwf	?_eepromWriteByte
  2348  0537  087A               	movf	eepromWriteBlock@i,w
  2349  0538  0779               	addwf	eepromWriteBlock@addStart,w
  2350  0539  2406               	fcall	_eepromWriteByte
  2351  053A  0AFA               	incf	eepromWriteBlock@i,f
  2352  053B  2D2C               	goto	l6567
  2353  053C                     __end_of_eepromWriteBlock:	
  2354                           
  2355                           	psect	text576
  2356  03B8                     __ptext576:	
  2357 ;; =============== function _eepromWriteBlock ends ============
  2358                           
  2359                           
  2360 ;; *************** function _swUartSendByte *****************
  2361 ;; Defined at:
  2362 ;;		line 13 in file "SWUART.C"
  2363 ;; Parameters:    Size  Location     Type
  2364 ;;  dat             1    wreg     unsigned char 
  2365 ;; Auto vars:     Size  Location     Type
  2366 ;;  dat             1    3[COMMON] unsigned char 
  2367 ;;  i               1    4[COMMON] unsigned char 
  2368 ;; Return value:  Size  Location     Type
  2369 ;;		None               void
  2370 ;; Registers used:
  2371 ;;		wreg, status,2, status,0
  2372 ;; Tracked objects:
  2373 ;;		On entry : 0/0
  2374 ;;		On exit  : 0/0
  2375 ;;		Unchanged: 0/0
  2376 ;; Data sizes:     COMMON   BANK0   BANK1
  2377 ;;      Params:         0       0       0
  2378 ;;      Locals:         2       0       0
  2379 ;;      Temps:          1       0       0
  2380 ;;      Totals:         3       0       0
  2381 ;;Total ram usage:        3 bytes
  2382 ;; Hardware stack levels used:    1
  2383 ;; Hardware stack levels required when called:    1
  2384 ;; This function calls:
  2385 ;;		Nothing
  2386 ;; This function is called by:
  2387 ;;		_swUartSendString
  2388 ;;		_SendNum
  2389 ;; This function uses a non-reentrant model
  2390 ;;
  2391  03B8                     _swUartSendByte:	
  2392                           
  2393                           ; Regs used in _swUartSendByte: [wreg+status,2+status,0]
  2394                           ;swUartSendByte@dat stored from wreg
  2395  03B8  00F3               	movwf	swUartSendByte@dat
  2396  03B9  308A               	movlw	138
  2397                           
  2398                           ;SWUART.C: 14: unsigned char i;
  2399                           ;SWUART.C: 16: RA2 = 0;
  2400  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  2401  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  2402  03BC  1105               	bcf	5,2
  2403                           
  2404                           ;SWUART.C: 18: _delay((unsigned long)(((2000000/9600))*(8000000/4000000.0)));
  2405  03BD  00F2               	movwf	??_swUartSendByte
  2406  03BE                     u2267:	
  2407  03BE  0BF2               	decfsz	??_swUartSendByte,f
  2408  03BF  2BBE               	goto	u2267
  2409  03C0  0064               	clrwdt
  2410                           
  2411                           ;SWUART.C: 19: for(i=0;i<8;i++){
  2412  03C1  01F4               	clrf	swUartSendByte@i
  2413  03C2                     l4199:	
  2414                           
  2415                           ;SWUART.C: 20: RA2 = (dat&1);
  2416  03C2  1C73               	btfss	swUartSendByte@dat,0
  2417  03C3  2BC8               	goto	u1770
  2418  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  2419  03C5  1303               	bcf	3,6	;RP1=0, select bank0
  2420  03C6  1505               	bsf	5,2
  2421  03C7  2BCB               	goto	u1784
  2422  03C8                     u1770:	
  2423  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  2424  03C9  1303               	bcf	3,6	;RP1=0, select bank0
  2425  03CA  1105               	bcf	5,2
  2426  03CB                     u1784:	
  2427  03CB  308A               	movlw	138
  2428                           
  2429                           ;SWUART.C: 21: dat=dat>>1;
  2430  03CC  1003               	clrc
  2431  03CD  0CF3               	rrf	swUartSendByte@dat,f
  2432                           
  2433                           ;SWUART.C: 23: _delay((unsigned long)(((2000000/9600))*(8000000/4000000.0)));
  2434  03CE  00F2               	movwf	??_swUartSendByte
  2435  03CF                     u2277:	
  2436  03CF  0BF2               	decfsz	??_swUartSendByte,f
  2437  03D0  2BCF               	goto	u2277
  2438  03D1  0064               	clrwdt
  2439  03D2  3008               	movlw	8
  2440  03D3  0AF4               	incf	swUartSendByte@i,f
  2441  03D4  0274               	subwf	swUartSendByte@i,w
  2442  03D5  1C03               	skipc
  2443  03D6  2BC2               	goto	l4199
  2444  03D7  308A               	movlw	138
  2445                           
  2446                           ;SWUART.C: 24: }
  2447                           ;SWUART.C: 29: RA2 = 1;
  2448  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  2449  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  2450  03DA  1505               	bsf	5,2
  2451                           
  2452                           ;SWUART.C: 31: _delay((unsigned long)(((2000000/9600))*(8000000/4000000.0)));
  2453  03DB  00F2               	movwf	??_swUartSendByte
  2454  03DC                     u2287:	
  2455  03DC  0BF2               	decfsz	??_swUartSendByte,f
  2456  03DD  2BDC               	goto	u2287
  2457  03DE  0064               	clrwdt
  2458  03DF  0008               	return
  2459  03E0                     __end_of_swUartSendByte:	
  2460                           
  2461                           	psect	text577
  2462  04C4                     __ptext577:	
  2463 ;; =============== function _swUartSendByte ends ============
  2464                           
  2465                           
  2466 ;; *************** function _id_search *****************
  2467 ;; Defined at:
  2468 ;;		line 135 in file "MAIN.C"
  2469 ;; Parameters:    Size  Location     Type
  2470 ;;  id_input        1    wreg     PTR unsigned char 
  2471 ;;		 -> keyID(5), 
  2472 ;;  buff            1   10[COMMON] PTR unsigned char 
  2473 ;;		 -> buffTag(25), 
  2474 ;; Auto vars:     Size  Location     Type
  2475 ;;  id_input        1    0[BANK0 ] PTR unsigned char 
  2476 ;;		 -> keyID(5), 
  2477 ;;  i               1    1[BANK0 ] unsigned char 
  2478 ;; Return value:  Size  Location     Type
  2479 ;;                  1    wreg      unsigned char 
  2480 ;; Registers used:
  2481 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 60/0
  2485 ;;		Unchanged: FFE9F/0
  2486 ;; Data sizes:     COMMON   BANK0   BANK1
  2487 ;;      Params:         1       0       0
  2488 ;;      Locals:         0       2       0
  2489 ;;      Temps:          1       0       0
  2490 ;;      Totals:         2       2       0
  2491 ;;Total ram usage:        4 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; Hardware stack levels required when called:    2
  2494 ;; This function calls:
  2495 ;;		_comArr
  2496 ;;		___lbdiv
  2497 ;; This function is called by:
  2498 ;;		_main
  2499 ;; This function uses a non-reentrant model
  2500 ;;
  2501  04C4                     _id_search:	
  2502                           
  2503                           ; Regs used in _id_search: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2504                           ;id_search@id_input stored from wreg
  2505  04C4  1283               	bcf	3,5	;RP0=0, select bank0
  2506  04C5  1303               	bcf	3,6	;RP1=0, select bank0
  2507  04C6  00BF               	movwf	id_search@id_input
  2508                           
  2509                           ;MAIN.C: 136: unsigned char i;
  2510                           ;MAIN.C: 137: for(i=0;i<21;i+=5){
  2511  04C7  01C0               	clrf	id_search@i
  2512  04C8                     l6529:	
  2513                           
  2514                           ;MAIN.C: 138: if(comArr(id_input,buff+i,5,5))
  2515  04C8  0840               	movf	id_search@i,w
  2516  04C9  077A               	addwf	id_search@buff,w
  2517  04CA  00F2               	movwf	?_comArr
  2518  04CB  3005               	movlw	5
  2519  04CC  00F3               	movwf	?_comArr+1
  2520  04CD  00F4               	movwf	?_comArr+2
  2521  04CE  083F               	movf	id_search@id_input,w
  2522  04CF  2489               	fcall	_comArr
  2523  04D0  3A00               	xorlw	0
  2524                           
  2525                           ;MAIN.C: 139: return i/5 +1;
  2526  04D1  3005               	movlw	5
  2527  04D2  1903               	skipnz
  2528  04D3  2CDA               	goto	L8
  2529  04D4  00F2               	movwf	?___lbdiv
  2530  04D5  0840               	movf	id_search@i,w
  2531  04D6  24E0               	fcall	___lbdiv
  2532  04D7  00FB               	movwf	??_id_search
  2533  04D8  0A7B               	incf	??_id_search,w
  2534  04D9  0008               	return
  2535  04DA                     L8:	
  2536  04DA  07C0               	addwf	id_search@i,f
  2537  04DB  3015               	movlw	21
  2538  04DC  0240               	subwf	id_search@i,w
  2539  04DD  1803               	btfsc	3,0
  2540                           
  2541                           ;MAIN.C: 140: }
  2542                           ;MAIN.C: 141: return 255;
  2543  04DE  34FF               	retlw	255
  2544  04DF  2CC8               	goto	l6529
  2545  04E0                     __end_of_id_search:	
  2546                           
  2547                           	psect	text578
  2548  0570                     __ptext578:	
  2549 ;; =============== function _id_search ends ============
  2550                           
  2551                           
  2552 ;; *************** function _delay_x10ms *****************
  2553 ;; Defined at:
  2554 ;;		line 52 in file "MAIN.C"
  2555 ;; Parameters:    Size  Location     Type
  2556 ;;  t               1    wreg     unsigned char 
  2557 ;; Auto vars:     Size  Location     Type
  2558 ;;  t               1    4[COMMON] unsigned char 
  2559 ;; Return value:  Size  Location     Type
  2560 ;;		None               void
  2561 ;; Registers used:
  2562 ;;		wreg, status,2, status,0
  2563 ;; Tracked objects:
  2564 ;;		On entry : 60/0
  2565 ;;		On exit  : 0/0
  2566 ;;		Unchanged: 0/0
  2567 ;; Data sizes:     COMMON   BANK0   BANK1
  2568 ;;      Params:         0       0       0
  2569 ;;      Locals:         1       0       0
  2570 ;;      Temps:          2       0       0
  2571 ;;      Totals:         3       0       0
  2572 ;;Total ram usage:        3 bytes
  2573 ;; Hardware stack levels used:    1
  2574 ;; Hardware stack levels required when called:    1
  2575 ;; This function calls:
  2576 ;;		Nothing
  2577 ;; This function is called by:
  2578 ;;		_beep
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581  0570                     _delay_x10ms:	
  2582                           
  2583                           ; Regs used in _delay_x10ms: [wreg+status,2+status,0]
  2584                           ;delay_x10ms@t stored from wreg
  2585  0570  00F4               	movwf	delay_x10ms@t
  2586  0571                     l6521:	
  2587                           ;MAIN.C: 53: while(t--)
  2588                           
  2589  0571  03F4               	decf	delay_x10ms@t,f
  2590  0572  0874               	movf	delay_x10ms@t,w
  2591  0573  3AFF               	xorlw	255
  2592  0574  1903               	btfsc	3,2
  2593  0575  0008               	return
  2594                           
  2595                           ;MAIN.C: 54: _delay((unsigned long)((10)*(8000000/4000.0)));
  2596  0576  301A               	movlw	26
  2597  0577  00F3               	movwf	??_delay_x10ms+1
  2598  0578  30F8               	movlw	248
  2599  0579  00F2               	movwf	??_delay_x10ms
  2600  057A                     u2297:	
  2601  057A  0BF2               	decfsz	??_delay_x10ms,f
  2602  057B  2D7A               	goto	u2297
  2603  057C  0BF3               	decfsz	??_delay_x10ms+1,f
  2604  057D  2D7A               	goto	u2297
  2605  057E  0064               	clrwdt
  2606  057F  2D71               	goto	l6521
  2607  0580                     __end_of_delay_x10ms:	
  2608                           
  2609                           	psect	text579
  2610  0230                     __ptext579:	
  2611 ;; =============== function _delay_x10ms ends ============
  2612                           
  2613                           
  2614 ;; *************** function _get_RFID *****************
  2615 ;; Defined at:
  2616 ;;		line 21 in file "rfid125.c"
  2617 ;; Parameters:    Size  Location     Type
  2618 ;;		None
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;  RF_serial_55   11    0[BANK0 ] unsigned char [11]
  2621 ;;  timeOutVal      2   17[BANK0 ] unsigned int 
  2622 ;;  ii              1   19[BANK0 ] unsigned char 
  2623 ;;  flag_RFID_la    1   16[BANK0 ] unsigned char 
  2624 ;;  i               1   15[BANK0 ] unsigned char 
  2625 ;;  j               1   14[BANK0 ] unsigned char 
  2626 ;;  even_row        1   13[BANK0 ] unsigned char 
  2627 ;;  even_col        1   12[BANK0 ] unsigned char 
  2628 ;;  flag_RFID_sy    1   11[BANK0 ] unsigned char 
  2629 ;; Return value:  Size  Location     Type
  2630 ;;                  1    wreg      unsigned char 
  2631 ;; Registers used:
  2632 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2633 ;; Tracked objects:
  2634 ;;		On entry : 60/0
  2635 ;;		On exit  : 60/0
  2636 ;;		Unchanged: FFE9F/0
  2637 ;; Data sizes:     COMMON   BANK0   BANK1
  2638 ;;      Params:         0       0       0
  2639 ;;      Locals:         0      20       0
  2640 ;;      Temps:          1       0       0
  2641 ;;      Totals:         1      20       0
  2642 ;;Total ram usage:       21 bytes
  2643 ;; Hardware stack levels used:    1
  2644 ;; Hardware stack levels required when called:    2
  2645 ;; This function calls:
  2646 ;;		_timerOut
  2647 ;;		___lbdiv
  2648 ;; This function is called by:
  2649 ;;		_main
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652  0230                     _get_RFID:	
  2653  0230  3010               	movlw	16
  2654                           
  2655                           ;rfid125.c: 23: unsigned char RF_serial_55bits[11];
  2656                           ;rfid125.c: 24: unsigned int timeOutVal;
  2657                           ;rfid125.c: 25: unsigned char i,ii,j;
  2658                           ;rfid125.c: 26: unsigned char flag_RFID_syn, flag_RFID_last;
  2659                           ;rfid125.c: 27: unsigned char even_row, even_col;
  2660                           ;rfid125.c: 30: flag_RFID_syn = 0;
  2661                           
  2662                           ; Regs used in _get_RFID: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2663  0231  01CA               	clrf	get_RFID@flag_RFID_syn
  2664                           
  2665                           ;rfid125.c: 33: i=16;
  2666  0232  00CE               	movwf	get_RFID@i
  2667  0233                     l6299:	
  2668                           
  2669                           ;rfid125.c: 35: {
  2670                           ;rfid125.c: 36: timeOutVal=timerOut(1,600);
  2671  0233  3058               	movlw	88
  2672  0234  00F2               	movwf	?_timerOut
  2673  0235  3002               	movlw	2
  2674  0236  00F3               	movwf	?_timerOut+1
  2675  0237  3001               	movlw	1
  2676  0238  2429               	fcall	_timerOut
  2677                           
  2678                           ;rfid125.c: 37: if(timeOutVal==0) return 0;
  2679  0239  2366               	fcall	PL2	;call to abstracted procedure
  2680  023A  1903               	btfsc	3,2
  2681  023B  3400               	retlw	0
  2682                           
  2683                           ;rfid125.c: 39: timeOutVal=timerOut(0,600);
  2684  023C  3058               	movlw	88
  2685  023D  2379               	fcall	PL6	;call to abstracted procedure
  2686  023E  2429               	fcall	_timerOut
  2687                           
  2688                           ;rfid125.c: 40: if(timeOutVal==0) return 0;
  2689  023F  2366               	fcall	PL2	;call to abstracted procedure
  2690  0240  1903               	btfsc	3,2
  2691  0241  3400               	retlw	0
  2692  0242  3001               	movlw	1
  2693                           
  2694                           ;rfid125.c: 42: i--;
  2695  0243  03CE               	decf	get_RFID@i,f
  2696                           
  2697                           ;rfid125.c: 43: }
  2698                           ;rfid125.c: 44: while(timeOutVal<290 && i>0);
  2699  0244  0251               	subwf	get_RFID@timeOutVal+1,w
  2700  0245  3022               	movlw	34
  2701  0246  1903               	skipnz
  2702  0247  0250               	subwf	get_RFID@timeOutVal,w
  2703  0248  1803               	skipnc
  2704  0249  2A4D               	goto	l2051
  2705  024A  08CE               	movf	get_RFID@i,f
  2706  024B  1D03               	skipz
  2707  024C  2A33               	goto	l6299
  2708  024D                     l2051:	
  2709                           
  2710                           ;rfid125.c: 45: flag_RFID_last = 1;
  2711  024D  01CF               	clrf	get_RFID@flag_RFID_last
  2712  024E  0ACF               	incf	get_RFID@flag_RFID_last,f
  2713                           
  2714                           ;rfid125.c: 46: i = 0;
  2715  024F  01CE               	clrf	get_RFID@i
  2716  0250                     l6387:	
  2717                           ;rfid125.c: 47: while(i<64)
  2718                           
  2719  0250  3040               	movlw	64
  2720  0251  024E               	subwf	get_RFID@i,w
  2721  0252  1803               	btfsc	3,0
  2722  0253  2AA9               	goto	l6389
  2723                           
  2724                           ;rfid125.c: 48: {
  2725                           ;rfid125.c: 49: for(ii=0;ii<9;ii++)
  2726  0254  01D2               	clrf	get_RFID@ii
  2727  0255                     l6329:	
  2728                           
  2729                           ;rfid125.c: 50: {
  2730                           ;rfid125.c: 51: timeOutVal=timerOut(flag_RFID_last,600);
  2731  0255  2373               	fcall	PL5	;call to abstracted procedure
  2732  0256  2429               	fcall	_timerOut
  2733                           
  2734                           ;rfid125.c: 52: if(timeOutVal==0) return 0;
  2735  0257  2366               	fcall	PL2	;call to abstracted procedure
  2736  0258  1903               	btfsc	3,2
  2737  0259  3400               	retlw	0
  2738                           
  2739                           ;rfid125.c: 54: if(0==flag_RFID_last && timeOutVal<=290 ||
  2740                           ;rfid125.c: 55: 1==flag_RFID_last && timeOutVal>290)
  2741  025A  08CF               	movf	get_RFID@flag_RFID_last,f
  2742  025B  1D03               	skipz
  2743  025C  2A64               	goto	l6341
  2744  025D  3001               	movlw	1
  2745  025E  0251               	subwf	get_RFID@timeOutVal+1,w
  2746  025F  3023               	movlw	35
  2747  0260  1903               	skipnz
  2748  0261  0250               	subwf	get_RFID@timeOutVal,w
  2749  0262  1C03               	skipc
  2750  0263  2A6D               	goto	l6345
  2751  0264                     l6341:	
  2752  0264  0B4F               	decfsz	get_RFID@flag_RFID_last,w
  2753  0265  2A7B               	goto	l6359
  2754  0266  3001               	movlw	1
  2755  0267  0251               	subwf	get_RFID@timeOutVal+1,w
  2756  0268  3023               	movlw	35
  2757  0269  1903               	skipnz
  2758  026A  0250               	subwf	get_RFID@timeOutVal,w
  2759  026B  1C03               	skipc
  2760  026C  2A7B               	goto	l6359
  2761  026D                     l6345:	
  2762                           
  2763                           ;rfid125.c: 56: {
  2764                           ;rfid125.c: 57: if(!flag_RFID_last)
  2765  026D  08CF               	movf	get_RFID@flag_RFID_last,f
  2766  026E  1D03               	skipz
  2767  026F  2A78               	goto	l6355
  2768                           
  2769                           ;rfid125.c: 58: {
  2770                           ;rfid125.c: 59: timeOutVal=timerOut(1,290);
  2771  0270  3022               	movlw	34
  2772  0271  00F2               	movwf	?_timerOut
  2773  0272  3001               	movlw	1
  2774  0273  00F3               	movwf	?_timerOut+1
  2775  0274  2429               	fcall	_timerOut
  2776                           
  2777                           ;rfid125.c: 60: if(timeOutVal==0) return 0;
  2778  0275  2366               	fcall	PL2	;call to abstracted procedure
  2779  0276  1903               	btfsc	3,2
  2780  0277  3400               	retlw	0
  2781  0278                     l6355:	
  2782                           
  2783                           ;rfid125.c: 61: }
  2784                           ;rfid125.c: 62: flag_RFID_last = 0;
  2785  0278  01CF               	clrf	get_RFID@flag_RFID_last
  2786                           
  2787                           ;rfid125.c: 63: i++;
  2788  0279  0ACE               	incf	get_RFID@i,f
  2789                           
  2790                           ;rfid125.c: 64: }
  2791  027A  2A9E               	goto	l6379
  2792  027B                     l6359:	
  2793                           
  2794                           ;rfid125.c: 65: else
  2795                           ;rfid125.c: 66: if(0==flag_RFID_last && timeOutVal>290 ||
  2796                           ;rfid125.c: 67: 1==flag_RFID_last && timeOutVal<=290)
  2797  027B  08CF               	movf	get_RFID@flag_RFID_last,f
  2798  027C  1D03               	skipz
  2799  027D  2A85               	goto	l6363
  2800  027E  3001               	movlw	1
  2801  027F  0251               	subwf	get_RFID@timeOutVal+1,w
  2802  0280  3023               	movlw	35
  2803  0281  1903               	skipnz
  2804  0282  0250               	subwf	get_RFID@timeOutVal,w
  2805  0283  1803               	skipnc
  2806  0284  2A8E               	goto	l6367
  2807  0285                     l6363:	
  2808  0285  0B4F               	decfsz	get_RFID@flag_RFID_last,w
  2809  0286  2A9E               	goto	l6379
  2810  0287  3001               	movlw	1
  2811  0288  0251               	subwf	get_RFID@timeOutVal+1,w
  2812  0289  3023               	movlw	35
  2813  028A  1903               	skipnz
  2814  028B  0250               	subwf	get_RFID@timeOutVal,w
  2815  028C  1803               	skipnc
  2816  028D  2A9E               	goto	l6379
  2817  028E                     l6367:	
  2818                           
  2819                           ;rfid125.c: 68: {
  2820                           ;rfid125.c: 69: if(flag_RFID_last)
  2821  028E  084F               	movf	get_RFID@flag_RFID_last,w
  2822  028F  1903               	btfsc	3,2
  2823  0290  2A9A               	goto	l2070
  2824                           
  2825                           ;rfid125.c: 70: {
  2826                           ;rfid125.c: 71: timeOutVal=timerOut(0,290);
  2827  0291  3022               	movlw	34
  2828  0292  00F2               	movwf	?_timerOut
  2829  0293  3001               	movlw	1
  2830  0294  00F3               	movwf	?_timerOut+1
  2831  0295  3000               	movlw	0
  2832  0296  2429               	fcall	_timerOut
  2833                           
  2834                           ;rfid125.c: 72: if(timeOutVal==0) return 0;
  2835  0297  2366               	fcall	PL2	;call to abstracted procedure
  2836  0298  1903               	btfsc	3,2
  2837  0299  3400               	retlw	0
  2838  029A                     l2070:	
  2839                           
  2840                           ;rfid125.c: 73: }
  2841                           ;rfid125.c: 74: flag_RFID_last = 1;
  2842  029A  01CF               	clrf	get_RFID@flag_RFID_last
  2843  029B  0ACF               	incf	get_RFID@flag_RFID_last,f
  2844                           
  2845                           ;rfid125.c: 75: i++;
  2846  029C  0ACE               	incf	get_RFID@i,f
  2847                           
  2848                           ;rfid125.c: 77: break;
  2849  029D  2AA3               	goto	l6383
  2850  029E                     l6379:	
  2851  029E  3009               	movlw	9
  2852  029F  0AD2               	incf	get_RFID@ii,f
  2853  02A0  0252               	subwf	get_RFID@ii,w
  2854  02A1  1C03               	skipc
  2855  02A2  2A55               	goto	l6329
  2856  02A3                     l6383:	
  2857                           
  2858                           ;rfid125.c: 78: }
  2859                           ;rfid125.c: 80: }
  2860                           ;rfid125.c: 81: if(9==ii)
  2861  02A3  0852               	movf	get_RFID@ii,w
  2862  02A4  3A09               	xorlw	9
  2863  02A5  1D03               	skipz
  2864  02A6  2A50               	goto	l6387
  2865                           
  2866                           ;rfid125.c: 82: {
  2867                           ;rfid125.c: 83: flag_RFID_syn = 1;
  2868  02A7  01CA               	clrf	get_RFID@flag_RFID_syn
  2869  02A8  0ACA               	incf	get_RFID@flag_RFID_syn,f
  2870  02A9                     l6389:	
  2871                           ;rfid125.c: 84: break;
  2872                           
  2873                           
  2874                           ;rfid125.c: 85: }
  2875                           ;rfid125.c: 86: }
  2876                           ;rfid125.c: 88: if(!flag_RFID_syn)
  2877  02A9  08CA               	movf	get_RFID@flag_RFID_syn,f
  2878  02AA  1903               	btfsc	3,2
  2879  02AB  3400               	retlw	0
  2880                           
  2881                           ;rfid125.c: 91: }
  2882                           ;rfid125.c: 92: for(ii=0;ii<55;ii++)
  2883  02AC  01D2               	clrf	get_RFID@ii
  2884  02AD                     l6401:	
  2885                           
  2886                           ;rfid125.c: 93: {
  2887                           ;rfid125.c: 94: i = ii/5;
  2888  02AD  3005               	movlw	5
  2889  02AE  00F2               	movwf	?___lbdiv
  2890  02AF  0852               	movf	get_RFID@ii,w
  2891  02B0  24E0               	fcall	___lbdiv
  2892  02B1  00CE               	movwf	get_RFID@i
  2893                           
  2894                           ;rfid125.c: 95: timeOutVal=timerOut(flag_RFID_last,600);
  2895  02B2  2373               	fcall	PL5	;call to abstracted procedure
  2896  02B3  2429               	fcall	_timerOut
  2897                           
  2898                           ;rfid125.c: 96: if(timeOutVal==0) return 0;
  2899  02B4  2366               	fcall	PL2	;call to abstracted procedure
  2900  02B5  1903               	btfsc	3,2
  2901  02B6  3400               	retlw	0
  2902                           
  2903                           ;rfid125.c: 98: if(0==flag_RFID_last && timeOutVal<=290 ||
  2904                           ;rfid125.c: 99: 1==flag_RFID_last && timeOutVal>290)
  2905  02B7  08CF               	movf	get_RFID@flag_RFID_last,f
  2906  02B8  1D03               	skipz
  2907  02B9  2AC1               	goto	l6415
  2908  02BA  3001               	movlw	1
  2909  02BB  0251               	subwf	get_RFID@timeOutVal+1,w
  2910  02BC  3023               	movlw	35
  2911  02BD  1903               	skipnz
  2912  02BE  0250               	subwf	get_RFID@timeOutVal,w
  2913  02BF  1C03               	skipc
  2914  02C0  2ACA               	goto	l6419
  2915  02C1                     l6415:	
  2916  02C1  0B4F               	decfsz	get_RFID@flag_RFID_last,w
  2917  02C2  2ADC               	goto	l6435
  2918  02C3  3001               	movlw	1
  2919  02C4  0251               	subwf	get_RFID@timeOutVal+1,w
  2920  02C5  3023               	movlw	35
  2921  02C6  1903               	skipnz
  2922  02C7  0250               	subwf	get_RFID@timeOutVal,w
  2923  02C8  1C03               	skipc
  2924  02C9  2ADC               	goto	l6435
  2925  02CA                     l6419:	
  2926                           
  2927                           ;rfid125.c: 100: {
  2928                           ;rfid125.c: 101: if(!flag_RFID_last)
  2929  02CA  08CF               	movf	get_RFID@flag_RFID_last,f
  2930  02CB  1D03               	skipz
  2931  02CC  2AD5               	goto	l6429
  2932                           
  2933                           ;rfid125.c: 102: {
  2934                           ;rfid125.c: 103: timeOutVal=timerOut(1,290);
  2935  02CD  3022               	movlw	34
  2936  02CE  00F2               	movwf	?_timerOut
  2937  02CF  3001               	movlw	1
  2938  02D0  00F3               	movwf	?_timerOut+1
  2939  02D1  2429               	fcall	_timerOut
  2940                           
  2941                           ;rfid125.c: 104: if(timeOutVal==0) return 0;
  2942  02D2  2366               	fcall	PL2	;call to abstracted procedure
  2943  02D3  1903               	btfsc	3,2
  2944  02D4  3400               	retlw	0
  2945  02D5                     l6429:	
  2946                           
  2947                           ;rfid125.c: 105: }
  2948                           ;rfid125.c: 106: flag_RFID_last = 0;
  2949  02D5  01CF               	clrf	get_RFID@flag_RFID_last
  2950                           
  2951                           ;rfid125.c: 107: RF_serial_55bits[i] <<= 1;
  2952  02D6  236C               	fcall	PL4	;call to abstracted procedure
  2953                           
  2954                           ;rfid125.c: 108: RF_serial_55bits[i] |= 0x01;
  2955  02D7  084E               	movf	get_RFID@i,w
  2956  02D8  3E3F               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2957  02D9  0084               	movwf	4
  2958  02DA  1400               	bsf	0,0
  2959                           
  2960                           ;rfid125.c: 109: }
  2961  02DB  2AFB               	goto	l6455
  2962  02DC                     l6435:	
  2963                           
  2964                           ;rfid125.c: 110: else
  2965                           ;rfid125.c: 111: if(0==flag_RFID_last && timeOutVal>290 ||
  2966                           ;rfid125.c: 112: 1==flag_RFID_last && timeOutVal<=290)
  2967  02DC  08CF               	movf	get_RFID@flag_RFID_last,f
  2968  02DD  1D03               	skipz
  2969  02DE  2AE6               	goto	l6439
  2970  02DF  3001               	movlw	1
  2971  02E0  0251               	subwf	get_RFID@timeOutVal+1,w
  2972  02E1  3023               	movlw	35
  2973  02E2  1903               	skipnz
  2974  02E3  0250               	subwf	get_RFID@timeOutVal,w
  2975  02E4  1803               	skipnc
  2976  02E5  2AEF               	goto	l6443
  2977  02E6                     l6439:	
  2978  02E6  0B4F               	decfsz	get_RFID@flag_RFID_last,w
  2979  02E7  2AFB               	goto	l6455
  2980  02E8  3001               	movlw	1
  2981  02E9  0251               	subwf	get_RFID@timeOutVal+1,w
  2982  02EA  3023               	movlw	35
  2983  02EB  1903               	skipnz
  2984  02EC  0250               	subwf	get_RFID@timeOutVal,w
  2985  02ED  1803               	skipnc
  2986  02EE  2AFB               	goto	l6455
  2987  02EF                     l6443:	
  2988                           
  2989                           ;rfid125.c: 113: {
  2990                           ;rfid125.c: 114: if(flag_RFID_last)
  2991  02EF  084F               	movf	get_RFID@flag_RFID_last,w
  2992  02F0  1903               	btfsc	3,2
  2993  02F1  2AF8               	goto	l2091
  2994                           
  2995                           ;rfid125.c: 115: {
  2996                           ;rfid125.c: 116: timeOutVal=timerOut(0,600);
  2997  02F2  3058               	movlw	88
  2998  02F3  2379               	fcall	PL6	;call to abstracted procedure
  2999  02F4  2429               	fcall	_timerOut
  3000                           
  3001                           ;rfid125.c: 117: if(timeOutVal==0) return 0;
  3002  02F5  2366               	fcall	PL2	;call to abstracted procedure
  3003  02F6  1903               	btfsc	3,2
  3004  02F7  3400               	retlw	0
  3005  02F8                     l2091:	
  3006                           
  3007                           ;rfid125.c: 118: }
  3008                           ;rfid125.c: 119: flag_RFID_last = 1;
  3009  02F8  01CF               	clrf	get_RFID@flag_RFID_last
  3010  02F9  0ACF               	incf	get_RFID@flag_RFID_last,f
  3011                           
  3012                           ;rfid125.c: 120: RF_serial_55bits[i] <<= 1;
  3013  02FA  236C               	fcall	PL4	;call to abstracted procedure
  3014  02FB                     l6455:	
  3015  02FB  3037               	movlw	55
  3016  02FC  0AD2               	incf	get_RFID@ii,f
  3017  02FD  0252               	subwf	get_RFID@ii,w
  3018  02FE  1C03               	skipc
  3019  02FF  2AAD               	goto	l6401
  3020                           
  3021                           ;rfid125.c: 121: }
  3022                           ;rfid125.c: 122: }
  3023                           ;rfid125.c: 123: if(55==ii)
  3024  0300  0852               	movf	get_RFID@ii,w
  3025  0301  3A37               	xorlw	55
  3026  0302  1D03               	skipz
  3027  0303  3400               	retlw	0
  3028                           
  3029                           ;rfid125.c: 124: {
  3030                           ;rfid125.c: 125: even_col = 0;
  3031  0304  01CB               	clrf	get_RFID@even_col
  3032                           
  3033                           ;rfid125.c: 126: for(ii=0;ii<10;ii++)
  3034  0305  01D2               	clrf	get_RFID@ii
  3035  0306                     l6467:	
  3036                           
  3037                           ;rfid125.c: 127: {
  3038                           ;rfid125.c: 128: even_row = (RF_serial_55bits[ii] & 0x01);
  3039  0306  0852               	movf	get_RFID@ii,w
  3040  0307  3E3F               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3041  0308  0084               	movwf	4
  3042  0309  1383               	bcf	3,7	;select IRP bank0
  3043  030A  0800               	movf	0,w
  3044  030B  00CC               	movwf	get_RFID@even_row
  3045  030C  3001               	movlw	1
  3046  030D  05CC               	andwf	get_RFID@even_row,f
  3047                           
  3048                           ;rfid125.c: 129: for(j=1;j<5;j++)
  3049  030E  01CD               	clrf	get_RFID@j
  3050  030F  0ACD               	incf	get_RFID@j,f
  3051  0310                     l6477:	
  3052                           
  3053                           ;rfid125.c: 130: {
  3054                           ;rfid125.c: 131: even_row = even_row ^ ((RF_serial_55bits[ii]>>j) & 0x01);
  3055  0310  0852               	movf	get_RFID@ii,w
  3056  0311  3E3F               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3057  0312  0084               	movwf	4
  3058  0313  0800               	movf	0,w
  3059  0314  00F7               	movwf	??_get_RFID
  3060  0315  0A4D               	incf	get_RFID@j,w
  3061  0316  2B19               	goto	u1674
  3062  0317                     u1675:	
  3063  0317  1003               	clrc
  3064  0318  0CF7               	rrf	??_get_RFID,f
  3065  0319                     u1674:	
  3066  0319  3EFF               	addlw	-1
  3067  031A  1D03               	skipz
  3068  031B  2B17               	goto	u1675
  3069  031C  0877               	movf	??_get_RFID,w
  3070  031D  3901               	andlw	1
  3071  031E  06CC               	xorwf	get_RFID@even_row,f
  3072  031F  3005               	movlw	5
  3073  0320  0ACD               	incf	get_RFID@j,f
  3074  0321  024D               	subwf	get_RFID@j,w
  3075  0322  1C03               	skipc
  3076  0323  2B10               	goto	l6477
  3077                           
  3078                           ;rfid125.c: 132: }
  3079                           ;rfid125.c: 133: if(even_row & 0x01)
  3080  0324  184C               	btfsc	get_RFID@even_row,0
  3081  0325  3400               	retlw	0
  3082                           
  3083                           ;rfid125.c: 136: }
  3084                           ;rfid125.c: 138: RF_serial_55bits[ii] <<= 3;
  3085  0326  0852               	movf	get_RFID@ii,w
  3086  0327  3E3F               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3087  0328  0084               	movwf	4
  3088  0329  0D80               	rlf	0,f
  3089  032A  0D80               	rlf	0,f
  3090  032B  0D00               	rlf	0,w
  3091  032C  39F8               	andlw	248
  3092  032D  0080               	movwf	0
  3093                           
  3094                           ;rfid125.c: 140: i = RF_serial_55bits[ii];
  3095  032E  0852               	movf	get_RFID@ii,w
  3096  032F  3E3F               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3097  0330  0084               	movwf	4
  3098  0331  0800               	movf	0,w
  3099  0332  00CE               	movwf	get_RFID@i
  3100                           
  3101                           ;rfid125.c: 141: if( 0==ii%2 )
  3102  0333  1852               	btfsc	get_RFID@ii,0
  3103  0334  2B42               	goto	l6493
  3104                           
  3105                           ;rfid125.c: 142: {
  3106                           ;rfid125.c: 143: keyID[ii/2] = (i & 0xF0);
  3107  0335  1003               	clrc
  3108  0336  0C52               	rrf	get_RFID@ii,w
  3109  0337  3E60               	addlw	_keyID& (0+255)
  3110  0338  0084               	movwf	4
  3111  0339  084E               	movf	get_RFID@i,w
  3112  033A  0080               	movwf	0
  3113  033B  1003               	clrc
  3114  033C  0C52               	rrf	get_RFID@ii,w
  3115  033D  3E60               	addlw	_keyID& (0+255)
  3116  033E  0084               	movwf	4
  3117  033F  30F0               	movlw	240
  3118  0340  0580               	andwf	0,f
  3119                           
  3120                           ;rfid125.c: 144: }
  3121  0341  2B4C               	goto	l6497
  3122  0342                     l6493:	
  3123  0342  300F               	movlw	15
  3124                           
  3125                           ;rfid125.c: 145: else
  3126                           ;rfid125.c: 146: {
  3127                           ;rfid125.c: 147: i >>=4;
  3128  0343  0ECE               	swapf	get_RFID@i,f
  3129  0344  05CE               	andwf	get_RFID@i,f
  3130                           
  3131                           ;rfid125.c: 148: keyID[ii/2] |= (i & 0x0F);
  3132  0345  1003               	clrc
  3133  0346  0C52               	rrf	get_RFID@ii,w
  3134  0347  3E60               	addlw	_keyID& (0+255)
  3135  0348  0084               	movwf	4
  3136  0349  084E               	movf	get_RFID@i,w
  3137  034A  390F               	andlw	15
  3138  034B  0480               	iorwf	0,f
  3139  034C                     l6497:	
  3140                           
  3141                           ;rfid125.c: 149: }
  3142                           ;rfid125.c: 150: even_col ^= RF_serial_55bits[ii];
  3143  034C  0852               	movf	get_RFID@ii,w
  3144  034D  3E3F               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3145  034E  0084               	movwf	4
  3146  034F  0800               	movf	0,w
  3147  0350  06CB               	xorwf	get_RFID@even_col,f
  3148  0351  300A               	movlw	10
  3149  0352  0AD2               	incf	get_RFID@ii,f
  3150  0353  0252               	subwf	get_RFID@ii,w
  3151  0354  1C03               	skipc
  3152  0355  2B06               	goto	l6467
  3153                           
  3154                           ;rfid125.c: 151: }
  3155                           ;rfid125.c: 152: RF_serial_55bits[10] <<= 3;
  3156  0356  0DC9               	rlf	get_RFID@RF_serial_55bits+10,f
  3157  0357  0DC9               	rlf	get_RFID@RF_serial_55bits+10,f
  3158  0358  0D49               	rlf	get_RFID@RF_serial_55bits+10,w
  3159  0359  39F8               	andlw	248
  3160  035A  00C9               	movwf	get_RFID@RF_serial_55bits+10
  3161  035B  30F0               	movlw	240
  3162                           
  3163                           ;rfid125.c: 153: keyID[0] =0x00;
  3164  035C  01E0               	clrf	_keyID
  3165                           
  3166                           ;rfid125.c: 154: if(((RF_serial_55bits[10] & 0xf0)==(even_col & 0xf0)) && (0==(RF_serial
      +                          _55bits[10]&0x08)))
  3167  035D  054B               	andwf	get_RFID@even_col,w
  3168  035E  00F7               	movwf	??_get_RFID
  3169  035F  0849               	movf	get_RFID@RF_serial_55bits+10,w
  3170  0360  39F0               	andlw	240
  3171  0361  0677               	xorwf	??_get_RFID,w
  3172  0362  1903               	btfsc	3,2
  3173  0363  19C9               	btfsc	get_RFID@RF_serial_55bits+10,3
  3174  0364  3400               	retlw	0
  3175                           
  3176                           ;rfid125.c: 155: {
  3177                           ;rfid125.c: 157: return 1;
  3178  0365  3401               	retlw	1
  3179  0366                     __end_of_get_RFID:	
  3180  0366                     PL2:	
  3181  0366  0873               	movf	?_timerOut+1,w
  3182  0367  00D1               	movwf	get_RFID@timeOutVal+1
  3183  0368  0872               	movf	?_timerOut,w
  3184  0369  00D0               	movwf	get_RFID@timeOutVal
  3185  036A  0451               	iorwf	get_RFID@timeOutVal+1,w
  3186  036B  0008               	return
  3187  036C                     PL4:	
  3188  036C  084E               	movf	get_RFID@i,w
  3189  036D  3E3F               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3190  036E  0084               	movwf	4
  3191  036F  1383               	bcf	3,7	;select IRP bank0
  3192  0370  1003               	clrc
  3193  0371  0D80               	rlf	0,f
  3194  0372  0008               	return
  3195  0373                     PL5:	
  3196  0373  3058               	movlw	88
  3197  0374  00F2               	movwf	?_timerOut
  3198  0375  3002               	movlw	2
  3199  0376  00F3               	movwf	?_timerOut+1
  3200  0377  084F               	movf	get_RFID@flag_RFID_last,w
  3201  0378  0008               	return
  3202  0379                     PL6:	
  3203  0379  00F2               	movwf	?_timerOut
  3204  037A  3002               	movlw	2
  3205  037B  00F3               	movwf	?_timerOut+1
  3206  037C  3400               	retlw	0
  3207                           
  3208                           	psect	text580
  3209  0406                     __ptext580:	
  3210 ;; =============== function _get_RFID ends ============
  3211                           
  3212                           
  3213 ;; *************** function _eepromWriteByte *****************
  3214 ;; Defined at:
  3215 ;;		line 26 in file "ms82_eeprom.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;  EEAddr          1    wreg     unsigned char 
  3218 ;;  EEData          1    2[COMMON] unsigned char 
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;  EEAddr          1    5[COMMON] unsigned char 
  3221 ;; Return value:  Size  Location     Type
  3222 ;;		None               void
  3223 ;; Registers used:
  3224 ;;		wreg
  3225 ;; Tracked objects:
  3226 ;;		On entry : 0/20
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMMON   BANK0   BANK1
  3230 ;;      Params:         1       0       0
  3231 ;;      Locals:         1       0       0
  3232 ;;      Temps:          2       0       0
  3233 ;;      Totals:         4       0       0
  3234 ;;Total ram usage:        4 bytes
  3235 ;; Hardware stack levels used:    1
  3236 ;; Hardware stack levels required when called:    1
  3237 ;; This function calls:
  3238 ;;		Nothing
  3239 ;; This function is called by:
  3240 ;;		_eepromWriteBlock
  3241 ;;		_main
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244  0406                     _eepromWriteByte:	
  3245                           
  3246                           ; Regs used in _eepromWriteByte: [wreg]
  3247                           ;eepromWriteByte@EEAddr stored from wreg
  3248  0406  00F5               	movwf	eepromWriteByte@EEAddr
  3249                           
  3250                           ;ms82_eeprom.c: 27: GIE = 0;
  3251  0407  138B               	bcf	11,7
  3252  0408                     l1325:	
  3253                           ;ms82_eeprom.c: 29: {
  3254                           ;ms82_eeprom.c: 30: while(GIE) asm("clrwdt");
  3255                           
  3256  0408  1F8B               	btfss	11,7
  3257  0409  2C0C               	goto	l6285
  3258  040A  0064               	clrwdt	;#
  3259  040B  2C08               	goto	l1325
  3260  040C                     l6285:	
  3261                           
  3262                           ;ms82_eeprom.c: 31: EEADR = EEAddr;
  3263  040C  0875               	movf	eepromWriteByte@EEAddr,w
  3264  040D  1683               	bsf	3,5	;RP0=1, select bank1
  3265  040E  1303               	bcf	3,6	;RP1=0, select bank1
  3266  040F  009B               	movwf	27	;volatile
  3267                           
  3268                           ;ms82_eeprom.c: 32: EEDAT = EEData;
  3269  0410  0872               	movf	eepromWriteByte@EEData,w
  3270  0411  009A               	movwf	26	;volatile
  3271  0412  3034               	movlw	52
  3272                           
  3273                           ;ms82_eeprom.c: 33: EEIF = 0;
  3274  0413  1283               	bcf	3,5	;RP0=0, select bank0
  3275  0414  138C               	bcf	12,7
  3276                           
  3277                           ;ms82_eeprom.c: 34: EECON1 = 0x34;
  3278  0415  1683               	bsf	3,5	;RP0=1, select bank1
  3279  0416  009C               	movwf	28	;volatile
  3280                           
  3281                           ;ms82_eeprom.c: 35: WR = 1;
  3282  0417  141D               	bsf	29,0
  3283  0418                     l1328:	
  3284                           ;ms82_eeprom.c: 36: while(WR) asm("clrwdt");
  3285                           
  3286  0418  1683               	bsf	3,5	;RP0=1, select bank1
  3287  0419  1303               	bcf	3,6	;RP1=0, select bank1
  3288  041A  1C1D               	btfss	29,0
  3289  041B  2C1E               	goto	l6291
  3290  041C  0064               	clrwdt	;#
  3291  041D  2C18               	goto	l1328
  3292  041E                     l6291:	
  3293                           
  3294                           ;ms82_eeprom.c: 37: _delay((unsigned long)((2)*(8000000/4000.0)));
  3295  041E  3006               	movlw	6
  3296  041F  00F4               	movwf	??_eepromWriteByte+1
  3297  0420  3030               	movlw	48
  3298  0421  00F3               	movwf	??_eepromWriteByte
  3299  0422                     u2307:	
  3300  0422  0BF3               	decfsz	??_eepromWriteByte,f
  3301  0423  2C22               	goto	u2307
  3302  0424  0BF4               	decfsz	??_eepromWriteByte+1,f
  3303  0425  2C22               	goto	u2307
  3304  0426  0064               	clrwdt
  3305                           
  3306                           ;ms82_eeprom.c: 38: }
  3307                           ;ms82_eeprom.c: 39: GIE = 1;
  3308  0427  178B               	bsf	11,7
  3309  0428  0008               	return
  3310  0429                     __end_of_eepromWriteByte:	
  3311                           
  3312                           	psect	text581
  3313  054E                     __ptext581:	
  3314 ;; =============== function _eepromWriteByte ends ============
  3315                           
  3316                           
  3317 ;; *************** function _eepromReadBlock *****************
  3318 ;; Defined at:
  3319 ;;		line 18 in file "ms82_eeprom.c"
  3320 ;; Parameters:    Size  Location     Type
  3321 ;;  addStart        1    wreg     unsigned char 
  3322 ;;  buff            1    4[COMMON] PTR unsigned char 
  3323 ;;		 -> buffTag(25), 
  3324 ;;  len             1    5[COMMON] unsigned char 
  3325 ;; Auto vars:     Size  Location     Type
  3326 ;;  addStart        1    7[COMMON] unsigned char 
  3327 ;;  i               1    8[COMMON] unsigned char 
  3328 ;; Return value:  Size  Location     Type
  3329 ;;		None               void
  3330 ;; Registers used:
  3331 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/20
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: FFE9F/0
  3336 ;; Data sizes:     COMMON   BANK0   BANK1
  3337 ;;      Params:         2       0       0
  3338 ;;      Locals:         2       0       0
  3339 ;;      Temps:          1       0       0
  3340 ;;      Totals:         5       0       0
  3341 ;;Total ram usage:        5 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; Hardware stack levels required when called:    2
  3344 ;; This function calls:
  3345 ;;		_eepromReadByte
  3346 ;; This function is called by:
  3347 ;;		_main
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350  054E                     _eepromReadBlock:	
  3351                           
  3352                           ; Regs used in _eepromReadBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3353                           ;eepromReadBlock@addStart stored from wreg
  3354  054E  00F7               	movwf	eepromReadBlock@addStart
  3355                           
  3356                           ;ms82_eeprom.c: 19: unsigned char i;
  3357                           ;ms82_eeprom.c: 20: for(i=0;i<len;i++){
  3358  054F  01F8               	clrf	eepromReadBlock@i
  3359  0550                     l6281:	
  3360  0550  0875               	movf	eepromReadBlock@len,w
  3361  0551  0278               	subwf	eepromReadBlock@i,w
  3362  0552  1803               	btfsc	3,0
  3363  0553  0008               	return
  3364                           
  3365                           ;ms82_eeprom.c: 21: buff[i] = eepromReadByte(addStart+i);
  3366  0554  0878               	movf	eepromReadBlock@i,w
  3367  0555  0774               	addwf	eepromReadBlock@buff,w
  3368  0556  00F6               	movwf	??_eepromReadBlock
  3369  0557  0084               	movwf	4
  3370  0558  0878               	movf	eepromReadBlock@i,w
  3371  0559  0777               	addwf	eepromReadBlock@addStart,w
  3372  055A  25E5               	fcall	_eepromReadByte
  3373  055B  1383               	bcf	3,7	;select IRP bank0
  3374  055C  0080               	movwf	0
  3375  055D  0AF8               	incf	eepromReadBlock@i,f
  3376  055E  2D50               	goto	l6281
  3377  055F                     __end_of_eepromReadBlock:	
  3378                           
  3379                           	psect	text582
  3380  05D1                     __ptext582:	
  3381 ;; =============== function _eepromReadBlock ends ============
  3382                           
  3383                           
  3384 ;; *************** function _sys_init *****************
  3385 ;; Defined at:
  3386 ;;		line 3 in file "sysinit.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;		None
  3389 ;; Auto vars:     Size  Location     Type
  3390 ;;		None
  3391 ;; Return value:  Size  Location     Type
  3392 ;;		None               void
  3393 ;; Registers used:
  3394 ;;		wreg
  3395 ;; Tracked objects:
  3396 ;;		On entry : 0/0
  3397 ;;		On exit  : 60/20
  3398 ;;		Unchanged: 0/0
  3399 ;; Data sizes:     COMMON   BANK0   BANK1
  3400 ;;      Params:         0       0       0
  3401 ;;      Locals:         0       0       0
  3402 ;;      Temps:          0       0       0
  3403 ;;      Totals:         0       0       0
  3404 ;;Total ram usage:        0 bytes
  3405 ;; Hardware stack levels used:    1
  3406 ;; Hardware stack levels required when called:    1
  3407 ;; This function calls:
  3408 ;;		Nothing
  3409 ;; This function is called by:
  3410 ;;		_main
  3411 ;; This function uses a non-reentrant model
  3412 ;;
  3413  05D1                     _sys_init:	
  3414                           
  3415                           ;sysinit.c: 21: OSCCON = 0B01100001;
  3416                           
  3417                           ; Regs used in _sys_init: [wreg]
  3418  05D1  3061               	movlw	97
  3419  05D2  1683               	bsf	3,5	;RP0=1, select bank1
  3420  05D3  1303               	bcf	3,6	;RP1=0, select bank1
  3421  05D4  008F               	movwf	15	;volatile
  3422                           
  3423                           ;sysinit.c: 22: _nop();
  3424  05D5  0000               	nop
  3425  05D6                     l651:	
  3426                           ;sysinit.c: 28: while(HTS==0);
  3427                           
  3428  05D6  1683               	bsf	3,5	;RP0=1, select bank1
  3429  05D7  1303               	bcf	3,6	;RP1=0, select bank1
  3430  05D8  190F               	btfsc	15,2
  3431  05D9  0008               	return
  3432  05DA  2DD6               	goto	l651
  3433  05DB                     __end_of_sys_init:	
  3434                           
  3435                           	psect	text583
  3436  04E0                     __ptext583:	
  3437 ;; =============== function _sys_init ends ============
  3438                           
  3439                           
  3440 ;; *************** function ___lbdiv *****************
  3441 ;; Defined at:
  3442 ;;		line 5 in file "D:\OneDrive\SmarRF\MCU\MC82\IDE\ORIGINIDE_V2.0.9\Program Files (x86)\HI-TECH Software\PICC\9.83\sour
      +ces\lbdiv.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;  dividend        1    wreg     unsigned char 
  3445 ;;  divisor         1    2[COMMON] unsigned char 
  3446 ;; Auto vars:     Size  Location     Type
  3447 ;;  dividend        1    3[COMMON] unsigned char 
  3448 ;;  quotient        1    5[COMMON] unsigned char 
  3449 ;;  counter         1    4[COMMON] unsigned char 
  3450 ;; Return value:  Size  Location     Type
  3451 ;;                  1    wreg      unsigned char 
  3452 ;; Registers used:
  3453 ;;		wreg, status,2, status,0
  3454 ;; Tracked objects:
  3455 ;;		On entry : 60/0
  3456 ;;		On exit  : 60/0
  3457 ;;		Unchanged: FFF9F/0
  3458 ;; Data sizes:     COMMON   BANK0   BANK1
  3459 ;;      Params:         1       0       0
  3460 ;;      Locals:         3       0       0
  3461 ;;      Temps:          0       0       0
  3462 ;;      Totals:         4       0       0
  3463 ;;Total ram usage:        4 bytes
  3464 ;; Hardware stack levels used:    1
  3465 ;; Hardware stack levels required when called:    1
  3466 ;; This function calls:
  3467 ;;		Nothing
  3468 ;; This function is called by:
  3469 ;;		_get_RFID
  3470 ;;		_id_search
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473  04E0                     ___lbdiv:	
  3474                           
  3475                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3476                           ;___lbdiv@dividend stored from wreg
  3477  04E0  00F3               	movwf	___lbdiv@dividend
  3478  04E1  01F5               	clrf	___lbdiv@quotient
  3479  04E2  0872               	movf	___lbdiv@divisor,w
  3480  04E3  1903               	btfsc	3,2
  3481  04E4  2CF9               	goto	l6267
  3482  04E5  01F4               	clrf	___lbdiv@counter
  3483  04E6                     l6253:	
  3484  04E6  0AF4               	incf	___lbdiv@counter,f
  3485  04E7  1BF2               	btfsc	___lbdiv@divisor,7
  3486  04E8  2CEC               	goto	l4917
  3487  04E9  1003               	clrc
  3488  04EA  0DF2               	rlf	___lbdiv@divisor,f
  3489  04EB  2CE6               	goto	l6253
  3490  04EC                     l4917:	
  3491  04EC  1003               	clrc
  3492  04ED  0DF5               	rlf	___lbdiv@quotient,f
  3493  04EE  0872               	movf	___lbdiv@divisor,w
  3494  04EF  0273               	subwf	___lbdiv@dividend,w
  3495  04F0  1C03               	skipc
  3496  04F1  2CF6               	goto	L9
  3497  04F2  0872               	movf	___lbdiv@divisor,w
  3498  04F3  02F3               	subwf	___lbdiv@dividend,f
  3499  04F4  1475               	bsf	___lbdiv@quotient,0
  3500  04F5  1003               	clrc
  3501  04F6                     L9:	
  3502  04F6  0CF2               	rrf	___lbdiv@divisor,f
  3503  04F7  0BF4               	decfsz	___lbdiv@counter,f
  3504  04F8  2CEC               	goto	l4917
  3505  04F9                     l6267:	
  3506  04F9  0875               	movf	___lbdiv@quotient,w
  3507  04FA  0008               	return
  3508  04FB                     __end_of___lbdiv:	
  3509                           
  3510                           	psect	text584
  3511  059E                     __ptext584:	
  3512 ;; =============== function ___lbdiv ends ============
  3513                           
  3514                           
  3515 ;; *************** function ___bmul *****************
  3516 ;; Defined at:
  3517 ;;		line 3 in file "D:\OneDrive\SmarRF\MCU\MC82\IDE\ORIGINIDE_V2.0.9\Program Files (x86)\HI-TECH Software\PICC\9.83\sour
      +ces\bmul.c"
  3518 ;; Parameters:    Size  Location     Type
  3519 ;;  multiplier      1    wreg     unsigned char 
  3520 ;;  multiplicand    1    2[COMMON] unsigned char 
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;  multiplier      1    4[COMMON] unsigned char 
  3523 ;;  product         1    3[COMMON] unsigned char 
  3524 ;; Return value:  Size  Location     Type
  3525 ;;                  1    wreg      unsigned char 
  3526 ;; Registers used:
  3527 ;;		wreg, status,2, status,0
  3528 ;; Tracked objects:
  3529 ;;		On entry : 60/0
  3530 ;;		On exit  : 60/0
  3531 ;;		Unchanged: FFF9F/0
  3532 ;; Data sizes:     COMMON   BANK0   BANK1
  3533 ;;      Params:         1       0       0
  3534 ;;      Locals:         2       0       0
  3535 ;;      Temps:          0       0       0
  3536 ;;      Totals:         3       0       0
  3537 ;;Total ram usage:        3 bytes
  3538 ;; Hardware stack levels used:    1
  3539 ;; Hardware stack levels required when called:    1
  3540 ;; This function calls:
  3541 ;;		Nothing
  3542 ;; This function is called by:
  3543 ;;		_id_replate
  3544 ;; This function uses a non-reentrant model
  3545 ;;
  3546  059E                     ___bmul:	
  3547                           
  3548                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3549                           ;___bmul@multiplier stored from wreg
  3550  059E  00F4               	movwf	___bmul@multiplier
  3551  059F  01F3               	clrf	___bmul@product
  3552  05A0                     l6233:	
  3553  05A0  0872               	movf	___bmul@multiplicand,w
  3554  05A1  1874               	btfsc	___bmul@multiplier,0
  3555  05A2  07F3               	addwf	___bmul@product,f
  3556  05A3  1003               	clrc
  3557  05A4  0DF2               	rlf	___bmul@multiplicand,f
  3558  05A5  1003               	clrc
  3559  05A6  0CF4               	rrf	___bmul@multiplier,f
  3560  05A7  08F4               	movf	___bmul@multiplier,f
  3561  05A8  1D03               	skipz
  3562  05A9  2DA0               	goto	l6233
  3563  05AA  0873               	movf	___bmul@product,w
  3564  05AB  0008               	return
  3565  05AC                     __end_of___bmul:	
  3566                           
  3567                           	psect	text585
  3568  05C6                     __ptext585:	
  3569 ;; =============== function ___bmul ends ============
  3570                           
  3571                           
  3572 ;; *************** function _setState *****************
  3573 ;; Defined at:
  3574 ;;		line 128 in file "MAIN.C"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;  stt             1    wreg     unsigned char 
  3577 ;;  _tOut           2    2[COMMON] unsigned int 
  3578 ;; Auto vars:     Size  Location     Type
  3579 ;;  stt             1    4[COMMON] unsigned char 
  3580 ;; Return value:  Size  Location     Type
  3581 ;;		None               void
  3582 ;; Registers used:
  3583 ;;		wreg, status,2
  3584 ;; Tracked objects:
  3585 ;;		On entry : 0/20
  3586 ;;		On exit  : 60/0
  3587 ;;		Unchanged: FFF9F/0
  3588 ;; Data sizes:     COMMON   BANK0   BANK1
  3589 ;;      Params:         2       0       0
  3590 ;;      Locals:         1       0       0
  3591 ;;      Temps:          0       0       0
  3592 ;;      Totals:         3       0       0
  3593 ;;Total ram usage:        3 bytes
  3594 ;; Hardware stack levels used:    1
  3595 ;; Hardware stack levels required when called:    1
  3596 ;; This function calls:
  3597 ;;		Nothing
  3598 ;; This function is called by:
  3599 ;;		_main
  3600 ;; This function uses a non-reentrant model
  3601 ;;
  3602  05C6                     _setState:	
  3603                           
  3604                           ; Regs used in _setState: [wreg+status,2]
  3605                           ;setState@stt stored from wreg
  3606  05C6  00F4               	movwf	setState@stt
  3607                           
  3608                           ;MAIN.C: 130: mtState = stt;
  3609  05C7  1283               	bcf	3,5	;RP0=0, select bank0
  3610  05C8  1303               	bcf	3,6	;RP1=0, select bank0
  3611  05C9  00DF               	movwf	_mtState
  3612                           
  3613                           ;MAIN.C: 131: timeTick =0;
  3614  05CA  01DC               	clrf	_timeTick
  3615  05CB  01DD               	clrf	_timeTick+1
  3616                           
  3617                           ;MAIN.C: 132: timeOut = _tOut;
  3618  05CC  0873               	movf	setState@_tOut+1,w
  3619  05CD  00DB               	movwf	_timeOut+1
  3620  05CE  0872               	movf	setState@_tOut,w
  3621  05CF  00DA               	movwf	_timeOut
  3622  05D0  0008               	return
  3623  05D1                     __end_of_setState:	
  3624                           
  3625                           	psect	text586
  3626  04FB                     __ptext586:	
  3627 ;; =============== function _setState ends ============
  3628                           
  3629                           
  3630 ;; *************** function _SET_EPWM_ON *****************
  3631 ;; Defined at:
  3632 ;;		line 11 in file "ms82_pwm.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;		None               void
  3639 ;; Registers used:
  3640 ;;		wreg, status,2
  3641 ;; Tracked objects:
  3642 ;;		On entry : 60/20
  3643 ;;		On exit  : 60/20
  3644 ;;		Unchanged: FFE00/0
  3645 ;; Data sizes:     COMMON   BANK0   BANK1
  3646 ;;      Params:         0       0       0
  3647 ;;      Locals:         0       0       0
  3648 ;;      Temps:          0       0       0
  3649 ;;      Totals:         0       0       0
  3650 ;;Total ram usage:        0 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    1
  3653 ;; This function calls:
  3654 ;;		Nothing
  3655 ;; This function is called by:
  3656 ;;		_main
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659  04FB                     _SET_EPWM_ON:	
  3660                           
  3661                           ;ms82_pwm.c: 12: TRISC |= 0b00000100;
  3662                           
  3663                           ; Regs used in _SET_EPWM_ON: [wreg+status,2]
  3664  04FB  1507               	bsf	7,2	;volatile
  3665                           
  3666                           ;ms82_pwm.c: 13: PR2 = 15;
  3667  04FC  300F               	movlw	15
  3668  04FD  0092               	movwf	18	;volatile
  3669                           
  3670                           ;ms82_pwm.c: 14: EPWMR1L =0;
  3671  04FE  1283               	bcf	3,5	;RP0=0, select bank0
  3672  04FF  0193               	clrf	19	;volatile
  3673                           
  3674                           ;ms82_pwm.c: 15: EPWM1CON = 0b10011100;
  3675  0500  309C               	movlw	156
  3676  0501  0095               	movwf	21	;volatile
  3677                           
  3678                           ;ms82_pwm.c: 16: TMR2 = 0;
  3679  0502  0191               	clrf	17	;volatile
  3680  0503  3004               	movlw	4
  3681                           
  3682                           ;ms82_pwm.c: 17: TMR2IF = 0;
  3683  0504  108C               	bcf	12,1
  3684                           
  3685                           ;ms82_pwm.c: 18: T2CON = 0B00000100;
  3686  0505  0092               	movwf	18	;volatile
  3687  0506                     l2750:	
  3688                           ;ms82_pwm.c: 19: while(TMR2IF==1) asm("clrwdt");
  3689                           
  3690  0506  1283               	bcf	3,5	;RP0=0, select bank0
  3691  0507  1303               	bcf	3,6	;RP1=0, select bank0
  3692  0508  1C8C               	btfss	12,1
  3693  0509  2D0C               	goto	l6211
  3694  050A  0064               	clrwdt	;#
  3695  050B  2D06               	goto	l2750
  3696  050C                     l6211:	
  3697                           
  3698                           ;ms82_pwm.c: 20: PWM1CON = 0b00010000;
  3699  050C  3010               	movlw	16
  3700  050D  0096               	movwf	22	;volatile
  3701                           
  3702                           ;ms82_pwm.c: 21: EPWM1AUX = 0b10001000;
  3703  050E  3088               	movlw	136
  3704  050F  1683               	bsf	3,5	;RP0=1, select bank1
  3705  0510  0090               	movwf	16	;volatile
  3706                           
  3707                           ;ms82_pwm.c: 22: TRISC &= 0b11111011;
  3708  0511  1107               	bcf	7,2	;volatile
  3709  0512  0008               	return
  3710  0513                     __end_of_SET_EPWM_ON:	
  3711                           
  3712                           	psect	text587
  3713  0429                     __ptext587:	
  3714 ;; =============== function _SET_EPWM_ON ends ============
  3715                           
  3716                           
  3717 ;; *************** function _timerOut *****************
  3718 ;; Defined at:
  3719 ;;		line 6 in file "rfid125.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;  Logic           1    wreg     unsigned char 
  3722 ;;  time            2    2[COMMON] unsigned int 
  3723 ;; Auto vars:     Size  Location     Type
  3724 ;;  Logic           1    4[COMMON] unsigned char 
  3725 ;;  CurTimer        2    5[COMMON] unsigned int 
  3726 ;; Return value:  Size  Location     Type
  3727 ;;                  2    2[COMMON] unsigned int 
  3728 ;; Registers used:
  3729 ;;		wreg, status,2
  3730 ;; Tracked objects:
  3731 ;;		On entry : 60/0
  3732 ;;		On exit  : 60/0
  3733 ;;		Unchanged: FFF9F/0
  3734 ;; Data sizes:     COMMON   BANK0   BANK1
  3735 ;;      Params:         2       0       0
  3736 ;;      Locals:         3       0       0
  3737 ;;      Temps:          0       0       0
  3738 ;;      Totals:         5       0       0
  3739 ;;Total ram usage:        5 bytes
  3740 ;; Hardware stack levels used:    1
  3741 ;; Hardware stack levels required when called:    1
  3742 ;; This function calls:
  3743 ;;		Nothing
  3744 ;; This function is called by:
  3745 ;;		_get_RFID
  3746 ;; This function uses a non-reentrant model
  3747 ;;
  3748  0429                     _timerOut:	
  3749                           
  3750                           ; Regs used in _timerOut: [wreg+status,2]
  3751                           ;timerOut@Logic stored from wreg
  3752  0429  00F4               	movwf	timerOut@Logic
  3753                           
  3754                           ;rfid125.c: 7: unsigned int CurTimer;
  3755                           ;rfid125.c: 8: TMR1ON = 0;
  3756  042A  1010               	bcf	16,0
  3757                           
  3758                           ;rfid125.c: 9: TMR1H = 0;
  3759  042B  018F               	clrf	15	;volatile
  3760                           
  3761                           ;rfid125.c: 10: TMR1L = 0;
  3762  042C  018E               	clrf	14	;volatile
  3763                           
  3764                           ;rfid125.c: 11: TMR1IF = 0;
  3765  042D  100C               	bcf	12,0
  3766                           
  3767                           ;rfid125.c: 12: TMR1ON = 1;
  3768  042E  1410               	bsf	16,0
  3769  042F                     l6193:	
  3770                           ;rfid125.c: 13: while(RA4==Logic){
  3771                           
  3772  042F  3000               	movlw	0
  3773  0430  1A05               	btfsc	5,4
  3774  0431  3001               	movlw	1
  3775  0432  0674               	xorwf	timerOut@Logic,w
  3776  0433  1D03               	btfss	3,2
  3777  0434  2C45               	goto	l6195
  3778                           
  3779                           ;rfid125.c: 14: CurTimer= (TMR1H <<8 )| TMR1L;
  3780  0435  080F               	movf	15,w	;volatile
  3781  0436  00F6               	movwf	timerOut@CurTimer+1
  3782  0437  01F5               	clrf	timerOut@CurTimer
  3783  0438  080E               	movf	14,w	;volatile
  3784  0439  04F5               	iorwf	timerOut@CurTimer,f
  3785                           
  3786                           ;rfid125.c: 15: if(CurTimer>time)
  3787  043A  0876               	movf	timerOut@CurTimer+1,w
  3788  043B  0273               	subwf	timerOut@time+1,w
  3789  043C  1D03               	skipz
  3790  043D  2C40               	goto	u1165
  3791  043E  0875               	movf	timerOut@CurTimer,w
  3792  043F  0272               	subwf	timerOut@time,w
  3793  0440                     u1165:	
  3794  0440  1803               	skipnc
  3795  0441  2C2F               	goto	l6193
  3796                           
  3797                           ;rfid125.c: 16: return 0;
  3798  0442  01F2               	clrf	?_timerOut
  3799  0443  01F3               	clrf	?_timerOut+1
  3800  0444  0008               	return
  3801  0445                     l6195:	
  3802                           
  3803                           ;rfid125.c: 17: }
  3804                           ;rfid125.c: 18: return CurTimer;
  3805  0445  0876               	movf	timerOut@CurTimer+1,w
  3806  0446  00F3               	movwf	?_timerOut+1
  3807  0447  0875               	movf	timerOut@CurTimer,w
  3808  0448  00F2               	movwf	?_timerOut
  3809  0449  0008               	return
  3810  044A                     __end_of_timerOut:	
  3811                           
  3812                           	psect	text588
  3813  0489                     __ptext588:	
  3814 ;; =============== function _timerOut ends ============
  3815                           
  3816                           
  3817 ;; *************** function _comArr *****************
  3818 ;; Defined at:
  3819 ;;		line 52 in file "ms82_eeprom.c"
  3820 ;; Parameters:    Size  Location     Type
  3821 ;;  arr1            1    wreg     PTR unsigned char 
  3822 ;;		 -> keyID(5), 
  3823 ;;  arr2            1    2[COMMON] PTR unsigned char 
  3824 ;;		 -> buffTag(25), 
  3825 ;;  len1            1    3[COMMON] unsigned char 
  3826 ;;  len2            1    4[COMMON] unsigned char 
  3827 ;; Auto vars:     Size  Location     Type
  3828 ;;  arr1            1    8[COMMON] PTR unsigned char 
  3829 ;;		 -> keyID(5), 
  3830 ;;  i               1    9[COMMON] unsigned char 
  3831 ;; Return value:  Size  Location     Type
  3832 ;;                  1    wreg      unsigned char 
  3833 ;; Registers used:
  3834 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3835 ;; Tracked objects:
  3836 ;;		On entry : 60/0
  3837 ;;		On exit  : 60/0
  3838 ;;		Unchanged: FFE9F/0
  3839 ;; Data sizes:     COMMON   BANK0   BANK1
  3840 ;;      Params:         3       0       0
  3841 ;;      Locals:         2       0       0
  3842 ;;      Temps:          3       0       0
  3843 ;;      Totals:         8       0       0
  3844 ;;Total ram usage:        8 bytes
  3845 ;; Hardware stack levels used:    1
  3846 ;; Hardware stack levels required when called:    1
  3847 ;; This function calls:
  3848 ;;		Nothing
  3849 ;; This function is called by:
  3850 ;;		_id_search
  3851 ;; This function uses a non-reentrant model
  3852 ;;
  3853  0489                     _comArr:	
  3854                           
  3855                           ; Regs used in _comArr: [wreg-fsr0h+status,2+status,0]
  3856                           ;comArr@arr1 stored from wreg
  3857  0489  00F8               	movwf	comArr@arr1
  3858                           
  3859                           ;ms82_eeprom.c: 53: unsigned char i;
  3860                           ;ms82_eeprom.c: 55: if(len1!=len2)
  3861  048A  0873               	movf	comArr@len1,w
  3862  048B  0674               	xorwf	comArr@len2,w
  3863  048C  1D03               	btfss	3,2
  3864                           
  3865                           ;ms82_eeprom.c: 56: return 0;
  3866  048D  3400               	retlw	0
  3867                           
  3868                           ;ms82_eeprom.c: 57: else{
  3869                           ;ms82_eeprom.c: 58: for(i=0;i<len1;i++){
  3870  048E  01F9               	clrf	comArr@i
  3871  048F                     l6165:	
  3872  048F  0873               	movf	comArr@len1,w
  3873  0490  0279               	subwf	comArr@i,w
  3874                           
  3875                           ;ms82_eeprom.c: 59: if(*(arr1+i) != *(arr2+i)){
  3876  0491  0879               	movf	comArr@i,w
  3877  0492  1803               	btfsc	3,0
  3878  0493  2CA4               	goto	L10
  3879  0494  0772               	addwf	comArr@arr2,w
  3880  0495  00F5               	movwf	??_comArr
  3881  0496  0084               	movwf	4
  3882  0497  1383               	bcf	3,7	;select IRP bank0
  3883  0498  0800               	movf	0,w
  3884  0499  00F6               	movwf	??_comArr+1
  3885  049A  0879               	movf	comArr@i,w
  3886  049B  0778               	addwf	comArr@arr1,w
  3887  049C  00F7               	movwf	??_comArr+2
  3888  049D  0084               	movwf	4
  3889  049E  0800               	movf	0,w
  3890  049F  0676               	xorwf	??_comArr+1,w
  3891  04A0  1D03               	btfss	3,2
  3892  04A1  3400               	retlw	0
  3893  04A2  0AF9               	incf	comArr@i,f
  3894  04A3  2C8F               	goto	l6165
  3895  04A4                     L10:	
  3896                           ;ms82_eeprom.c: 61: }
  3897                           ;ms82_eeprom.c: 62: }
  3898                           ;ms82_eeprom.c: 63: if(i==len1)
  3899                           
  3900  04A4  0673               	xorwf	comArr@len1,w
  3901  04A5  1903               	btfsc	3,2
  3902                           
  3903                           ;ms82_eeprom.c: 64: return 1;
  3904  04A6  3401               	retlw	1
  3905  04A7  3400               	retlw	0
  3906  04A8                     __end_of_comArr:	
  3907                           
  3908                           	psect	text589
  3909  05E5                     __ptext589:	
  3910 ;; =============== function _comArr ends ============
  3911                           
  3912                           
  3913 ;; *************** function _eepromReadByte *****************
  3914 ;; Defined at:
  3915 ;;		line 7 in file "ms82_eeprom.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;  EEAddr          1    wreg     unsigned char 
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;  EEAddr          1    2[COMMON] unsigned char 
  3920 ;;  ReEepromData    1    3[COMMON] unsigned char 
  3921 ;; Return value:  Size  Location     Type
  3922 ;;                  1    wreg      unsigned char 
  3923 ;; Registers used:
  3924 ;;		wreg
  3925 ;; Tracked objects:
  3926 ;;		On entry : 0/20
  3927 ;;		On exit  : 60/20
  3928 ;;		Unchanged: FFF9F/0
  3929 ;; Data sizes:     COMMON   BANK0   BANK1
  3930 ;;      Params:         0       0       0
  3931 ;;      Locals:         2       0       0
  3932 ;;      Temps:          0       0       0
  3933 ;;      Totals:         2       0       0
  3934 ;;Total ram usage:        2 bytes
  3935 ;; Hardware stack levels used:    1
  3936 ;; Hardware stack levels required when called:    1
  3937 ;; This function calls:
  3938 ;;		Nothing
  3939 ;; This function is called by:
  3940 ;;		_eepromReadBlock
  3941 ;;		_main
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944  05E5                     _eepromReadByte:	
  3945                           
  3946                           ; Regs used in _eepromReadByte: [wreg]
  3947                           ;eepromReadByte@EEAddr stored from wreg
  3948  05E5  00F2               	movwf	eepromReadByte@EEAddr
  3949                           
  3950                           ;ms82_eeprom.c: 8: unsigned char ReEepromData;
  3951                           ;ms82_eeprom.c: 10: EEADR = EEAddr;
  3952  05E6  1683               	bsf	3,5	;RP0=1, select bank1
  3953  05E7  1303               	bcf	3,6	;RP1=0, select bank1
  3954  05E8  009B               	movwf	27	;volatile
  3955                           
  3956                           ;ms82_eeprom.c: 11: RD = 1;
  3957  05E9  141C               	bsf	28,0
  3958                           
  3959                           ;ms82_eeprom.c: 12: ReEepromData = EEDAT;
  3960  05EA  081A               	movf	26,w	;volatile
  3961  05EB  00F3               	movwf	eepromReadByte@ReEepromData
  3962                           
  3963                           ;ms82_eeprom.c: 13: RD = 0;
  3964  05EC  101C               	bcf	28,0
  3965                           
  3966                           ;ms82_eeprom.c: 14: return ReEepromData;
  3967  05ED  0008               	return
  3968  05EE                     __end_of_eepromReadByte:	
  3969                           
  3970                           	psect	text590
  3971  053C                     __ptext590:	
  3972 ;; =============== function _eepromReadByte ends ============
  3973                           
  3974                           
  3975 ;; *************** function _int_init *****************
  3976 ;; Defined at:
  3977 ;;		line 66 in file "sysinit.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;		None
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;		None
  3982 ;; Return value:  Size  Location     Type
  3983 ;;		None               void
  3984 ;; Registers used:
  3985 ;;		status,2
  3986 ;; Tracked objects:
  3987 ;;		On entry : 60/0
  3988 ;;		On exit  : 60/20
  3989 ;;		Unchanged: FFF9F/0
  3990 ;; Data sizes:     COMMON   BANK0   BANK1
  3991 ;;      Params:         0       0       0
  3992 ;;      Locals:         0       0       0
  3993 ;;      Temps:          0       0       0
  3994 ;;      Totals:         0       0       0
  3995 ;;Total ram usage:        0 bytes
  3996 ;; Hardware stack levels used:    1
  3997 ;; Hardware stack levels required when called:    1
  3998 ;; This function calls:
  3999 ;;		Nothing
  4000 ;; This function is called by:
  4001 ;;		_main
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004  053C                     _int_init:	
  4005                           
  4006                           ;sysinit.c: 71: INTCON = 0B00000000;
  4007                           
  4008                           ; Regs used in _int_init: [status,2]
  4009  053C  018B               	clrf	11	;volatile
  4010                           
  4011                           ;sysinit.c: 72: PIE1 = 0B00000000;
  4012  053D  1683               	bsf	3,5	;RP0=1, select bank1
  4013  053E  018C               	clrf	12	;volatile
  4014                           
  4015                           ;sysinit.c: 73: PIR1 = 0B00000000;
  4016  053F  1283               	bcf	3,5	;RP0=0, select bank0
  4017  0540  018C               	clrf	12	;volatile
  4018                           
  4019                           ;sysinit.c: 85: T0IF = 0;
  4020  0541  110B               	bcf	11,2
  4021                           
  4022                           ;sysinit.c: 86: T0IE = 0;
  4023  0542  128B               	bcf	11,5
  4024                           
  4025                           ;sysinit.c: 87: TMR1ON = 0;
  4026  0543  1010               	bcf	16,0
  4027                           
  4028                           ;sysinit.c: 89: TMR2IF = 0;
  4029  0544  108C               	bcf	12,1
  4030                           
  4031                           ;sysinit.c: 90: TMR2IE = 0;
  4032  0545  1683               	bsf	3,5	;RP0=1, select bank1
  4033  0546  108C               	bcf	12,1
  4034                           
  4035                           ;sysinit.c: 93: TMR1IF = 0;
  4036  0547  1283               	bcf	3,5	;RP0=0, select bank0
  4037  0548  100C               	bcf	12,0
  4038                           
  4039                           ;sysinit.c: 94: TMR1IE = 0;
  4040  0549  1683               	bsf	3,5	;RP0=1, select bank1
  4041  054A  100C               	bcf	12,0
  4042                           
  4043                           ;sysinit.c: 96: PEIE = 0;
  4044  054B  130B               	bcf	11,6
  4045                           
  4046                           ;sysinit.c: 98: GIE = 1;
  4047  054C  178B               	bsf	11,7
  4048  054D  0008               	return
  4049  054E                     __end_of_int_init:	
  4050                           
  4051                           	psect	text591
  4052  05DB                     __ptext591:	
  4053 ;; =============== function _int_init ends ============
  4054                           
  4055                           
  4056 ;; *************** function _timer_init *****************
  4057 ;; Defined at:
  4058 ;;		line 44 in file "sysinit.c"
  4059 ;; Parameters:    Size  Location     Type
  4060 ;;		None
  4061 ;; Auto vars:     Size  Location     Type
  4062 ;;		None
  4063 ;; Return value:  Size  Location     Type
  4064 ;;		None               void
  4065 ;; Registers used:
  4066 ;;		wreg
  4067 ;; Tracked objects:
  4068 ;;		On entry : 60/20
  4069 ;;		On exit  : 60/0
  4070 ;;		Unchanged: FFF9F/0
  4071 ;; Data sizes:     COMMON   BANK0   BANK1
  4072 ;;      Params:         0       0       0
  4073 ;;      Locals:         0       0       0
  4074 ;;      Temps:          0       0       0
  4075 ;;      Totals:         0       0       0
  4076 ;;Total ram usage:        0 bytes
  4077 ;; Hardware stack levels used:    1
  4078 ;; Hardware stack levels required when called:    1
  4079 ;; This function calls:
  4080 ;;		Nothing
  4081 ;; This function is called by:
  4082 ;;		_main
  4083 ;; This function uses a non-reentrant model
  4084 ;;
  4085  05DB                     _timer_init:	
  4086                           
  4087                           ;sysinit.c: 46: OPTION = 0B00000001;
  4088                           
  4089                           ; Regs used in _timer_init: [wreg]
  4090  05DB  3001               	movlw	1
  4091  05DC  0081               	movwf	1	;volatile
  4092                           
  4093                           ;sysinit.c: 59: TMR1H = -5000>>8;
  4094  05DD  30EC               	movlw	236
  4095  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  4096  05DF  008F               	movwf	15	;volatile
  4097                           
  4098                           ;sysinit.c: 60: TMR1L = -5000;
  4099  05E0  3078               	movlw	120
  4100  05E1  008E               	movwf	14	;volatile
  4101                           
  4102                           ;sysinit.c: 61: T1CON = 0B00100001;
  4103  05E2  3021               	movlw	33
  4104  05E3  0090               	movwf	16	;volatile
  4105  05E4  0008               	return
  4106  05E5                     __end_of_timer_init:	
  4107                           
  4108                           	psect	text592
  4109  058F                     __ptext592:	
  4110 ;; =============== function _timer_init ends ============
  4111                           
  4112                           
  4113 ;; *************** function _gpio_init *****************
  4114 ;; Defined at:
  4115 ;;		line 32 in file "sysinit.c"
  4116 ;; Parameters:    Size  Location     Type
  4117 ;;		None
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;		None
  4120 ;; Return value:  Size  Location     Type
  4121 ;;		None               void
  4122 ;; Registers used:
  4123 ;;		wreg, status,2
  4124 ;; Tracked objects:
  4125 ;;		On entry : 60/20
  4126 ;;		On exit  : 60/20
  4127 ;;		Unchanged: FFF9F/0
  4128 ;; Data sizes:     COMMON   BANK0   BANK1
  4129 ;;      Params:         0       0       0
  4130 ;;      Locals:         0       0       0
  4131 ;;      Temps:          0       0       0
  4132 ;;      Totals:         0       0       0
  4133 ;;Total ram usage:        0 bytes
  4134 ;; Hardware stack levels used:    1
  4135 ;; Hardware stack levels required when called:    1
  4136 ;; This function calls:
  4137 ;;		Nothing
  4138 ;; This function is called by:
  4139 ;;		_main
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142  058F                     _gpio_init:	
  4143                           
  4144                           ;sysinit.c: 34: PORTA = 0B00000000;
  4145                           
  4146                           ; Regs used in _gpio_init: [wreg+status,2]
  4147  058F  1283               	bcf	3,5	;RP0=0, select bank0
  4148  0590  0185               	clrf	5	;volatile
  4149                           
  4150                           ;sysinit.c: 35: TRISA = 0B01110011;
  4151  0591  3073               	movlw	115
  4152  0592  1683               	bsf	3,5	;RP0=1, select bank1
  4153  0593  0085               	movwf	5	;volatile
  4154                           
  4155                           ;sysinit.c: 36: WPUA = 0B10010000;
  4156  0594  3090               	movlw	144
  4157  0595  0095               	movwf	21	;volatile
  4158                           
  4159                           ;sysinit.c: 37: PORTC = 0B00000010;
  4160  0596  3002               	movlw	2
  4161  0597  1283               	bcf	3,5	;RP0=0, select bank0
  4162  0598  0087               	movwf	7	;volatile
  4163                           
  4164                           ;sysinit.c: 38: TRISC = 0B11111110;
  4165  0599  30FE               	movlw	254
  4166  059A  1683               	bsf	3,5	;RP0=1, select bank1
  4167  059B  0087               	movwf	7	;volatile
  4168                           
  4169                           ;sysinit.c: 39: WPUC = 0B00000000;
  4170  059C  0188               	clrf	8	;volatile
  4171  059D  0008               	return
  4172  059E                     __end_of_gpio_init:	
  4173                           
  4174                           	psect	text593
  4175  055F                     __ptext593:	
  4176 ;; =============== function _gpio_init ends ============
  4177                           
  4178                           
  4179 ;; *************** function _ISR *****************
  4180 ;; Defined at:
  4181 ;;		line 72 in file "MAIN.C"
  4182 ;; Parameters:    Size  Location     Type
  4183 ;;		None
  4184 ;; Auto vars:     Size  Location     Type
  4185 ;;		None
  4186 ;; Return value:  Size  Location     Type
  4187 ;;		None               void
  4188 ;; Registers used:
  4189 ;;		wreg
  4190 ;; Tracked objects:
  4191 ;;		On entry : 0/0
  4192 ;;		On exit  : 0/0
  4193 ;;		Unchanged: FFF9F/0
  4194 ;; Data sizes:     COMMON   BANK0   BANK1
  4195 ;;      Params:         0       0       0
  4196 ;;      Locals:         0       0       0
  4197 ;;      Temps:          2       0       0
  4198 ;;      Totals:         2       0       0
  4199 ;;Total ram usage:        2 bytes
  4200 ;; Hardware stack levels used:    1
  4201 ;; This function calls:
  4202 ;;		Nothing
  4203 ;; This function is called by:
  4204 ;;		Interrupt level 1
  4205 ;; This function uses a non-reentrant model
  4206 ;;
  4207  055F                     _ISR:	
  4208                           
  4209                           ;MAIN.C: 98: if(T0IE&&T0IF)
  4210  055F  1A8B               	btfsc	11,5
  4211  0560  1D0B               	btfss	11,2
  4212  0561  2D69               	goto	i1l3457
  4213                           
  4214                           ;MAIN.C: 99: {
  4215                           ;MAIN.C: 100: T0IF = 0;
  4216  0562  110B               	bcf	11,2
  4217                           
  4218                           ;MAIN.C: 101: TMR0 = buzFre;
  4219  0563  1283               	bcf	3,5	;RP0=0, select bank0
  4220  0564  1303               	bcf	3,6	;RP1=0, select bank0
  4221  0565  0825               	movf	_buzFre,w
  4222  0566  0081               	movwf	1	;volatile
  4223                           
  4224                           ;MAIN.C: 102: RC0 = ~RC0;
  4225  0567  3001               	movlw	1
  4226  0568  0687               	xorwf	7,f
  4227  0569                     i1l3457:	
  4228  0569  0871               	movf	??_ISR+1,w
  4229  056A  008A               	movwf	10
  4230  056B  0E70               	swapf	??_ISR^(0+-128),w
  4231  056C  0083               	movwf	3
  4232  056D  0EFE               	swapf	126,f
  4233  056E  0E7E               	swapf	126,w
  4234  056F  0009               	retfie
  4235  0570                     __end_of_ISR:	
  4236                           
  4237                           	psect	intentry
  4238  0004                     __pintentry:	
  4239                           ; Regs used in _ISR: [wreg]
  4240                           
  4241  0004                     interrupt_function:	
  4242  007E                     saved_w	set	btemp
  4243  0004  00FE               	movwf	btemp
  4244  0005  0E03               	swapf	3,w
  4245  0006  00F0               	movwf	??_ISR
  4246  0007  080A               	movf	10,w
  4247  0008  00F1               	movwf	??_ISR+1
  4248  0009  2D5F               	ljmp	_ISR
  4249                           
  4250                           	psect	text594
  4251  0000                     __ptext594:	
  4252 ;; =============== function _ISR ends ============
  4253                           
  4254  007E                     btemp	set	126	;btemp
  4255  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Mon Dec 23 15:37:57 2019

                         pc 0002              ___bmul@product 0073                          _RD 04E0  
                        _WR 04E8                          fsr 0004                         l651 05D6  
                       l660 0000                         l654 0000                         l663 0000  
                       l657 0000                         _GIE 005F                         _RA2 002A  
                       _RA3 002B                         _RC0 0038                         _RA4 002C  
                       _RC1 0039                         _PR2 0092                         _HTS 047A  
                       _ISR 055F                         _SR0 0CF6                         _SR1 0CF7  
                       fsr0 0004                         indf 0000            get_RFID@even_col 004B  
          get_RFID@even_row 004C                 main@idState 0057                        S6915 05EE  
                      ?_ISR 0070                        l1322 0000                        l1331 0000  
                      l2051 024D                        l1316 0000                        l1325 0408  
                      l2070 029A                        l1328 0418                        l1337 0000  
                      l2091 02F8                        l4201 0000                        l3501 019D  
                      l4207 0000                        l4218 0000                        l3530 01E3  
                      l3460 0000                        l3452 04C2                        l3453 0000  
                      l3533 0216                        l2750 0506                        l6111 0000  
                      l3447 0000                        l3535 022A                        l6113 0000  
                      l6121 0000                        l2753 0000                        l6201 0000  
                      l6115 0000                        l6107 0000                        l6131 0000  
                      l6123 0000                        l6211 050C                        l6203 0000  
                      l6109 0000                        l6117 0000                        l6133 0000  
                      l6125 0000                        l6141 0000                        l6213 0000  
                      l6205 0000                        l6301 0000                        l3469 0000  
                      l3477 0000                        l6135 0000                        l6127 0000  
                      l6119 0000                        l6143 0000                        l6207 0000  
                      l6231 0000                        l4199 03C2                        l6137 0000  
                      l6129 0000                        l6209 0000                        l6225 0000  
                      l6241 0000                        l6233 05A0                        l6401 02AD  
                      l6321 0000                        l3489 00B7                        l3498 00FC  
                      l6139 0000                        l6147 0000                        l6227 0000  
                      l6251 0000                        l6403 0000                        l6331 0000  
                      l6165 048F                        l6181 0000                        l6229 0000  
                      l6261 0000                        l6253 04E6                        l6501 0000  
                      l6405 0000                        l6341 0264                        l6317 0000  
                      l6309 0000                        l6183 0000                        l6239 0000  
                      l6247 0000                        l6271 0000                        l6503 0000  
                      l6431 0000                        l6423 0000                        l6415 02C1  
                      l6343 0000                        l4920 0000                        l6193 042F  
                      l6185 0000                        l6265 0000                        l6257 0000  
                      l6249 0000                        l6273 0000                        l6281 0550  
                      l6505 0000                        l6441 0000                        l6433 0000  
                      l6417 0000                        l6345 026D                        l6329 0255  
                      l6521 0571                        l6195 0445                        l6179 0000  
                      l6267 04F9                        l6275 0000                        l6291 041E  
                      l6283 0000                        l6443 02EF                        l6435 02DC  
                      l6419 02CA                        l6371 0000                        l6363 0285  
                      l6355 0278                        l6523 0000                        l6603 0000  
                      l4917 04EC                        l6293 0000                        l6285 040C  
                      l6453 0000                        l6445 0000                        l6429 02D5  
                      l6381 0000                        l6365 0000                        l6357 0000  
                      l6349 0000                        l6517 0000                        l6605 0000  
                      l6621 0000                        l6701 00A9                        l6199 0000  
                      l6279 0000                        l6287 0000                        l6471 0000  
                      l6447 0000                        l6439 02E6                        l6455 02FB  
                      l6383 02A3                        l6367 028E                        l6359 027B  
                      l6295 0000                        l6543 0000                        l6607 0000  
                      l6623 0000                        l6615 0000                        l6711 0000  
                      l6703 00AE                        l6289 0000                        l6481 0000  
                      l6457 0000                        l6377 0000                        l6369 0000  
                      l6297 0000                        l6537 0000                        l6529 04C8  
                      l6553 0000                        l6545 0000                        l6561 0000  
                      l6625 0000                        l6617 0000                        l6633 0000  
                      l6801 0000                        l6721 0000                        l6713 0000  
                      l6641 0000                        l6467 0306                        l6379 029E  
                      l6387 0250                        l6299 0233                        l6555 0000  
                      l6547 0000                        l6571 0000                        l6627 0000  
                      l6619 0000                        l6635 045C                        l6731 00EA  
                      l6723 00DA                        l6715 0000                        l6707 0000  
                      l6651 0000                        l6643 0000                        l4884 0000  
                      l6493 0342                        l6477 0310                        l6469 0000  
                      l6389 02A9                        l6557 0000                        l6565 0000  
                      l6581 0000                        l6573 0000                        l6629 0000  
                      l6821 01B8                        l6805 0000                        l6741 0000  
                      l6813 0192                        l6717 0000                        l6709 00BD  
                      l6661 0000                        l6653 0000                        l6645 0000  
                      l6637 0000                        l6495 0000                        l6479 0000  
                      l6559 0000                        l6567 052C                        l6575 0000  
                      l6583 04AD                        l6591 05BA                        l6831 01CF  
                      l6815 0000                        l6807 0000                        l6743 0000  
                      l6735 0105                        l6719 0000                        l6655 0000  
                      l6647 0000                        l6639 0000                        l6497 034C  
                      l6489 0000                        l6577 0000                        l6569 0000  
                      l6585 0000                        l6593 0000                        l6833 01D5  
                      l6809 018D                        l6761 0000                        l6745 0116  
                      l6737 0000                        l6817 01AB                        l6681 0000  
                      l6673 0052                        l6665 0033                        l6657 0000  
                      l6649 0000                        l6499 0000                        l6579 0000  
                      l6595 0000                        l6851 0000                        l6843 0000  
                      l6835 0000                        l6827 01C7                        l6819 0000  
                      l6763 0000                        l6755 012A                        l6739 0000  
                      l6691 0080                        l6675 0000                        l6659 0000  
                      l6589 0000                        l6853 01F7                        l6845 0000  
                      l6837 0000                        l6829 0000                        l6861 020F  
                      l6773 0000                        l6765 0000                        l6757 0000  
                      l6693 0099                        l6669 003B                        l6855 0000  
                      l6847 0000                        l6839 0000                        l6791 0000  
                      l6775 0000                        l6767 013E                        l6695 0000  
                      l6679 0000                        l6865 0217                        l6785 0000  
                      l6793 016D                        l6777 0000                        l6697 0000  
                      l6875 0227                        l6859 0201                        l6795 0172  
                      l6779 0153                        l6699 0000                        l6877 022C  
                      l6869 0000                        l6789 0000                        _EEIF 0067  
                      STR_1 05B2                        _T0IE 005D                        _T0IF 005A  
                      u1165 0440                        u2307 0422                        u2155 01C4  
                      u2237 0026                        u2247 01A5                        u2257 01B2  
                      u2267 03BE                        u2277 03CF                        u2287 03DC  
                      _PIE1 008C                        u2297 057A                        u1674 0319  
                      u1770 03C8                        u1675 0317                        u1784 03CB  
                      _PEIE 005E                        _PIR1 000C                        _TMR0 0001  
                      _TMR2 0011                        _STRA 0CE8                        _STRB 0CE9  
                      _STRC 0CEA                        _STRD 0CEB                        _WREN 0C62  
                      _WPUA 0095                        _WPUC 0088                        _beep 04A8  
                      _main 000B                        btemp 007E                        start 000A  
         ___bmul@multiplier 0074                       ??_ISR 0070             __end_of_SendNum 0406  
                     ?_beep 0075                       _C1SEN 0CF5                       _C2REN 0CF4  
                     ?_main 0070             __end_of___lbdiv 04FB                       _EEADR 009B  
                     _EEDAT 009A                       _EEPGD 0C67                       _T1CON 0010  
                     _T2CON 0012                       _TMR1H 000F                       _TMR1L 000E  
                     _PORTA 0005                       _PORTC 0007                       _SRCON 019E  
                     _PULSR 0CF2                       _PULSS 0CF3                       _TRISA 0085  
                     _TRISC 0087    __size_of_eepromReadBlock 0011                       _keyID 0060  
          ??_swUartSendByte 0072                       pclath 000A                       status 0003  
                     wtemp0 007E             ___lbdiv@divisor 0072             ___lbdiv@counter 0074  
      __size_of_delay_x10ms 0010            ??_eepromReadByte 0072                  SendNum@nib 007A  
                SendNum@num 0079            _eepromWriteBlock 052A                __end_of_beep 04C4  
              __end_of_main 0230    __end_of_swUartSendString 05C6                      ??_beep 0076  
                    ??_main 0053            eepromReadBlock@i 0078                      _EECON1 009C  
  __size_of_eepromWriteByte 0023                      i1l3457 0569                      i1l6221 0000  
                    i1l6215 0000                      _INTCON 000B                      _OSCCON 008F  
                    _TMR1IE 0460                      _TMR1IF 0060                      _TMR2IE 0461  
                    _TMR2IF 0061                      _OPTION 0081                      _TMR1ON 0080  
              ?_SET_EPWM_ON 0070            __end_of_get_RFID 0366            __end_of_id_clear 046A  
                 ??_SendNum 0075          get_RFID@timeOutVal 0050                      ___bmul 059E  
                 ??___lbdiv 0073                      _comArr 0489                      _buzFre 0025  
          __end_of_int_init 054E                      main@t1 0056            __end_of_setState 05D1  
                    saved_w 007E            __end_of_timerOut 044A         eepromReadBlock@buff 0074  
          ___lbdiv@dividend 0073            __end_of_sys_init 05DB           ??_eepromReadBlock 0076  
       ___bmul@multiplicand 0072              __pcstackCOMMON 0070                __pidataBANK0 046A  
          ___lbdiv@quotient 0075          __size_of_id_search 001C                  __pbssBANK0 005A  
        __size_of_gpio_init 000F           ??_eepromWriteByte 0073                  __pmaintext 000B  
                   ?___bmul 0072                     ?_comArr 0072                  __pintentry 0004  
                _id_replate 037D                     _EPWMR1L 0013                   ?_get_RFID 0070  
                 ?_id_clear 0043                     _PWM1CON 0016    __end_of_eepromWriteBlock 053C  
                   _PSTRCON 019D                     _STRSYNC 0CEC                   ?_int_init 0070  
  get_RFID@RF_serial_55bits 003F                     _PwInNum 005E           __end_of_id_search 04E0  
               setState@stt 0074                     _SendNum 03E0        __size_of_SET_EPWM_ON 0018  
                 ?_setState 0072                   ?_timerOut 0072             __size_of___bmul 000E  
                   ___lbdiv 04E0             __size_of_comArr 001F                     _buffTag 0026  
                   beep@rep 0075           __end_of_gpio_init 059E                   ?_sys_init 0070  
         ?_swUartSendString 0070                __size_of_ISR 0011                     _mtState 005F  
        ??_swUartSendString 0075                     comArr@i 0079                  ??_get_RFID 0077  
                ??_id_clear 007C                     _timeOut 005A                  comArr@arr1 0078  
                comArr@arr2 0072                  comArr@len1 0073                  comArr@len2 0074  
                   main@tmp 0059        end_of_initialization 0528               ??_delay_x10ms 0072  
                   init_ram 0584                  get_RFID@ii 0052                  ??_int_init 0072  
                ??_setState 0074         eepromWriteBlock@len 0077                  ??_timerOut 0074  
     get_RFID@flag_RFID_syn 004A                  id_search@i 0040                  _timer_init 05DB  
               ?_id_replate 003F                  ??_sys_init 0072             _eepromReadBlock 054E  
   __size_of_swUartSendByte 0028         __end_of_delay_x10ms 0580              __end_of___bmul 05AC  
            __end_of_comArr 04A8     __size_of_eepromReadByte 0009        eepromReadByte@EEAddr 0072  
       start_initialization 0513                 __end_of_ISR 0570             _eepromWriteByte 0406  
             setState@_tOut 0072  eepromReadByte@ReEepromData 0073         __size_of_id_replate 0034  
                  ??___bmul 0073                    ??_comArr 0075                 __pdataBANK0 0020  
   __end_of_eepromReadBlock 055F                 ?_timer_init 0070          eepromReadBlock@len 0075  
             __pcstackBANK0 003F               id_clear@idMax 0043               id_clear@idMin 0049  
         ?_eepromWriteBlock 0076           __size_of_get_RFID 0136           __size_of_id_clear 0020  
        ??_eepromWriteBlock 0078                 _delay_x10ms 0570                    ?_SendNum 0070  
         __size_of_int_init 0012                    ?___lbdiv 0072           __size_of_setState 000B  
                 __ptext570 044A                   __ptext571 037D                   __ptext580 0406  
                 __ptext572 03E0                   __ptext581 054E                   __ptext573 05B9  
                 __ptext590 053C                   __ptext582 05D1                   __ptext574 04A8  
                 __ptext591 05DB                   __ptext583 04E0                   __ptext575 052A  
                 __ptext592 058F                   __ptext584 059E                   __ptext576 03B8  
                 __ptext593 055F                   __ptext585 05C6                   __ptext577 04C4  
                 __ptext594 0000                   __ptext586 04FB                   __ptext578 0570  
                 __ptext587 0429                   __ptext579 0230                   __ptext588 0489  
                 __ptext589 05E5                   _id_search 04C4                   beep@delay 0076  
              _SendNum$4581 0075                _SendNum$4582 0077           __size_of_timerOut 0021  
                 __pstrings 05AC                   __pswtext1 05EE     __end_of_eepromWriteByte 0429  
         __size_of_sys_init 000A                   _gpio_init 058F                    _EPWM1CON 0015  
                  _EPWM1AUX 0090   __size_of_swUartSendString 000D           interrupt_function 0004  
             ??_SET_EPWM_ON 0072         __size_of_timer_init 000A                   get_RFID@i 004E  
                 get_RFID@j 004D              _swUartSendByte 03B8                  ?_id_search 007A  
              delay_x10ms@t 0074            timerOut@CurTimer 0075              _eepromReadByte 05E5  
          ?_eepromReadBlock 0074                ??_id_replate 0041                 __stringbase 05B1  
                ?_gpio_init 0070      __end_of_swUartSendByte 03E0          __end_of_id_replate 03B1  
          __size_of_SendNum 0026                   init_fetch 0580         __end_of_SET_EPWM_ON 0513  
            id_replate@Cont 003F      __end_of_eepromReadByte 05EE                id_clear@F971 0020  
          __size_of___lbdiv 001B              id_replate@buff 0040           id_search@id_input 003F  
          ?_eepromWriteByte 0072     eepromReadBlock@addStart 0077                    _get_RFID 0230  
                  _id_clear 044A               __size_of_beep 001C             ?_swUartSendByte 0070  
             __size_of_main 0225                    _int_init 053C               id_search@buff 007A  
                  _setState 05C6           eepromWriteBlock@i 007A                    _timeTick 005C  
                  _timerOut 0429                 ??_id_search 007B             ?_eepromReadByte 0070  
                  main@idop 0058                ??_timer_init 0072                    _sys_init 05D1  
  eepromWriteBlock@addStart 0079                 ??_gpio_init 0072                 id_clear@tmp 0044  
                  intlevel1 0000            _swUartSendString 05B9                ?_delay_x10ms 0070  
               _SET_EPWM_ON 04FB          __end_of_timer_init 05E5                   stringcode 05AC  
      eepromWriteBlock@buff 0076   __size_of_eepromWriteBlock 0012       eepromWriteByte@EEAddr 0075  
     eepromWriteByte@EEData 0072      get_RFID@flag_RFID_last 004F           swUartSendByte@dat 0073  
              id_replate@id 007B         swUartSendString@str 0075                    stringdir 05AC  
                  stringtab 05AC               timerOut@Logic 0074             swUartSendByte@i 0074  
              timerOut@time 0072  
