

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Fri Dec 27 12:49:25 2019

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F685
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,delta=2
    13                           	psect	swtext1,local,class=CONST,delta=2
    14                           	psect	text570,local,class=CODE,delta=2
    15                           	psect	text571,local,class=CODE,delta=2
    16                           	psect	text572,local,class=CODE,delta=2
    17                           	psect	text573,local,class=CODE,delta=2
    18                           	psect	text574,local,class=CODE,delta=2
    19                           	psect	text575,local,class=CODE,delta=2
    20                           	psect	text576,local,class=CODE,delta=2
    21                           	psect	text577,local,class=CODE,delta=2
    22                           	psect	text578,local,class=CODE,delta=2
    23                           	psect	text579,local,class=CODE,delta=2
    24                           	psect	text580,local,class=CODE,delta=2
    25                           	psect	text581,local,class=CODE,delta=2
    26                           	psect	text582,local,class=CODE,delta=2
    27                           	psect	text583,local,class=CODE,delta=2
    28                           	psect	text584,local,class=CODE,delta=2
    29                           	psect	text585,local,class=CODE,delta=2
    30                           	psect	text586,local,class=CODE,delta=2
    31                           	psect	text587,local,class=CODE,delta=2
    32                           	psect	text588,local,class=CODE,delta=2
    33                           	psect	text589,local,class=CODE,delta=2
    34                           	psect	text590,local,class=CODE,delta=2
    35                           	psect	text591,local,class=CODE,delta=2
    36                           	psect	text592,local,class=CODE,delta=2
    37                           	psect	text593,local,class=CODE,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text594,local,class=CODE,delta=2
    40                           	psect	pa_nodes,global,class=CODE,delta=2
    41                           	dabs	1,0x19D,1
    42                           	dabs	1,0x19E,1
    43                           	dabs	1,0x19E,1
    44                           	dabs	1,0x19E,1
    45                           	dabs	1,0x18C,1
    46                           	dabs	1,0x19E,1
    47                           	dabs	1,0x19E,1
    48                           	dabs	1,0x19E,1
    49                           	dabs	1,0x19E,1
    50                           	dabs	1,0x19D,1
    51                           	dabs	1,0x19D,1
    52                           	dabs	1,0x19D,1
    53                           	dabs	1,0x19D,1
    54                           	dabs	1,0x19D,1
    55                           	dabs	1,0x18C,1
    56                           	dabs	1,0x7E,2
    57  000A                     
    58                           	psect	idataBANK0
    59  0466                     __pidataBANK0:	
    60                           
    61                           ;initializer for id_clear@F971
    62  0466  34FF               	retlw	255
    63  0467  34FF               	retlw	255
    64  0468  34FF               	retlw	255
    65  0469  34FF               	retlw	255
    66  046A  34FF               	retlw	255
    67                           
    68                           ;initializer for _buzFre
    69  046B  340C               	retlw	12
    70                           
    71                           ;initializer for _buffTag
    72  046C  3400               	retlw	0
    73  046D  3400               	retlw	0
    74  046E  3411               	retlw	17
    75  046F  340B               	retlw	11
    76  0470  344F               	retlw	79
    77  0471  3400               	retlw	0
    78  0472  3400               	retlw	0
    79  0473  3481               	retlw	129
    80  0474  342F               	retlw	47
    81  0475  3422               	retlw	34
    82  0476  3400               	retlw	0
    83  0477  3400               	retlw	0
    84  0478  347D               	retlw	125
    85  0479  3467               	retlw	103
    86  047A  3405               	retlw	5
    87  047B  3400               	retlw	0
    88  047C  3400               	retlw	0
    89  047D  347E               	retlw	126
    90  047E  3431               	retlw	49
    91  047F  34E7               	retlw	231
    92  0480  3400               	retlw	0
    93  0481  3400               	retlw	0
    94  0482  347E               	retlw	126
    95  0483  3451               	retlw	81
    96  0484  34E6               	retlw	230
    97  019D                     _PSTRCON	set	413	;_PSTRCON
    98  019E                     _SRCON	set	414	;_SRCON
    99  0CF5                     _C1SEN	set	3317	;_C1SEN
   100  0CF4                     _C2REN	set	3316	;_C2REN
   101  0C67                     _EEPGD	set	3175	;_EEPGD
   102  0CF2                     _PULSR	set	3314	;_PULSR
   103  0CF3                     _PULSS	set	3315	;_PULSS
   104  0CF6                     _SR0	set	3318	;_SR0
   105  0CF7                     _SR1	set	3319	;_SR1
   106  0CE8                     _STRA	set	3304	;_STRA
   107  0CE9                     _STRB	set	3305	;_STRB
   108  0CEA                     _STRC	set	3306	;_STRC
   109  0CEB                     _STRD	set	3307	;_STRD
   110  0CEC                     _STRSYNC	set	3308	;_STRSYNC
   111  0C62                     _WREN	set	3170	;_WREN
   112  0015                     _EPWM1CON	set	21
   113  0013                     _EPWMR1L	set	19
   114  000B                     _INTCON	set	11
   115  000C                     _PIR1	set	12
   116  0005                     _PORTA	set	5
   117  0007                     _PORTC	set	7
   118  0016                     _PWM1CON	set	22
   119  0010                     _T1CON	set	16
   120  0012                     _T2CON	set	18
   121  0001                     _TMR0	set	1
   122  000F                     _TMR1H	set	15
   123  000E                     _TMR1L	set	14
   124  0011                     _TMR2	set	17
   125  0067                     _EEIF	set	103
   126  005F                     _GIE	set	95
   127  005E                     _PEIE	set	94
   128  002A                     _RA2	set	42
   129  002B                     _RA3	set	43
   130  002C                     _RA4	set	44
   131  0038                     _RC0	set	56
   132  0039                     _RC1	set	57
   133  005D                     _T0IE	set	93
   134  005A                     _T0IF	set	90
   135  0060                     _TMR1IF	set	96
   136  0080                     _TMR1ON	set	128
   137  0061                     _TMR2IF	set	97
   138  009B                     _EEADR	set	155
   139  009C                     _EECON1	set	156
   140  009A                     _EEDAT	set	154
   141  0090                     _EPWM1AUX	set	144
   142  0081                     _OPTION	set	129
   143  008F                     _OSCCON	set	143
   144  008C                     _PIE1	set	140
   145  0092                     _PR2	set	146
   146  0085                     _TRISA	set	133
   147  0087                     _TRISC	set	135
   148  0095                     _WPUA	set	149
   149  0088                     _WPUC	set	136
   150  047A                     _HTS	set	1146
   151  04E0                     _RD	set	1248
   152  0460                     _TMR1IE	set	1120
   153  0461                     _TMR2IE	set	1121
   154  04E8                     _WR	set	1256
   155                           
   156                           	psect	strings
   157  05A8                     __pstrings:	
   158  05A8                     stringtab:	
   159                           ;	global	stringdir,stringtab,__stringbase
   160                           
   161  05A8                     stringcode:	
   162                           ;	String table - string pointers are 1 byte each
   163                           
   164  05A8                     stringdir:	
   165  05A8  3005               	movlw	high stringdir
   166  05A9  008A               	movwf	10
   167  05AA  0804               	movf	4,w
   168  05AB  0A84               	incf	4,f
   169  05AC  0782               	addwf	2,f
   170  05AD                     __stringbase:	
   171  05AD  3400               	retlw	0
   172  05AE                     STR_1:	
   173  05AE  340A               	retlw	10
   174  05AF  3454               	retlw	84	;'T'
   175  05B0  3461               	retlw	97	;'a'
   176  05B1  3467               	retlw	103	;'g'
   177  05B2  343A               	retlw	58	;':'
   178  05B3  3420               	retlw	32	;' '
   179  05B4  3400               	retlw	0
   180                           
   181                           	psect	cinit
   182  050F                     start_initialization:	
   183  050F  303F               	movlw	low (__pdataBANK0+31)
   184                           
   185                           ; Clear objects allocated to BANK0
   186  0510  01DA               	clrf	__pbssBANK0& (0+127)
   187  0511  01DB               	clrf	(__pbssBANK0+1)& (0+127)
   188  0512  01DC               	clrf	(__pbssBANK0+2)& (0+127)
   189  0513  01DD               	clrf	(__pbssBANK0+3)& (0+127)
   190  0514  01DE               	clrf	(__pbssBANK0+4)& (0+127)
   191  0515  01DF               	clrf	(__pbssBANK0+5)& (0+127)
   192  0516  01E0               	clrf	(__pbssBANK0+6)& (0+127)
   193  0517  01E1               	clrf	(__pbssBANK0+7)& (0+127)
   194  0518  01E2               	clrf	(__pbssBANK0+8)& (0+127)
   195  0519  01E3               	clrf	(__pbssBANK0+9)& (0+127)
   196  051A  01E4               	clrf	(__pbssBANK0+10)& (0+127)
   197                           
   198                           ; Initialize objects allocated to BANK0
   199  051B  1383               	bcf	3,7	;select IRP bank0
   200  051C  00FD               	movwf	125
   201  051D  3004               	movlw	high __pidataBANK0
   202  051E  00FE               	movwf	126
   203  051F  3066               	movlw	low __pidataBANK0
   204  0520  00FF               	movwf	127
   205  0521  3020               	movlw	low __pdataBANK0
   206  0522  0084               	movwf	4
   207  0523  2580               	fcall	init_ram
   208  0524                     end_of_initialization:	
   209                           ;End of C runtime variable initialization code
   210                           
   211  0524  0183               	clrf	3
   212  0525  280B               	ljmp	_main	;jump to C main() function
   213                           
   214                           	psect	bssBANK0
   215  005A                     __pbssBANK0:	
   216  005A                     _timeOut:	
   217  005A                     	ds	2
   218  005C                     _timeTick:	
   219  005C                     	ds	2
   220  005E                     _PwInNum:	
   221  005E                     	ds	1
   222  005F                     _mtState:	
   223  005F                     	ds	1
   224  0060                     _keyID:	
   225  0060                     	ds	5
   226                           
   227                           	psect	dataBANK0
   228  0020                     __pdataBANK0:	
   229  0020                     id_clear@F971:	
   230  0020                     	ds	5
   231  0025                     _buzFre:	
   232  0025                     	ds	1
   233  0026                     _buffTag:	
   234  0026                     	ds	25
   235                           
   236                           	psect	inittext
   237  057C                     init_fetch:	
   238                           ;	Called with low address in FSR and high address in W
   239                           
   240  057C  087E               	movf	126,w
   241  057D  008A               	movwf	10
   242  057E  087F               	movf	127,w
   243  057F  0082               	movwf	2
   244  0580                     init_ram:	
   245                           ;Called with:
   246                           ;	high address of idata address in btemp 
   247                           ;	low address of idata address in btemp+1 
   248                           ;	low address of data in FSR
   249                           ;	high address + 1 of data in btemp-1
   250                           
   251  0580  257C               	fcall	init_fetch
   252  0581  0080               	movwf	0
   253  0582  0A84               	incf	4,f
   254  0583  0804               	movf	4,w
   255  0584  067D               	xorwf	125,w
   256  0585  1903               	btfsc	3,2
   257  0586  3400               	retlw	0
   258  0587  0AFF               	incf	127,f
   259  0588  1903               	btfsc	3,2
   260  0589  0AFE               	incf	126,f
   261  058A  2D80               	goto	init_ram
   262                           
   263                           	psect	cstackCOMMON
   264  0070                     __pcstackCOMMON:	
   265  0070                     ?_swUartSendString:	
   266  0070                     ?_SendNum:	
   267                           ; 0 bytes @ 0x0
   268                           
   269  0070                     ?_sys_init:	
   270                           ; 0 bytes @ 0x0
   271                           
   272  0070                     ?_gpio_init:	
   273                           ; 0 bytes @ 0x0
   274                           
   275  0070                     ?_timer_init:	
   276                           ; 0 bytes @ 0x0
   277                           
   278  0070                     ?_int_init:	
   279                           ; 0 bytes @ 0x0
   280                           
   281  0070                     ?_SET_EPWM_ON:	
   282                           ; 0 bytes @ 0x0
   283                           
   284  0070                     ?_delay_x10ms:	
   285                           ; 0 bytes @ 0x0
   286                           
   287  0070                     ?_ISR:	
   288                           ; 0 bytes @ 0x0
   289                           
   290  0070                     ??_ISR:	
   291                           ; 0 bytes @ 0x0
   292                           
   293  0070                     ?_main:	
   294                           ; 0 bytes @ 0x0
   295                           
   296  0070                     ?_swUartSendByte:	
   297                           ; 0 bytes @ 0x0
   298                           
   299  0070                     ?_eepromReadByte:	
   300                           ; 0 bytes @ 0x0
   301                           
   302  0070                     ?_get_RFID:	
   303                           ; 1 bytes @ 0x0
   304                           
   305                           
   306                           ; 1 bytes @ 0x0
   307  0070                     	ds	2
   308  0072                     ??_sys_init:	
   309  0072                     ??_gpio_init:	
   310                           ; 0 bytes @ 0x2
   311                           
   312  0072                     ??_timer_init:	
   313                           ; 0 bytes @ 0x2
   314                           
   315  0072                     ??_int_init:	
   316                           ; 0 bytes @ 0x2
   317                           
   318  0072                     ??_eepromReadByte:	
   319                           ; 0 bytes @ 0x2
   320                           
   321  0072                     ?_eepromWriteByte:	
   322                           ; 0 bytes @ 0x2
   323                           
   324  0072                     ??_SET_EPWM_ON:	
   325                           ; 0 bytes @ 0x2
   326                           
   327  0072                     ??_delay_x10ms:	
   328                           ; 0 bytes @ 0x2
   329                           
   330  0072                     ?_setState:	
   331                           ; 0 bytes @ 0x2
   332                           
   333  0072                     ??_swUartSendByte:	
   334                           ; 0 bytes @ 0x2
   335                           
   336  0072                     ?_comArr:	
   337                           ; 0 bytes @ 0x2
   338                           
   339  0072                     ?___bmul:	
   340                           ; 1 bytes @ 0x2
   341                           
   342  0072                     ?___lbdiv:	
   343                           ; 1 bytes @ 0x2
   344                           
   345  0072                     ?_timerOut:	
   346                           ; 1 bytes @ 0x2
   347                           
   348  0072                     eepromReadByte@EEAddr:	
   349                           ; 2 bytes @ 0x2
   350                           
   351  0072                     eepromWriteByte@EEData:	
   352                           ; 1 bytes @ 0x2
   353                           
   354  0072                     comArr@arr2:	
   355                           ; 1 bytes @ 0x2
   356                           
   357  0072                     ___bmul@multiplicand:	
   358                           ; 1 bytes @ 0x2
   359                           
   360  0072                     ___lbdiv@divisor:	
   361                           ; 1 bytes @ 0x2
   362                           
   363  0072                     timerOut@time:	
   364                           ; 1 bytes @ 0x2
   365                           
   366  0072                     setState@_tOut:	
   367                           ; 2 bytes @ 0x2
   368                           
   369                           
   370                           ; 2 bytes @ 0x2
   371  0072                     	ds	1
   372  0073                     ??_eepromWriteByte:	
   373  0073                     ??___bmul:	
   374                           ; 0 bytes @ 0x3
   375                           
   376  0073                     ??___lbdiv:	
   377                           ; 0 bytes @ 0x3
   378                           
   379  0073                     eepromReadByte@ReEepromData:	
   380                           ; 0 bytes @ 0x3
   381                           
   382  0073                     comArr@len1:	
   383                           ; 1 bytes @ 0x3
   384                           
   385  0073                     swUartSendByte@dat:	
   386                           ; 1 bytes @ 0x3
   387                           
   388  0073                     ___bmul@product:	
   389                           ; 1 bytes @ 0x3
   390                           
   391  0073                     ___lbdiv@dividend:	
   392                           ; 1 bytes @ 0x3
   393                           
   394                           
   395                           ; 1 bytes @ 0x3
   396  0073                     	ds	1
   397  0074                     ?_eepromReadBlock:	
   398  0074                     ??_timerOut:	
   399                           ; 0 bytes @ 0x4
   400                           
   401  0074                     ??_setState:	
   402                           ; 0 bytes @ 0x4
   403                           
   404  0074                     eepromReadBlock@buff:	
   405                           ; 0 bytes @ 0x4
   406                           
   407  0074                     comArr@len2:	
   408                           ; 1 bytes @ 0x4
   409                           
   410  0074                     timerOut@Logic:	
   411                           ; 1 bytes @ 0x4
   412                           
   413  0074                     delay_x10ms@t:	
   414                           ; 1 bytes @ 0x4
   415                           
   416  0074                     setState@stt:	
   417                           ; 1 bytes @ 0x4
   418                           
   419  0074                     swUartSendByte@i:	
   420                           ; 1 bytes @ 0x4
   421                           
   422  0074                     ___bmul@multiplier:	
   423                           ; 1 bytes @ 0x4
   424                           
   425  0074                     ___lbdiv@counter:	
   426                           ; 1 bytes @ 0x4
   427                           
   428                           
   429                           ; 1 bytes @ 0x4
   430  0074                     	ds	1
   431  0075                     ??_swUartSendString:	
   432  0075                     ??_SendNum:	
   433                           ; 0 bytes @ 0x5
   434                           
   435  0075                     ??_comArr:	
   436                           ; 0 bytes @ 0x5
   437                           
   438  0075                     ?_beep:	
   439                           ; 0 bytes @ 0x5
   440                           
   441  0075                     eepromReadBlock@len:	
   442                           ; 0 bytes @ 0x5
   443                           
   444  0075                     eepromWriteByte@EEAddr:	
   445                           ; 1 bytes @ 0x5
   446                           
   447  0075                     beep@rep:	
   448                           ; 1 bytes @ 0x5
   449                           
   450  0075                     swUartSendString@str:	
   451                           ; 1 bytes @ 0x5
   452                           
   453  0075                     ___lbdiv@quotient:	
   454                           ; 1 bytes @ 0x5
   455                           
   456  0075                     timerOut@CurTimer:	
   457                           ; 1 bytes @ 0x5
   458                           
   459  0075                     _SendNum$4581:	
   460                           ; 2 bytes @ 0x5
   461                           
   462                           
   463                           ; 2 bytes @ 0x5
   464  0075                     	ds	1
   465  0076                     ??_eepromReadBlock:	
   466  0076                     ?_eepromWriteBlock:	
   467                           ; 0 bytes @ 0x6
   468                           
   469  0076                     ??_beep:	
   470                           ; 0 bytes @ 0x6
   471                           
   472  0076                     eepromWriteBlock@buff:	
   473                           ; 0 bytes @ 0x6
   474                           
   475  0076                     beep@delay:	
   476                           ; 1 bytes @ 0x6
   477                           
   478                           
   479                           ; 1 bytes @ 0x6
   480  0076                     	ds	1
   481  0077                     ??_get_RFID:	
   482  0077                     eepromReadBlock@addStart:	
   483                           ; 0 bytes @ 0x7
   484                           
   485  0077                     eepromWriteBlock@len:	
   486                           ; 1 bytes @ 0x7
   487                           
   488  0077                     _SendNum$4582:	
   489                           ; 1 bytes @ 0x7
   490                           
   491                           
   492                           ; 2 bytes @ 0x7
   493  0077                     	ds	1
   494  0078                     ??_eepromWriteBlock:	
   495  0078                     eepromReadBlock@i:	
   496                           ; 0 bytes @ 0x8
   497                           
   498  0078                     comArr@arr1:	
   499                           ; 1 bytes @ 0x8
   500                           
   501                           
   502                           ; 1 bytes @ 0x8
   503  0078                     	ds	1
   504  0079                     eepromWriteBlock@addStart:	
   505  0079                     comArr@i:	
   506                           ; 1 bytes @ 0x9
   507                           
   508  0079                     SendNum@num:	
   509                           ; 1 bytes @ 0x9
   510                           
   511                           
   512                           ; 1 bytes @ 0x9
   513  0079                     	ds	1
   514  007A                     ?_id_search:	
   515  007A                     eepromWriteBlock@i:	
   516                           ; 1 bytes @ 0xA
   517                           
   518  007A                     id_search@buff:	
   519                           ; 1 bytes @ 0xA
   520                           
   521  007A                     SendNum@nib:	
   522                           ; 1 bytes @ 0xA
   523                           
   524                           
   525                           ; 1 bytes @ 0xA
   526  007A                     	ds	1
   527  007B                     ??_id_search:	
   528  007B                     id_replate@id:	
   529                           ; 0 bytes @ 0xB
   530                           
   531                           
   532                           ; 1 bytes @ 0xB
   533  007B                     	ds	1
   534  007C                     ??_id_clear:	
   535                           
   536                           	psect	cstackBANK0
   537  003F                     __pcstackBANK0:	
   538                           ; 0 bytes @ 0xC
   539                           
   540  003F                     ?_id_replate:	
   541  003F                     id_search@id_input:	
   542                           ; 0 bytes @ 0x0
   543                           
   544  003F                     id_replate@Cont:	
   545                           ; 1 bytes @ 0x0
   546                           
   547  003F                     get_RFID@RF_serial_55bits:	
   548                           ; 1 bytes @ 0x0
   549                           
   550                           
   551                           ; 11 bytes @ 0x0
   552  003F                     	ds	1
   553  0040                     id_search@i:	
   554  0040                     id_replate@buff:	
   555                           ; 1 bytes @ 0x1
   556                           
   557                           
   558                           ; 1 bytes @ 0x1
   559  0040                     	ds	1
   560  0041                     ??_id_replate:	
   561                           
   562                           ; 0 bytes @ 0x2
   563  0041                     	ds	2
   564  0043                     ?_id_clear:	
   565  0043                     id_clear@idMax:	
   566                           ; 0 bytes @ 0x4
   567                           
   568                           
   569                           ; 1 bytes @ 0x4
   570  0043                     	ds	1
   571  0044                     id_clear@tmp:	
   572                           
   573                           ; 5 bytes @ 0x5
   574  0044                     	ds	5
   575  0049                     id_clear@idMin:	
   576                           
   577                           ; 1 bytes @ 0xA
   578  0049                     	ds	1
   579  004A                     get_RFID@flag_RFID_syn:	
   580                           
   581                           ; 1 bytes @ 0xB
   582  004A                     	ds	1
   583  004B                     get_RFID@even_col:	
   584                           
   585                           ; 1 bytes @ 0xC
   586  004B                     	ds	1
   587  004C                     get_RFID@even_row:	
   588                           
   589                           ; 1 bytes @ 0xD
   590  004C                     	ds	1
   591  004D                     get_RFID@j:	
   592                           
   593                           ; 1 bytes @ 0xE
   594  004D                     	ds	1
   595  004E                     get_RFID@i:	
   596                           
   597                           ; 1 bytes @ 0xF
   598  004E                     	ds	1
   599  004F                     get_RFID@flag_RFID_last:	
   600                           
   601                           ; 1 bytes @ 0x10
   602  004F                     	ds	1
   603  0050                     get_RFID@timeOutVal:	
   604                           
   605                           ; 2 bytes @ 0x11
   606  0050                     	ds	2
   607  0052                     get_RFID@ii:	
   608                           
   609                           ; 1 bytes @ 0x13
   610  0052                     	ds	1
   611  0053                     ??_main:	
   612                           
   613                           ; 0 bytes @ 0x14
   614  0053                     	ds	3
   615  0056                     main@t1:	
   616                           
   617                           ; 1 bytes @ 0x17
   618  0056                     	ds	1
   619  0057                     main@idState:	
   620                           
   621                           ; 1 bytes @ 0x18
   622  0057                     	ds	1
   623  0058                     main@idop:	
   624                           
   625                           ; 1 bytes @ 0x19
   626  0058                     	ds	1
   627  0059                     main@tmp:	
   628                           
   629                           ; 1 bytes @ 0x1A
   630  0059                     	ds	1
   631                           
   632                           	psect	maintext
   633  000B                     __pmaintext:	
   634 ;;Data sizes: Strings 7, constant 0, data 31, bss 11, persistent 0 stack 0
   635 ;;Auto spaces:   Size  Autos    Used
   636 ;; COMMON          14     12      12
   637 ;; BANK0           80     27      69
   638 ;; BANK1           32      0       0
   639 ;;
   640 ;; Pointer list with targets:
   641 ;; ?_timerOut	unsigned int  size(1) Largest target is 0
   642 ;;
   643 ;; swUartSendString@str	PTR unsigned char  size(1) Largest target is 7
   644 ;;		 -> STR_1(CODE[7]), 
   645 ;;
   646 ;; id_replate@Cont	PTR unsigned char  size(1) Largest target is 5
   647 ;;		 -> id_clear@tmp(BANK0[5]), keyID(BANK0[5]), 
   648 ;;
   649 ;; id_replate@buff	PTR unsigned char  size(1) Largest target is 25
   650 ;;		 -> buffTag(BANK0[25]), 
   651 ;;
   652 ;; id_search@buff	PTR unsigned char  size(1) Largest target is 25
   653 ;;		 -> buffTag(BANK0[25]), 
   654 ;;
   655 ;; id_search@id_input	PTR unsigned char  size(1) Largest target is 5
   656 ;;		 -> keyID(BANK0[5]), 
   657 ;;
   658 ;; comArr@arr2	PTR unsigned char  size(1) Largest target is 25
   659 ;;		 -> buffTag(BANK0[25]), 
   660 ;;
   661 ;; comArr@arr1	PTR unsigned char  size(1) Largest target is 5
   662 ;;		 -> keyID(BANK0[5]), 
   663 ;;
   664 ;; eepromWriteBlock@buff	PTR unsigned char  size(1) Largest target is 25
   665 ;;		 -> buffTag(BANK0[25]), 
   666 ;;
   667 ;; eepromReadBlock@buff	PTR unsigned char  size(1) Largest target is 25
   668 ;;		 -> buffTag(BANK0[25]), 
   669 ;;
   670 ;;
   671 ;; Critical Paths under _main in COMMON
   672 ;;
   673 ;;   _main->_id_search
   674 ;;   _main->_id_replate
   675 ;;   _id_clear->_id_replate
   676 ;;   _id_replate->_eepromWriteBlock
   677 ;;   _SendNum->_swUartSendByte
   678 ;;   _swUartSendString->_swUartSendByte
   679 ;;   _beep->_delay_x10ms
   680 ;;   _eepromWriteBlock->_eepromWriteByte
   681 ;;   _id_search->_comArr
   682 ;;   _get_RFID->_timerOut
   683 ;;   _eepromReadBlock->_eepromReadByte
   684 ;;
   685 ;; Critical Paths under _ISR in COMMON
   686 ;;
   687 ;;   None.
   688 ;;
   689 ;; Critical Paths under _main in BANK0
   690 ;;
   691 ;;   _main->_get_RFID
   692 ;;   _id_clear->_id_replate
   693 ;;
   694 ;; Critical Paths under _ISR in BANK0
   695 ;;
   696 ;;   None.
   697 ;;
   698 ;; Critical Paths under _main in BANK1
   699 ;;
   700 ;;   None.
   701 ;;
   702 ;; Critical Paths under _ISR in BANK1
   703 ;;
   704 ;;   None.
   705 ;;
   706 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   707 ;;
   708 ;;
   709 ;;Call Graph Tables:
   710 ;;
   711 ;; ---------------------------------------------------------------------------------
   712 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   713 ;; ---------------------------------------------------------------------------------
   714 ;; (0) _main                                                 7     7      0    5135
   715 ;;                                             20 BANK0      7     7      0
   716 ;;                           _sys_init
   717 ;;                          _gpio_init
   718 ;;                         _timer_init
   719 ;;                           _int_init
   720 ;;                    _eepromWriteByte
   721 ;;                        _SET_EPWM_ON
   722 ;;                     _eepromReadByte
   723 ;;                    _eepromReadBlock
   724 ;;                           _setState
   725 ;;                               _beep
   726 ;;                           _get_RFID
   727 ;;                   _swUartSendString
   728 ;;                            _SendNum
   729 ;;                          _id_search
   730 ;;                           _id_clear
   731 ;;                         _id_replate
   732 ;; ---------------------------------------------------------------------------------
   733 ;; (1) _id_clear                                             7     6      1     718
   734 ;;                                              4 BANK0      7     6      1
   735 ;;                         _id_replate
   736 ;; ---------------------------------------------------------------------------------
   737 ;; (1) _id_replate                                           5     3      2     623
   738 ;;                                             11 COMMON     1     1      0
   739 ;;                                              0 BANK0      4     2      2
   740 ;;                             ___bmul
   741 ;;                   _eepromWriteBlock
   742 ;; ---------------------------------------------------------------------------------
   743 ;; (1) _SendNum                                              6     6      0     300
   744 ;;                                              5 COMMON     6     6      0
   745 ;;                     _swUartSendByte
   746 ;; ---------------------------------------------------------------------------------
   747 ;; (1) _swUartSendString                                     1     1      0     114
   748 ;;                                              5 COMMON     1     1      0
   749 ;;                     _swUartSendByte
   750 ;; ---------------------------------------------------------------------------------
   751 ;; (1) _beep                                                 2     1      1      66
   752 ;;                                              5 COMMON     2     1      1
   753 ;;                        _delay_x10ms
   754 ;; ---------------------------------------------------------------------------------
   755 ;; (2) _eepromWriteBlock                                     5     3      2     178
   756 ;;                                              6 COMMON     5     3      2
   757 ;;                    _eepromWriteByte
   758 ;; ---------------------------------------------------------------------------------
   759 ;; (2) _swUartSendByte                                       3     3      0      69
   760 ;;                                              2 COMMON     3     3      0
   761 ;; ---------------------------------------------------------------------------------
   762 ;; (1) _id_search                                            4     3      1     518
   763 ;;                                             10 COMMON     2     1      1
   764 ;;                                              0 BANK0      2     2      0
   765 ;;                             _comArr
   766 ;;                            ___lbdiv
   767 ;; ---------------------------------------------------------------------------------
   768 ;; (2) _delay_x10ms                                          3     3      0      22
   769 ;;                                              2 COMMON     3     3      0
   770 ;; ---------------------------------------------------------------------------------
   771 ;; (1) _get_RFID                                            21    21      0    1917
   772 ;;                                              7 COMMON     1     1      0
   773 ;;                                              0 BANK0     20    20      0
   774 ;;                           _timerOut
   775 ;;                            ___lbdiv
   776 ;; ---------------------------------------------------------------------------------
   777 ;; (3) _eepromWriteByte                                      4     3      1      44
   778 ;;                                              2 COMMON     4     3      1
   779 ;; ---------------------------------------------------------------------------------
   780 ;; (1) _eepromReadBlock                                      5     3      2     179
   781 ;;                                              4 COMMON     5     3      2
   782 ;;                     _eepromReadByte
   783 ;; ---------------------------------------------------------------------------------
   784 ;; (1) _sys_init                                             0     0      0       0
   785 ;; ---------------------------------------------------------------------------------
   786 ;; (2) ___lbdiv                                              4     3      1     162
   787 ;;                                              2 COMMON     4     3      1
   788 ;; ---------------------------------------------------------------------------------
   789 ;; (2) ___bmul                                               3     2      1      92
   790 ;;                                              2 COMMON     3     2      1
   791 ;; ---------------------------------------------------------------------------------
   792 ;; (1) _setState                                             3     1      2      44
   793 ;;                                              2 COMMON     3     1      2
   794 ;; ---------------------------------------------------------------------------------
   795 ;; (1) _SET_EPWM_ON                                          0     0      0       0
   796 ;; ---------------------------------------------------------------------------------
   797 ;; (2) _timerOut                                             5     3      2      90
   798 ;;                                              2 COMMON     5     3      2
   799 ;; ---------------------------------------------------------------------------------
   800 ;; (2) _comArr                                               8     5      3     222
   801 ;;                                              2 COMMON     8     5      3
   802 ;; ---------------------------------------------------------------------------------
   803 ;; (2) _eepromReadByte                                       2     2      0      45
   804 ;;                                              2 COMMON     2     2      0
   805 ;; ---------------------------------------------------------------------------------
   806 ;; (1) _int_init                                             0     0      0       0
   807 ;; ---------------------------------------------------------------------------------
   808 ;; (1) _timer_init                                           0     0      0       0
   809 ;; ---------------------------------------------------------------------------------
   810 ;; (1) _gpio_init                                            0     0      0       0
   811 ;; ---------------------------------------------------------------------------------
   812 ;; Estimated maximum stack depth 3
   813 ;; ---------------------------------------------------------------------------------
   814 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   815 ;; ---------------------------------------------------------------------------------
   816 ;; (5) _ISR                                                  2     2      0       0
   817 ;;                                              0 COMMON     2     2      0
   818 ;; ---------------------------------------------------------------------------------
   819 ;; Estimated maximum stack depth 5
   820 ;; ---------------------------------------------------------------------------------
   821 ;; Call Graph Graphs:
   822 ;; _main (ROOT)
   823 ;;   _sys_init
   824 ;;   _gpio_init
   825 ;;   _timer_init
   826 ;;   _int_init
   827 ;;   _eepromWriteByte
   828 ;;   _SET_EPWM_ON
   829 ;;   _eepromReadByte
   830 ;;   _eepromReadBlock
   831 ;;     _eepromReadByte
   832 ;;   _setState
   833 ;;   _beep
   834 ;;     _delay_x10ms
   835 ;;   _get_RFID
   836 ;;     _timerOut
   837 ;;     ___lbdiv
   838 ;;   _swUartSendString
   839 ;;     _swUartSendByte
   840 ;;   _SendNum
   841 ;;     _swUartSendByte
   842 ;;   _id_search
   843 ;;     _comArr
   844 ;;     ___lbdiv
   845 ;;   _id_clear
   846 ;;     _id_replate
   847 ;;       ___bmul
   848 ;;       _eepromWriteBlock
   849 ;;         _eepromWriteByte
   850 ;;   _id_replate
   851 ;;     ___bmul
   852 ;;     _eepromWriteBlock
   853 ;;       _eepromWriteByte
   854 ;;
   855 ;; _ISR (ROOT)
   856 ;;
   857 ;; Address spaces:
   858 ;;Name               Size   Autos  Total    Cost      Usage
   859 ;;SFR2                 0      0       0       5        0.0%
   860 ;;BITSFR2              0      0       0       5        0.0%
   861 ;;SFR1                 0      0       0       2        0.0%
   862 ;;BITSFR1              0      0       0       2        0.0%
   863 ;;BANK1               20      0       0       6        0.0%
   864 ;;BITBANK1            20      0       0       5        0.0%
   865 ;;CODE                 0      0       0       0        0.0%
   866 ;;DATA                 0      0      55       8        0.0%
   867 ;;ABS                  0      0      51       7        0.0%
   868 ;;NULL                 0      0       0       0        0.0%
   869 ;;STACK                0      0       4       2        0.0%
   870 ;;BANK0               50     1B      45       4       86.3%
   871 ;;BITBANK0            50      0       0       3        0.0%
   872 ;;SFR0                 0      0       0       1        0.0%
   873 ;;BITSFR0              0      0       0       1        0.0%
   874 ;;COMMON               E      C       C       1       85.7%
   875 ;;BITCOMMON            E      0       0       0        0.0%
   876 ;;EEDATA              80      0       0       0        0.0%
   877                           
   878                           
   879 ;; *************** function _main *****************
   880 ;; Defined at:
   881 ;;		line 153 in file "MAIN.C"
   882 ;; Parameters:    Size  Location     Type
   883 ;;		None
   884 ;; Auto vars:     Size  Location     Type
   885 ;;  tmp             1   26[BANK0 ] unsigned char 
   886 ;;  idop            1   25[BANK0 ] unsigned char 
   887 ;;  idState         1   24[BANK0 ] unsigned char 
   888 ;;  t1              1   23[BANK0 ] unsigned char 
   889 ;; Return value:  Size  Location     Type
   890 ;;		None               void
   891 ;; Registers used:
   892 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   893 ;; Tracked objects:
   894 ;;		On entry : 17F/0
   895 ;;		On exit  : 60/0
   896 ;;		Unchanged: 0/0
   897 ;; Data sizes:     COMMON   BANK0   BANK1
   898 ;;      Params:         0       0       0
   899 ;;      Locals:         0       4       0
   900 ;;      Temps:          0       3       0
   901 ;;      Totals:         0       7       0
   902 ;;Total ram usage:        7 bytes
   903 ;; Hardware stack levels required when called:    5
   904 ;; This function calls:
   905 ;;		_sys_init
   906 ;;		_gpio_init
   907 ;;		_timer_init
   908 ;;		_int_init
   909 ;;		_eepromWriteByte
   910 ;;		_SET_EPWM_ON
   911 ;;		_eepromReadByte
   912 ;;		_eepromReadBlock
   913 ;;		_setState
   914 ;;		_beep
   915 ;;		_get_RFID
   916 ;;		_swUartSendString
   917 ;;		_SendNum
   918 ;;		_id_search
   919 ;;		_id_clear
   920 ;;		_id_replate
   921 ;; This function is called by:
   922 ;;		Startup code after reset
   923 ;; This function uses a non-reentrant model
   924 ;;
   925  000B                     _main:	
   926                           
   927                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   928  000B  3007               	movlw	7	;#
   929  000C  0099               	movwf	25	;#
   930                           
   931                           ;MAIN.C: 160: unsigned char idop,tmp,idState=0;
   932  000D  1283               	bcf	3,5	;RP0=0, select bank0
   933  000E  1303               	bcf	3,6	;RP1=0, select bank0
   934  000F  01D7               	clrf	main@idState
   935  0010  0064               	clrwdt	;#
   936                           
   937                           ;MAIN.C: 164: sys_init();
   938  0011  25CD               	fcall	_sys_init
   939                           
   940                           ;MAIN.C: 165: gpio_init();
   941  0012  258B               	fcall	_gpio_init
   942                           
   943                           ;MAIN.C: 167: timer_init();
   944  0013  25D7               	fcall	_timer_init
   945                           
   946                           ;MAIN.C: 168: int_init();
   947  0014  2538               	fcall	_int_init
   948                           
   949                           ;MAIN.C: 174: eepromWriteByte(0x7F,0xAA);
   950  0015  30AA               	movlw	170
   951  0016  00F2               	movwf	?_eepromWriteByte
   952  0017  307F               	movlw	127
   953  0018  2402               	fcall	_eepromWriteByte
   954                           
   955                           ;MAIN.C: 175: eepromWriteByte(0x7F,0xAA);
   956  0019  30AA               	movlw	170
   957  001A  00F2               	movwf	?_eepromWriteByte
   958  001B  307F               	movlw	127
   959  001C  2402               	fcall	_eepromWriteByte
   960                           
   961                           ;MAIN.C: 178: TRISC &=0xfe;
   962  001D  1683               	bsf	3,5	;RP0=1, select bank1
   963  001E  1303               	bcf	3,6	;RP1=0, select bank1
   964  001F  1007               	bcf	7,0	;volatile
   965                           
   966                           ;MAIN.C: 180: SET_EPWM_ON();
   967  0020  24F7               	fcall	_SET_EPWM_ON
   968                           
   969                           ;MAIN.C: 184: _delay((unsigned long)((20)*(8000000/4000.0)));
   970  0021  3034               	movlw	52
   971  0022  1283               	bcf	3,5	;RP0=0, select bank0
   972  0023  00D4               	movwf	??_main+1
   973  0024  30F1               	movlw	241
   974  0025  00D3               	movwf	??_main
   975  0026                     u2237:	
   976  0026  0BD3               	decfsz	??_main,f
   977  0027  2826               	goto	u2237
   978  0028  0BD4               	decfsz	??_main+1,f
   979  0029  2826               	goto	u2237
   980  002A  282B               	nop2
   981                           
   982                           ;MAIN.C: 189: if(eepromReadByte(0x02) == 0xff) eepromWriteByte(0x02,0);
   983  002B  3002               	movlw	2
   984  002C  25E1               	fcall	_eepromReadByte
   985  002D  3AFF               	xorlw	255
   986  002E  1D03               	skipz
   987  002F  2833               	goto	l6665
   988  0030  3002               	movlw	2
   989  0031  01F2               	clrf	?_eepromWriteByte
   990  0032  2402               	fcall	_eepromWriteByte
   991  0033                     l6665:	
   992                           
   993                           ;MAIN.C: 190: if(eepromReadByte(0x01)==0xff)eepromWriteByte(0x01,0);
   994  0033  3001               	movlw	1
   995  0034  25E1               	fcall	_eepromReadByte
   996  0035  3AFF               	xorlw	255
   997  0036  1D03               	skipz
   998  0037  283B               	goto	l6669
   999  0038  3001               	movlw	1
  1000  0039  01F2               	clrf	?_eepromWriteByte
  1001  003A  2402               	fcall	_eepromWriteByte
  1002  003B                     l6669:	
  1003                           
  1004                           ;MAIN.C: 192: if(eepromReadByte(0x06)!=0){
  1005  003B  3006               	movlw	6
  1006  003C  25E1               	fcall	_eepromReadByte
  1007  003D  3A00               	xorlw	0
  1008  003E  1903               	skipnz
  1009  003F  2852               	goto	l6673
  1010  0040  3006               	movlw	6
  1011                           
  1012                           ;MAIN.C: 196: eepromWriteByte(0x06,0);
  1013  0041  01F2               	clrf	?_eepromWriteByte
  1014  0042  2402               	fcall	_eepromWriteByte
  1015  0043  3007               	movlw	7
  1016                           
  1017                           ;MAIN.C: 197: eepromWriteByte(0x06+1,0);
  1018  0044  01F2               	clrf	?_eepromWriteByte
  1019  0045  2402               	fcall	_eepromWriteByte
  1020                           
  1021                           ;MAIN.C: 198: eepromWriteByte(0x06+2,0x87);
  1022  0046  3087               	movlw	135
  1023  0047  00F2               	movwf	?_eepromWriteByte
  1024  0048  3008               	movlw	8
  1025  0049  2402               	fcall	_eepromWriteByte
  1026                           
  1027                           ;MAIN.C: 199: eepromWriteByte(0x06+3,0x3a);
  1028  004A  303A               	movlw	58
  1029  004B  00F2               	movwf	?_eepromWriteByte
  1030  004C  3009               	movlw	9
  1031  004D  2402               	fcall	_eepromWriteByte
  1032                           
  1033                           ;MAIN.C: 200: eepromWriteByte(0x06+4,0xf8);
  1034  004E  30F8               	movlw	248
  1035  004F  00F2               	movwf	?_eepromWriteByte
  1036  0050  300A               	movlw	10
  1037  0051  2402               	fcall	_eepromWriteByte
  1038  0052                     l6673:	
  1039                           
  1040                           ;MAIN.C: 202: }
  1041                           ;MAIN.C: 203: eepromReadBlock(0x06,buffTag,5*5);
  1042  0052  3026               	movlw	_buffTag& (0+255)
  1043  0053  00F4               	movwf	?_eepromReadBlock
  1044  0054  3019               	movlw	25
  1045  0055  00F5               	movwf	?_eepromReadBlock+1
  1046  0056  3006               	movlw	6
  1047  0057  254A               	fcall	_eepromReadBlock
  1048                           
  1049                           ;MAIN.C: 206: {
  1050                           ;MAIN.C: 207: if( eepromReadByte(0x00) == 7){
  1051  0058  3000               	movlw	0
  1052  0059  25E1               	fcall	_eepromReadByte
  1053  005A  3A07               	xorlw	7
  1054  005B  1D03               	skipz
  1055  005C  28A9               	goto	l6701
  1056                           
  1057                           ;MAIN.C: 208: tmp = eepromReadByte(0x02);
  1058  005D  3002               	movlw	2
  1059  005E  25E1               	fcall	_eepromReadByte
  1060  005F  1283               	bcf	3,5	;RP0=0, select bank0
  1061  0060  00D9               	movwf	main@tmp
  1062                           
  1063                           ;MAIN.C: 209: t1 = tmp;
  1064  0061  00D6               	movwf	main@t1
  1065                           
  1066                           ;MAIN.C: 211: if(t1 == 3){
  1067  0062  3A03               	xorlw	3
  1068  0063  1D03               	skipz
  1069  0064  2899               	goto	l6693
  1070                           
  1071                           ;MAIN.C: 216: if((eepromReadByte(0x03)==8) && (eepromReadByte(0x04)==3)&&(eepromReadByte
      +                          (0x05)==3)){
  1072  0065  3003               	movlw	3
  1073  0066  25E1               	fcall	_eepromReadByte
  1074  0067  3A08               	xorlw	8
  1075  0068  1D03               	skipz
  1076  0069  2880               	goto	l6691
  1077  006A  3004               	movlw	4
  1078  006B  25E1               	fcall	_eepromReadByte
  1079  006C  3A03               	xorlw	3
  1080  006D  1D03               	skipz
  1081  006E  2880               	goto	l6691
  1082  006F  3005               	movlw	5
  1083  0070  25E1               	fcall	_eepromReadByte
  1084  0071  3A03               	xorlw	3
  1085  0072  1D03               	skipz
  1086  0073  2880               	goto	l6691
  1087  0074  3001               	movlw	1
  1088                           
  1089                           ;MAIN.C: 217: eepromWriteByte(0x01,1);
  1090  0075  01F2               	clrf	?_eepromWriteByte
  1091  0076  0AF2               	incf	?_eepromWriteByte,f
  1092  0077  2402               	fcall	_eepromWriteByte
  1093  0078  3000               	movlw	0
  1094                           
  1095                           ;MAIN.C: 218: setState(0,0);
  1096  0079  01F2               	clrf	?_setState
  1097  007A  01F3               	clrf	?_setState+1
  1098  007B  25C2               	fcall	_setState
  1099                           
  1100                           ;MAIN.C: 219: beep(20,2);
  1101  007C  3002               	movlw	2
  1102  007D  00F5               	movwf	?_beep
  1103  007E  3014               	movlw	20
  1104  007F  2888               	goto	L1
  1105  0080                     l6691:	
  1106                           ;MAIN.C: 220: }
  1107                           
  1108                           
  1109                           ;MAIN.C: 221: else{
  1110                           ;MAIN.C: 222: setState(1,45);
  1111  0080  302D               	movlw	45
  1112  0081  00F2               	movwf	?_setState
  1113  0082  3001               	movlw	1
  1114  0083  01F3               	clrf	?_setState+1
  1115  0084  25C2               	fcall	_setState
  1116                           
  1117                           ;MAIN.C: 223: beep(10,5);
  1118  0085  3005               	movlw	5
  1119  0086  00F5               	movwf	?_beep
  1120  0087  300A               	movlw	10
  1121  0088                     L1:	
  1122  0088  24A4               	fcall	_beep
  1123  0089  3000               	movlw	0
  1124                           
  1125                           ;MAIN.C: 224: }
  1126                           ;MAIN.C: 226: eepromWriteByte(0x00,0);
  1127  008A  01F2               	clrf	?_eepromWriteByte
  1128  008B  2402               	fcall	_eepromWriteByte
  1129  008C  3002               	movlw	2
  1130                           
  1131                           ;MAIN.C: 227: eepromWriteByte(0x02,0);
  1132  008D  01F2               	clrf	?_eepromWriteByte
  1133  008E  2402               	fcall	_eepromWriteByte
  1134  008F  3005               	movlw	5
  1135                           
  1136                           ;MAIN.C: 228: eepromWriteByte(0x05,0);
  1137  0090  01F2               	clrf	?_eepromWriteByte
  1138  0091  2402               	fcall	_eepromWriteByte
  1139  0092  3004               	movlw	4
  1140                           
  1141                           ;MAIN.C: 229: eepromWriteByte(0x04,0);
  1142  0093  01F2               	clrf	?_eepromWriteByte
  1143  0094  2402               	fcall	_eepromWriteByte
  1144  0095  3003               	movlw	3
  1145                           
  1146                           ;MAIN.C: 230: eepromWriteByte(0x03,0);
  1147  0096  01F2               	clrf	?_eepromWriteByte
  1148  0097  2402               	fcall	_eepromWriteByte
  1149                           
  1150                           ;MAIN.C: 232: }
  1151  0098  28AE               	goto	l6703
  1152  0099                     l6693:	
  1153                           
  1154                           ;MAIN.C: 233: else{
  1155                           ;MAIN.C: 234: tmp = eepromReadByte(0x02) ;
  1156  0099  3002               	movlw	2
  1157  009A  25E1               	fcall	_eepromReadByte
  1158  009B  1283               	bcf	3,5	;RP0=0, select bank0
  1159  009C  00D9               	movwf	main@tmp
  1160                           
  1161                           ;MAIN.C: 235: tmp++;
  1162  009D  0AD9               	incf	main@tmp,f
  1163                           
  1164                           ;MAIN.C: 236: eepromWriteByte(0x02,tmp);
  1165  009E  0859               	movf	main@tmp,w
  1166  009F  00F2               	movwf	?_eepromWriteByte
  1167  00A0  3002               	movlw	2
  1168  00A1  2402               	fcall	_eepromWriteByte
  1169  00A2  300A               	movlw	10
  1170                           
  1171                           ;MAIN.C: 237: PwInNum=0;
  1172  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  1173  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  1174  00A5  01DE               	clrf	_PwInNum
  1175                           
  1176                           ;MAIN.C: 238: setState(7,10);
  1177  00A6  00F2               	movwf	?_setState
  1178  00A7  3007               	movlw	7
  1179  00A8  28AC               	goto	L2
  1180  00A9                     l6701:	
  1181                           
  1182                           ;MAIN.C: 242: else{
  1183                           ;MAIN.C: 243: setState(1,45);
  1184  00A9  302D               	movlw	45
  1185  00AA  00F2               	movwf	?_setState
  1186  00AB  3001               	movlw	1
  1187  00AC                     L2:	
  1188  00AC  01F3               	clrf	?_setState+1
  1189  00AD  25C2               	fcall	_setState
  1190  00AE                     l6703:	
  1191                           
  1192                           ;MAIN.C: 244: }
  1193                           ;MAIN.C: 246: if(eepromReadByte(0x01)== 1){
  1194  00AE  3001               	movlw	1
  1195  00AF  25E1               	fcall	_eepromReadByte
  1196  00B0  3A01               	xorlw	1
  1197  00B1  1D03               	skipz
  1198  00B2  28B7               	goto	l6707
  1199  00B3  3000               	movlw	0
  1200                           
  1201                           ;MAIN.C: 247: setState(0,0);
  1202  00B4  01F2               	clrf	?_setState
  1203  00B5  01F3               	clrf	?_setState+1
  1204  00B6  25C2               	fcall	_setState
  1205  00B7                     l6707:	
  1206                           
  1207                           ;MAIN.C: 248: }
  1208                           ;MAIN.C: 249: }
  1209                           ;MAIN.C: 254: tmp=0;
  1210  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  1211  00B8  01D9               	clrf	main@tmp
  1212  00B9                     l6709:	
  1213                           
  1214                           ;MAIN.C: 258: idop = get_RFID();
  1215  00B9  222C               	fcall	_get_RFID
  1216  00BA  00D8               	movwf	main@idop
  1217                           
  1218                           ;MAIN.C: 260: if(idop){
  1219  00BB  0858               	movf	main@idop,w
  1220  00BC  1903               	btfsc	3,2
  1221  00BD  29A7               	goto	l6817
  1222                           
  1223                           ;MAIN.C: 261: swUartSendString("\nTag: ");
  1224  00BE  3001               	movlw	(STR_1-__stringbase)& (0+255)
  1225  00BF  25B5               	fcall	_swUartSendString
  1226                           
  1227                           ;MAIN.C: 263: SendNum(keyID[1]);
  1228  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  1229  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  1230  00C2  0861               	movf	_keyID+1,w
  1231  00C3  23DC               	fcall	_SendNum
  1232                           
  1233                           ;MAIN.C: 264: SendNum(keyID[2]);
  1234  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  1235  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  1236  00C6  0862               	movf	_keyID+2,w
  1237  00C7  23DC               	fcall	_SendNum
  1238                           
  1239                           ;MAIN.C: 265: SendNum(keyID[3]);
  1240  00C8  1283               	bcf	3,5	;RP0=0, select bank0
  1241  00C9  1303               	bcf	3,6	;RP1=0, select bank0
  1242  00CA  0863               	movf	_keyID+3,w
  1243  00CB  23DC               	fcall	_SendNum
  1244                           
  1245                           ;MAIN.C: 266: SendNum(keyID[4]);
  1246  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  1247  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  1248  00CE  0864               	movf	_keyID+4,w
  1249  00CF  23DC               	fcall	_SendNum
  1250                           
  1251                           ;MAIN.C: 267: idop = id_search(keyID,buffTag);
  1252  00D0  3026               	movlw	_buffTag& (0+255)
  1253  00D1  00FA               	movwf	?_id_search
  1254  00D2  3060               	movlw	_keyID& (0+255)
  1255  00D3  24C0               	fcall	_id_search
  1256  00D4  00D8               	movwf	main@idop
  1257                           
  1258                           ;MAIN.C: 268: switch (mtState){
  1259  00D5  298E               	goto	l6813
  1260  00D6                     l6723:	
  1261                           
  1262                           ;MAIN.C: 271: case 1:
  1263                           ;MAIN.C: 272: case 2:
  1264                           ;MAIN.C: 274: if((idop>1) && (idop <6))
  1265  00D6  3002               	movlw	2
  1266  00D7  0258               	subwf	main@idop,w
  1267  00D8  1C03               	skipc
  1268  00D9  2901               	goto	l6735
  1269  00DA  3006               	movlw	6
  1270  00DB  0258               	subwf	main@idop,w
  1271  00DC  1803               	skipnc
  1272  00DD  2901               	goto	l6735
  1273                           
  1274                           ;MAIN.C: 275: {
  1275                           ;MAIN.C: 276: if( eepromReadByte(0x00) == 7) eepromWriteByte(0x00,0);
  1276  00DE  3000               	movlw	0
  1277  00DF  25E1               	fcall	_eepromReadByte
  1278  00E0  3A07               	xorlw	7
  1279  00E1  1D03               	skipz
  1280  00E2  28E6               	goto	l6731
  1281  00E3  3000               	movlw	0
  1282  00E4  01F2               	clrf	?_eepromWriteByte
  1283  00E5  2402               	fcall	_eepromWriteByte
  1284  00E6                     l6731:	
  1285                           
  1286                           ;MAIN.C: 277: if(mtState==7){
  1287  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  1288  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  1289  00E8  085F               	movf	_mtState,w
  1290  00E9  3A07               	xorlw	7
  1291  00EA  1D03               	skipz
  1292  00EB  28F8               	goto	l3498
  1293  00EC  3002               	movlw	2
  1294                           
  1295                           ;MAIN.C: 278: eepromWriteByte(0x02,0);
  1296  00ED  01F2               	clrf	?_eepromWriteByte
  1297  00EE  2402               	fcall	_eepromWriteByte
  1298  00EF  3005               	movlw	5
  1299                           
  1300                           ;MAIN.C: 279: eepromWriteByte(0x05,0);
  1301  00F0  01F2               	clrf	?_eepromWriteByte
  1302  00F1  2402               	fcall	_eepromWriteByte
  1303  00F2  3004               	movlw	4
  1304                           
  1305                           ;MAIN.C: 280: eepromWriteByte(0x04,0);
  1306  00F3  01F2               	clrf	?_eepromWriteByte
  1307  00F4  2402               	fcall	_eepromWriteByte
  1308  00F5  3003               	movlw	3
  1309                           
  1310                           ;MAIN.C: 281: eepromWriteByte(0x03,0);
  1311  00F6  01F2               	clrf	?_eepromWriteByte
  1312  00F7  2402               	fcall	_eepromWriteByte
  1313  00F8                     l3498:	
  1314  00F8  3000               	movlw	0
  1315                           
  1316                           ;MAIN.C: 282: }
  1317                           ;MAIN.C: 283: setState(0,0);
  1318  00F9  01F2               	clrf	?_setState
  1319  00FA  01F3               	clrf	?_setState+1
  1320  00FB  25C2               	fcall	_setState
  1321  00FC  300A               	movlw	10
  1322                           
  1323                           ;MAIN.C: 284: beep(10,1);
  1324  00FD  01F5               	clrf	?_beep
  1325  00FE  0AF5               	incf	?_beep,f
  1326  00FF  24A4               	fcall	_beep
  1327                           
  1328                           ;MAIN.C: 285: }
  1329  0100  2999               	goto	l3501
  1330  0101                     l6735:	
  1331                           
  1332                           ;MAIN.C: 287: else if(idop==1)
  1333  0101  0B58               	decfsz	main@idop,w
  1334  0102  2999               	goto	l3501
  1335                           
  1336                           ;MAIN.C: 288: {
  1337                           ;MAIN.C: 290: id_clear(2,5);
  1338  0103  3005               	movlw	5
  1339  0104  00C3               	movwf	?_id_clear
  1340  0105  3002               	movlw	2
  1341  0106  2446               	fcall	_id_clear
  1342  0107  3003               	movlw	3
  1343                           
  1344                           ;MAIN.C: 291: setState(3,0);
  1345  0108  01F2               	clrf	?_setState
  1346  0109  01F3               	clrf	?_setState+1
  1347  010A  25C2               	fcall	_setState
  1348  010B  3003               	movlw	3
  1349                           
  1350                           ;MAIN.C: 292: tmp=1;
  1351  010C  01D9               	clrf	main@tmp
  1352  010D  0AD9               	incf	main@tmp,f
  1353                           
  1354                           ;MAIN.C: 293: beep(10,3);
  1355  010E  00F5               	movwf	?_beep
  1356  010F  300A               	movlw	10
  1357  0110  24A4               	fcall	_beep
  1358  0111  2999               	goto	l3501
  1359  0112                     l6745:	
  1360                           
  1361                           ;MAIN.C: 299: if(idop<=5 && idop!=1 ){
  1362  0112  3006               	movlw	6
  1363  0113  0258               	subwf	main@idop,w
  1364  0114  1803               	skipnc
  1365  0115  2999               	goto	l3501
  1366  0116  0358               	decf	main@idop,w
  1367  0117  1903               	skipnz
  1368  0118  2999               	goto	l3501
  1369                           
  1370                           ;MAIN.C: 300: if(eepromReadByte(0x01)==1){
  1371  0119  3001               	movlw	1
  1372  011A  25E1               	fcall	_eepromReadByte
  1373  011B  3A01               	xorlw	1
  1374  011C  1D03               	skipz
  1375  011D  2999               	goto	l3501
  1376  011E  3001               	movlw	1
  1377                           
  1378                           ;MAIN.C: 301: eepromWriteByte(0x01,0);
  1379  011F  01F2               	clrf	?_eepromWriteByte
  1380  0120  2402               	fcall	_eepromWriteByte
  1381                           
  1382                           ;MAIN.C: 302: beep(10,2);
  1383  0121  3002               	movlw	2
  1384  0122  00F5               	movwf	?_beep
  1385  0123  300A               	movlw	10
  1386  0124  24A4               	fcall	_beep
  1387  0125  2999               	goto	l3501
  1388  0126                     l6755:	
  1389                           
  1390                           ;MAIN.C: 313: if(idop==1 && idState == 0){
  1391  0126  0B58               	decfsz	main@idop,w
  1392  0127  293A               	goto	l6767
  1393  0128  08D7               	movf	main@idState,f
  1394  0129  1D03               	skipz
  1395  012A  293A               	goto	l6767
  1396                           
  1397                           ;MAIN.C: 315: id_clear(2,5);
  1398  012B  3005               	movlw	5
  1399  012C  00C3               	movwf	?_id_clear
  1400  012D  3002               	movlw	2
  1401  012E  2446               	fcall	_id_clear
  1402  012F  3003               	movlw	3
  1403                           
  1404                           ;MAIN.C: 316: setState(3,0);
  1405  0130  01F2               	clrf	?_setState
  1406  0131  01F3               	clrf	?_setState+1
  1407  0132  25C2               	fcall	_setState
  1408  0133  3003               	movlw	3
  1409                           
  1410                           ;MAIN.C: 317: tmp=1;
  1411  0134  01D9               	clrf	main@tmp
  1412  0135  0AD9               	incf	main@tmp,f
  1413                           
  1414                           ;MAIN.C: 318: beep(10,3);
  1415  0136  00F5               	movwf	?_beep
  1416  0137  300A               	movlw	10
  1417  0138  24A4               	fcall	_beep
  1418                           
  1419                           ;MAIN.C: 319: }
  1420  0139  2999               	goto	l3501
  1421  013A                     l6767:	
  1422                           
  1423                           ;MAIN.C: 321: else if(idop==2 && idState == 0){
  1424  013A  0858               	movf	main@idop,w
  1425  013B  3A02               	xorlw	2
  1426  013C  1D03               	skipz
  1427  013D  2999               	goto	l3501
  1428  013E  08D7               	movf	main@idState,f
  1429  013F  1D03               	skipz
  1430  0140  2999               	goto	l3501
  1431                           
  1432                           ;MAIN.C: 323: id_clear(3,5);
  1433  0141  3005               	movlw	5
  1434  0142  00C3               	movwf	?_id_clear
  1435  0143  3003               	movlw	3
  1436  0144  2446               	fcall	_id_clear
  1437  0145  3005               	movlw	5
  1438                           
  1439                           ;MAIN.C: 324: setState(5,0);
  1440  0146  01F2               	clrf	?_setState
  1441  0147  01F3               	clrf	?_setState+1
  1442  0148  25C2               	fcall	_setState
  1443                           
  1444                           ;MAIN.C: 325: tmp=2;
  1445  0149  3002               	movlw	2
  1446  014A  00D9               	movwf	main@tmp
  1447                           
  1448                           ;MAIN.C: 326: beep(10,2);
  1449  014B  00F5               	movwf	?_beep
  1450  014C  300A               	movlw	10
  1451  014D  24A4               	fcall	_beep
  1452  014E  2999               	goto	l3501
  1453  014F                     l6779:	
  1454                           
  1455                           ;MAIN.C: 332: if (idState == 0){
  1456  014F  08D7               	movf	main@idState,f
  1457  0150  1D03               	skipz
  1458  0151  2969               	goto	l6793
  1459                           
  1460                           ;MAIN.C: 339: if( idop !=1){
  1461  0152  0358               	decf	main@idop,w
  1462  0153  1903               	skipnz
  1463  0154  2999               	goto	l3501
  1464  0155  3006               	movlw	6
  1465                           
  1466                           ;MAIN.C: 340: tmp++;
  1467  0156  0AD9               	incf	main@tmp,f
  1468                           
  1469                           ;MAIN.C: 342: if(tmp <=5){
  1470  0157  0259               	subwf	main@tmp,w
  1471  0158  1803               	skipnc
  1472  0159  2999               	goto	l3501
  1473                           
  1474                           ;MAIN.C: 343: id_replate(tmp,keyID,buffTag);
  1475  015A  3060               	movlw	_keyID& (0+255)
  1476  015B  00BF               	movwf	?_id_replate
  1477  015C  3026               	movlw	_buffTag& (0+255)
  1478  015D  00C0               	movwf	?_id_replate+1
  1479  015E  0859               	movf	main@tmp,w
  1480  015F  2379               	fcall	_id_replate
  1481  0160  300A               	movlw	10
  1482                           
  1483                           ;MAIN.C: 344: timeTick=0;
  1484  0161  1283               	bcf	3,5	;RP0=0, select bank0
  1485  0162  1303               	bcf	3,6	;RP1=0, select bank0
  1486  0163  01DC               	clrf	_timeTick
  1487  0164  01DD               	clrf	_timeTick+1
  1488  0165  01F5               	clrf	?_beep
  1489  0166  0AF5               	incf	?_beep,f
  1490  0167  24A4               	fcall	_beep
  1491  0168  2999               	goto	l3501
  1492  0169                     l6793:	
  1493  0169  300A               	movlw	10
  1494                           
  1495                           ;MAIN.C: 351: beep(10,1);
  1496  016A  01F5               	clrf	?_beep
  1497  016B  0AF5               	incf	?_beep,f
  1498  016C  24A4               	fcall	_beep
  1499  016D  2999               	goto	l3501
  1500  016E                     l6795:	
  1501                           
  1502                           ;MAIN.C: 357: if(idState == 0){
  1503  016E  08D7               	movf	main@idState,f
  1504  016F  1D03               	skipz
  1505  0170  2989               	goto	l6809
  1506                           
  1507                           ;MAIN.C: 358: if( idop >2){
  1508  0171  3003               	movlw	3
  1509  0172  0258               	subwf	main@idop,w
  1510  0173  1C03               	skipc
  1511  0174  2999               	goto	l3501
  1512  0175  3006               	movlw	6
  1513                           
  1514                           ;MAIN.C: 359: tmp++;
  1515  0176  0AD9               	incf	main@tmp,f
  1516                           
  1517                           ;MAIN.C: 361: if(tmp <=5){
  1518  0177  0259               	subwf	main@tmp,w
  1519  0178  1803               	skipnc
  1520  0179  2999               	goto	l3501
  1521                           
  1522                           ;MAIN.C: 362: id_replate(tmp,keyID,buffTag);
  1523  017A  3060               	movlw	_keyID& (0+255)
  1524  017B  00BF               	movwf	?_id_replate
  1525  017C  3026               	movlw	_buffTag& (0+255)
  1526  017D  00C0               	movwf	?_id_replate+1
  1527  017E  0859               	movf	main@tmp,w
  1528  017F  2379               	fcall	_id_replate
  1529  0180  300A               	movlw	10
  1530                           
  1531                           ;MAIN.C: 363: timeTick=0;
  1532  0181  1283               	bcf	3,5	;RP0=0, select bank0
  1533  0182  1303               	bcf	3,6	;RP1=0, select bank0
  1534  0183  01DC               	clrf	_timeTick
  1535  0184  01DD               	clrf	_timeTick+1
  1536  0185  01F5               	clrf	?_beep
  1537  0186  0AF5               	incf	?_beep,f
  1538  0187  24A4               	fcall	_beep
  1539  0188  2999               	goto	l3501
  1540  0189                     l6809:	
  1541  0189  300A               	movlw	10
  1542                           
  1543                           ;MAIN.C: 370: beep(10,1);
  1544  018A  01F5               	clrf	?_beep
  1545  018B  0AF5               	incf	?_beep,f
  1546  018C  24A4               	fcall	_beep
  1547  018D  2999               	goto	l3501
  1548  018E                     l6813:	
  1549  018E  085F               	movf	_mtState,w
  1550                           
  1551                           ; Switch size 1, requested type "space"
  1552                           ; Number of cases is 7, Range of values is 0 to 7
  1553                           ; switch strategies available:
  1554                           ; Name         Instructions Cycles
  1555                           ; direct_byte           14     6 (fixed)
  1556                           ; simple_byte           22    12 (average)
  1557                           ; jumptable            260     6 (fixed)
  1558                           ; rangetable            12     6 (fixed)
  1559                           ; spacedrange           22     9 (fixed)
  1560                           ; locatedrange           8     3 (fixed)
  1561                           ;	Chosen strategy is direct_byte
  1562  018F  0084               	movwf	4
  1563  0190  3008               	movlw	8
  1564  0191  0204               	subwf	4,w
  1565  0192  1803               	skipnc
  1566  0193  2999               	goto	l3501
  1567  0194  3005               	movlw	high S6915
  1568  0195  008A               	movwf	10
  1569  0196  30EA               	movlw	low S6915
  1570  0197  0704               	addwf	4,w
  1571  0198  0082               	movwf	2
  1572  0199                     l3501:	
  1573  0199  309F               	movlw	159
  1574                           
  1575                           ;MAIN.C: 395: idState = 1;
  1576  019A  1283               	bcf	3,5	;RP0=0, select bank0
  1577  019B  1303               	bcf	3,6	;RP1=0, select bank0
  1578  019C  01D7               	clrf	main@idState
  1579  019D  0AD7               	incf	main@idState,f
  1580                           
  1581                           ;MAIN.C: 396: _delay((unsigned long)((61)*(8000000/4000.0)));
  1582  019E  00D4               	movwf	??_main+1
  1583  019F  306F               	movlw	111
  1584  01A0  00D3               	movwf	??_main
  1585  01A1                     u2247:	
  1586  01A1  0BD3               	decfsz	??_main,f
  1587  01A2  29A1               	goto	u2247
  1588  01A3  0BD4               	decfsz	??_main+1,f
  1589  01A4  29A1               	goto	u2247
  1590  01A5  29A6               	nop2
  1591                           
  1592                           ;MAIN.C: 397: }
  1593  01A6  29B4               	goto	l6821
  1594  01A7                     l6817:	
  1595  01A7  3002               	movlw	2
  1596                           
  1597                           ;MAIN.C: 398: else{
  1598                           ;MAIN.C: 399: idState =0;
  1599  01A8  01D7               	clrf	main@idState
  1600                           
  1601                           ;MAIN.C: 400: _delay((unsigned long)((150)*(8000000/4000.0)));
  1602  01A9  00D5               	movwf	??_main+2
  1603  01AA  3086               	movlw	134
  1604  01AB  00D4               	movwf	??_main+1
  1605  01AC  3099               	movlw	153
  1606  01AD  00D3               	movwf	??_main
  1607  01AE                     u2257:	
  1608  01AE  0BD3               	decfsz	??_main,f
  1609  01AF  29AE               	goto	u2257
  1610  01B0  0BD4               	decfsz	??_main+1,f
  1611  01B1  29AE               	goto	u2257
  1612  01B2  0BD5               	decfsz	??_main+2,f
  1613  01B3  29AE               	goto	u2257
  1614  01B4                     l6821:	
  1615                           
  1616                           ;MAIN.C: 401: }
  1617                           ;MAIN.C: 405: if((timeOut!=0)&&( timeTick > timeOut)){
  1618  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  1619  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  1620  01B6  085B               	movf	_timeOut+1,w
  1621  01B7  045A               	iorwf	_timeOut,w
  1622  01B8  1903               	skipnz
  1623  01B9  2A0B               	goto	l6861
  1624  01BA  085D               	movf	_timeTick+1,w
  1625  01BB  025B               	subwf	_timeOut+1,w
  1626  01BC  1D03               	skipz
  1627  01BD  29C0               	goto	u2155
  1628  01BE  085C               	movf	_timeTick,w
  1629  01BF  025A               	subwf	_timeOut,w
  1630  01C0                     u2155:	
  1631  01C0  1C03               	btfss	3,0
  1632  01C1  29FD               	goto	l6859
  1633  01C2  2A0B               	goto	l6861
  1634  01C3                     l6827:	
  1635                           
  1636                           ;MAIN.C: 410: setState(2,80);
  1637  01C3  3050               	movlw	80
  1638  01C4  00F2               	movwf	?_setState
  1639  01C5  3002               	movlw	2
  1640  01C6  01F3               	clrf	?_setState+1
  1641  01C7  25C2               	fcall	_setState
  1642                           
  1643                           ;MAIN.C: 411: buzFre=0x6a;
  1644  01C8  306A               	movlw	106
  1645  01C9  00A5               	movwf	_buzFre
  1646                           
  1647                           ;MAIN.C: 412: break;
  1648  01CA  2A0B               	goto	l6861
  1649  01CB                     l6831:	
  1650                           
  1651                           ;MAIN.C: 414: setState(6,35);
  1652  01CB  3023               	movlw	35
  1653  01CC  00F2               	movwf	?_setState
  1654  01CD  3006               	movlw	6
  1655  01CE  01F3               	clrf	?_setState+1
  1656  01CF  25C2               	fcall	_setState
  1657                           
  1658                           ;MAIN.C: 415: break;
  1659  01D0  2A0B               	goto	l6861
  1660  01D1                     l6833:	
  1661  01D1  3002               	movlw	2
  1662                           
  1663                           ;MAIN.C: 417: setState(2,0);
  1664  01D2  01F2               	clrf	?_setState
  1665  01D3  01F3               	clrf	?_setState+1
  1666  01D4  25C2               	fcall	_setState
  1667                           
  1668                           ;MAIN.C: 418: buzFre=0x6a;
  1669  01D5  306A               	movlw	106
  1670  01D6  00A5               	movwf	_buzFre
  1671                           
  1672                           ;MAIN.C: 419: eepromWriteByte(0x00,7);
  1673  01D7  3007               	movlw	7
  1674  01D8  00F2               	movwf	?_eepromWriteByte
  1675  01D9  3000               	movlw	0
  1676  01DA  2402               	fcall	_eepromWriteByte
  1677  01DB  3002               	movlw	2
  1678                           
  1679                           ;MAIN.C: 420: eepromWriteByte(0x02,0);
  1680  01DC  01F2               	clrf	?_eepromWriteByte
  1681  01DD  2402               	fcall	_eepromWriteByte
  1682                           
  1683                           ;MAIN.C: 421: break;
  1684  01DE  2A0B               	goto	l6861
  1685  01DF                     l3530:	
  1686                           ;MAIN.C: 422: case 7:
  1687                           
  1688                           
  1689                           ;MAIN.C: 424: if(RC1==1){
  1690  01DF  1C87               	btfss	7,1
  1691  01E0  2A0B               	goto	l6861
  1692  01E1  3002               	movlw	2
  1693                           
  1694                           ;MAIN.C: 425: PwInNum++;
  1695  01E2  0ADE               	incf	_PwInNum,f
  1696                           
  1697                           ;MAIN.C: 426: tmp = eepromReadByte(0x02);
  1698  01E3  25E1               	fcall	_eepromReadByte
  1699  01E4  1283               	bcf	3,5	;RP0=0, select bank0
  1700  01E5  00D9               	movwf	main@tmp
  1701                           
  1702                           ;MAIN.C: 427: if(tmp>0&&tmp<4){
  1703  01E6  0859               	movf	main@tmp,w
  1704  01E7  1903               	btfsc	3,2
  1705  01E8  29F3               	goto	l6853
  1706  01E9  3004               	movlw	4
  1707  01EA  0259               	subwf	main@tmp,w
  1708  01EB  1803               	skipnc
  1709  01EC  29F3               	goto	l6853
  1710                           
  1711                           ;MAIN.C: 428: tmp--;
  1712  01ED  03D9               	decf	main@tmp,f
  1713                           
  1714                           ;MAIN.C: 429: eepromWriteByte(0x03+tmp,PwInNum);
  1715  01EE  085E               	movf	_PwInNum,w
  1716  01EF  00F2               	movwf	?_eepromWriteByte
  1717  01F0  0859               	movf	main@tmp,w
  1718  01F1  3E03               	addlw	3
  1719  01F2  2402               	fcall	_eepromWriteByte
  1720  01F3                     l6853:	
  1721  01F3  300A               	movlw	10
  1722                           
  1723                           ;MAIN.C: 430: }
  1724                           ;MAIN.C: 432: beep(10,1);
  1725  01F4  01F5               	clrf	?_beep
  1726  01F5  0AF5               	incf	?_beep,f
  1727  01F6  24A4               	fcall	_beep
  1728                           
  1729                           ;MAIN.C: 433: setState(7,10);
  1730  01F7  300A               	movlw	10
  1731  01F8  00F2               	movwf	?_setState
  1732  01F9  3007               	movlw	7
  1733  01FA  01F3               	clrf	?_setState+1
  1734  01FB  25C2               	fcall	_setState
  1735  01FC  2A0B               	goto	l6861
  1736  01FD                     l6859:	
  1737  01FD  085F               	movf	_mtState,w
  1738                           
  1739                           ; Switch size 1, requested type "space"
  1740                           ; Number of cases is 4, Range of values is 1 to 7
  1741                           ; switch strategies available:
  1742                           ; Name         Instructions Cycles
  1743                           ; simple_byte           13     7 (average)
  1744                           ; direct_byte           16     9 (fixed)
  1745                           ; jumptable            263     9 (fixed)
  1746                           ;	Chosen strategy is simple_byte
  1747  01FE  3A01               	xorlw	1	; case 1
  1748  01FF  1903               	skipnz
  1749  0200  29C3               	goto	l6827
  1750  0201  3A03               	xorlw	3	; case 2
  1751  0202  1903               	skipnz
  1752  0203  29CB               	goto	l6831
  1753  0204  3A04               	xorlw	4	; case 6
  1754  0205  1903               	skipnz
  1755  0206  29D1               	goto	l6833
  1756  0207  3A01               	xorlw	1	; case 7
  1757  0208  1903               	skipnz
  1758  0209  29DF               	goto	l3530
  1759  020A  2A0B               	goto	l6861
  1760  020B                     l6861:	
  1761                           
  1762                           ;MAIN.C: 451: }
  1763                           ;MAIN.C: 454: if(mtState==0) RA3 = 1;
  1764  020B  1283               	bcf	3,5	;RP0=0, select bank0
  1765  020C  1303               	bcf	3,6	;RP1=0, select bank0
  1766  020D  08DF               	movf	_mtState,f
  1767  020E  1D03               	skipz
  1768  020F  2A12               	goto	l3533
  1769  0210  1585               	bsf	5,3
  1770  0211  2A13               	goto	l6865
  1771  0212                     l3533:	
  1772                           
  1773                           ;MAIN.C: 455: else RA3 =0;
  1774  0212  1185               	bcf	5,3
  1775  0213                     l6865:	
  1776                           
  1777                           ;MAIN.C: 462: if(mtState == 2) {
  1778  0213  085F               	movf	_mtState,w
  1779  0214  3A02               	xorlw	2
  1780  0215  1D03               	skipz
  1781  0216  2A26               	goto	l3535
  1782                           
  1783                           ;MAIN.C: 464: TMR1ON = 1;T0IE = 1;
  1784  0217  1410               	bsf	16,0
  1785  0218  168B               	bsf	11,5
  1786                           
  1787                           ;MAIN.C: 465: if(timeTick%4 ==0){
  1788  0219  085C               	movf	_timeTick,w
  1789  021A  3903               	andlw	3
  1790  021B  1D03               	btfss	3,2
  1791  021C  2A28               	goto	l6877
  1792                           
  1793                           ;MAIN.C: 467: if(buzFre==0x6a){
  1794  021D  0825               	movf	_buzFre,w
  1795  021E  3A6A               	xorlw	106
  1796  021F  1D03               	skipz
  1797  0220  2A23               	goto	l6875
  1798                           
  1799                           ;MAIN.C: 468: buzFre=12;
  1800  0221  300C               	movlw	12
  1801  0222  2A24               	goto	L3
  1802  0223                     l6875:	
  1803                           ;MAIN.C: 469: }else{
  1804                           
  1805                           
  1806                           ;MAIN.C: 470: buzFre=0x6a;
  1807  0223  306A               	movlw	106
  1808  0224                     L3:	
  1809  0224  00A5               	movwf	_buzFre
  1810  0225  2A28               	goto	l6877
  1811  0226                     l3535:	
  1812  0226  1010               	bcf	16,0
  1813  0227  128B               	bcf	11,5
  1814  0228                     l6877:	
  1815                           
  1816                           ;MAIN.C: 477: timeTick++;
  1817  0228  0ADC               	incf	_timeTick,f
  1818  0229  1903               	skipnz
  1819  022A  0ADD               	incf	_timeTick+1,f
  1820  022B  28B9               	goto	l6709
  1821  022C                     __end_of_main:	
  1822                           
  1823                           	psect	swtext1
  1824  05EA                     __pswtext1:	
  1825  05EA                     S6915:	
  1826  05EA  2912               	ljmp	l6745
  1827  05EB  28D6               	ljmp	l6723
  1828  05EC  28D6               	ljmp	l6723
  1829  05ED  294F               	ljmp	l6779
  1830  05EE  2999               	ljmp	l3501
  1831  05EF  296E               	ljmp	l6795
  1832  05F0  2926               	ljmp	l6755
  1833  05F1  28D6               	ljmp	l6723
  1834                           
  1835                           	psect	text570
  1836  0446                     __ptext570:	
  1837 ;; =============== function _main ends ============
  1838                           
  1839                           
  1840 ;; *************** function _id_clear *****************
  1841 ;; Defined at:
  1842 ;;		line 146 in file "MAIN.C"
  1843 ;; Parameters:    Size  Location     Type
  1844 ;;  idMin           1    wreg     unsigned char 
  1845 ;;  idMax           1    4[BANK0 ] unsigned char 
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;  idMin           1   10[BANK0 ] unsigned char 
  1848 ;;  tmp             5    5[BANK0 ] unsigned char [5]
  1849 ;; Return value:  Size  Location     Type
  1850 ;;		None               void
  1851 ;; Registers used:
  1852 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1853 ;; Tracked objects:
  1854 ;;		On entry : 60/0
  1855 ;;		On exit  : 60/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMMON   BANK0   BANK1
  1858 ;;      Params:         0       1       0
  1859 ;;      Locals:         0       6       0
  1860 ;;      Temps:          0       0       0
  1861 ;;      Totals:         0       7       0
  1862 ;;Total ram usage:        7 bytes
  1863 ;; Hardware stack levels used:    1
  1864 ;; Hardware stack levels required when called:    4
  1865 ;; This function calls:
  1866 ;;		_id_replate
  1867 ;; This function is called by:
  1868 ;;		_main
  1869 ;; This function uses a non-reentrant model
  1870 ;;
  1871  0446                     _id_clear:	
  1872                           
  1873                           ; Regs used in _id_clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1874                           ;id_clear@idMin stored from wreg
  1875  0446  00C9               	movwf	id_clear@idMin
  1876                           
  1877                           ;MAIN.C: 147: unsigned char tmp[5]={0xff,0xff,0xff,0xff,0xff};
  1878  0447  3044               	movlw	id_clear@tmp& (0+255)
  1879  0448  0084               	movwf	4
  1880  0449  0820               	movf	id_clear@F971,w
  1881  044A  1383               	bcf	3,7	;select IRP bank0
  1882  044B  0080               	movwf	0
  1883  044C  0A84               	incf	4,f
  1884  044D  0821               	movf	id_clear@F971+1,w
  1885  044E  0080               	movwf	0
  1886  044F  0A84               	incf	4,f
  1887  0450  0822               	movf	id_clear@F971+2,w
  1888  0451  0080               	movwf	0
  1889  0452  0A84               	incf	4,f
  1890  0453  0823               	movf	id_clear@F971+3,w
  1891  0454  0080               	movwf	0
  1892  0455  0A84               	incf	4,f
  1893  0456  0824               	movf	id_clear@F971+4,w
  1894  0457  0080               	movwf	0
  1895  0458                     l6635:	
  1896  0458  0849               	movf	id_clear@idMin,w
  1897  0459  0243               	subwf	id_clear@idMax,w
  1898  045A  1C03               	btfss	3,0
  1899  045B  0008               	return
  1900                           
  1901                           ;MAIN.C: 149: id_replate(idMin,tmp,buffTag);
  1902  045C  3044               	movlw	id_clear@tmp& (0+255)
  1903  045D  00BF               	movwf	?_id_replate
  1904  045E  3026               	movlw	_buffTag& (0+255)
  1905  045F  00C0               	movwf	?_id_replate+1
  1906  0460  0849               	movf	id_clear@idMin,w
  1907  0461  2379               	fcall	_id_replate
  1908  0462  1283               	bcf	3,5	;RP0=0, select bank0
  1909  0463  1303               	bcf	3,6	;RP1=0, select bank0
  1910  0464  0AC9               	incf	id_clear@idMin,f
  1911  0465  2C58               	goto	l6635
  1912  0466                     __end_of_id_clear:	
  1913                           
  1914                           	psect	text571
  1915  0379                     __ptext571:	
  1916 ;; =============== function _id_clear ends ============
  1917                           
  1918                           
  1919 ;; *************** function _id_replate *****************
  1920 ;; Defined at:
  1921 ;;		line 132 in file "MAIN.C"
  1922 ;; Parameters:    Size  Location     Type
  1923 ;;  id              1    wreg     unsigned char 
  1924 ;;  Cont            1    0[BANK0 ] PTR unsigned char 
  1925 ;;		 -> id_clear@tmp(5), keyID(5), 
  1926 ;;  buff            1    1[BANK0 ] PTR unsigned char 
  1927 ;;		 -> buffTag(25), 
  1928 ;; Auto vars:     Size  Location     Type
  1929 ;;  id              1   11[COMMON] unsigned char 
  1930 ;; Return value:  Size  Location     Type
  1931 ;;		None               void
  1932 ;; Registers used:
  1933 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1934 ;; Tracked objects:
  1935 ;;		On entry : 60/0
  1936 ;;		On exit  : 0/0
  1937 ;;		Unchanged: 0/0
  1938 ;; Data sizes:     COMMON   BANK0   BANK1
  1939 ;;      Params:         0       2       0
  1940 ;;      Locals:         1       0       0
  1941 ;;      Temps:          0       2       0
  1942 ;;      Totals:         1       4       0
  1943 ;;Total ram usage:        5 bytes
  1944 ;; Hardware stack levels used:    1
  1945 ;; Hardware stack levels required when called:    3
  1946 ;; This function calls:
  1947 ;;		___bmul
  1948 ;;		_eepromWriteBlock
  1949 ;; This function is called by:
  1950 ;;		_id_clear
  1951 ;;		_main
  1952 ;; This function uses a non-reentrant model
  1953 ;;
  1954  0379                     _id_replate:	
  1955                           
  1956                           ; Regs used in _id_replate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1957                           ;id_replate@id stored from wreg
  1958  0379  00FB               	movwf	id_replate@id
  1959                           
  1960                           ;MAIN.C: 133: id=(id-1)*5;
  1961  037A  3005               	movlw	5
  1962  037B  00F2               	movwf	?___bmul
  1963  037C  087B               	movf	id_replate@id,w
  1964  037D  3EFF               	addlw	255
  1965  037E  259A               	fcall	___bmul
  1966  037F  00FB               	movwf	id_replate@id
  1967                           
  1968                           ;MAIN.C: 134: {
  1969                           ;MAIN.C: 135: {
  1970                           ;MAIN.C: 136: *(buff+id) = *Cont;
  1971  0380  083F               	movf	id_replate@Cont,w
  1972  0381  0084               	movwf	4
  1973  0382  1383               	bcf	3,7	;select IRP bank0
  1974  0383  0800               	movf	0,w
  1975  0384  00C1               	movwf	??_id_replate
  1976  0385  087B               	movf	id_replate@id,w
  1977  0386  0740               	addwf	id_replate@buff,w
  1978  0387  00C2               	movwf	??_id_replate+1
  1979  0388  0084               	movwf	4
  1980  0389  0841               	movf	??_id_replate,w
  1981  038A  0080               	movwf	0
  1982                           
  1983                           ;MAIN.C: 137: *(buff+1+id) = *(Cont+1);
  1984  038B  083F               	movf	id_replate@Cont,w
  1985  038C  3E01               	addlw	1
  1986  038D  23AD               	fcall	PL3	;call to abstracted procedure
  1987  038E  3E01               	addlw	1
  1988  038F  0084               	movwf	4
  1989  0390  0841               	movf	??_id_replate,w
  1990  0391  0080               	movwf	0
  1991                           
  1992                           ;MAIN.C: 138: *(buff+2+id) = *(Cont+2);
  1993  0392  083F               	movf	id_replate@Cont,w
  1994  0393  3E02               	addlw	2
  1995  0394  23AD               	fcall	PL3	;call to abstracted procedure
  1996  0395  3E02               	addlw	2
  1997  0396  0084               	movwf	4
  1998  0397  0841               	movf	??_id_replate,w
  1999  0398  0080               	movwf	0
  2000                           
  2001                           ;MAIN.C: 139: *(buff+3+id) = *(Cont+3);
  2002  0399  083F               	movf	id_replate@Cont,w
  2003  039A  3E03               	addlw	3
  2004  039B  23AD               	fcall	PL3	;call to abstracted procedure
  2005  039C  3E03               	addlw	3
  2006  039D  0084               	movwf	4
  2007  039E  0841               	movf	??_id_replate,w
  2008  039F  0080               	movwf	0
  2009                           
  2010                           ;MAIN.C: 140: *(buff+4+id) = *(Cont+4);
  2011  03A0  083F               	movf	id_replate@Cont,w
  2012  03A1  3E04               	addlw	4
  2013  03A2  23AD               	fcall	PL3	;call to abstracted procedure
  2014  03A3  3E04               	addlw	4
  2015  03A4  0084               	movwf	4
  2016  03A5  0841               	movf	??_id_replate,w
  2017  03A6  0080               	movwf	0
  2018                           
  2019                           ;MAIN.C: 141: }
  2020                           ;MAIN.C: 142: }
  2021                           ;MAIN.C: 144: eepromWriteBlock(0x06,buffTag,25);
  2022  03A7  3026               	movlw	_buffTag& (0+255)
  2023  03A8  00F6               	movwf	?_eepromWriteBlock
  2024  03A9  3019               	movlw	25
  2025  03AA  00F7               	movwf	?_eepromWriteBlock+1
  2026  03AB  3006               	movlw	6
  2027  03AC  2D26               	ljmp	_eepromWriteBlock
  2028  03AD                     __end_of_id_replate:	
  2029  03AD                     PL3:	
  2030  03AD  0084               	movwf	4
  2031  03AE  0800               	movf	0,w
  2032  03AF  00C1               	movwf	??_id_replate
  2033  03B0  087B               	movf	id_replate@id,w
  2034  03B1  0740               	addwf	id_replate@buff,w
  2035  03B2  00C2               	movwf	??_id_replate+1
  2036  03B3  0008               	return
  2037                           
  2038                           	psect	text572
  2039  03DC                     __ptext572:	
  2040 ;; =============== function _id_replate ends ============
  2041                           
  2042                           
  2043 ;; *************** function _SendNum *****************
  2044 ;; Defined at:
  2045 ;;		line 42 in file "SWUART.C"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;  num             1    wreg     unsigned char 
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;  num             1    9[COMMON] unsigned char 
  2050 ;;  nib             1   10[COMMON] unsigned char 
  2051 ;; Return value:  Size  Location     Type
  2052 ;;		None               void
  2053 ;; Registers used:
  2054 ;;		wreg, status,2, status,0, pclath, cstack
  2055 ;; Tracked objects:
  2056 ;;		On entry : 60/0
  2057 ;;		On exit  : 0/0
  2058 ;;		Unchanged: 0/0
  2059 ;; Data sizes:     COMMON   BANK0   BANK1
  2060 ;;      Params:         0       0       0
  2061 ;;      Locals:         6       0       0
  2062 ;;      Temps:          0       0       0
  2063 ;;      Totals:         6       0       0
  2064 ;;Total ram usage:        6 bytes
  2065 ;; Hardware stack levels used:    1
  2066 ;; Hardware stack levels required when called:    2
  2067 ;; This function calls:
  2068 ;;		_swUartSendByte
  2069 ;; This function is called by:
  2070 ;;		_main
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073  03DC                     _SendNum:	
  2074                           
  2075                           ; Regs used in _SendNum: [wreg+status,2+status,0+pclath+cstack]
  2076                           ;SendNum@num stored from wreg
  2077  03DC  00F9               	movwf	SendNum@num
  2078                           
  2079                           ;SWUART.C: 43: unsigned char nib = num>>4;
  2080  03DD  0E79               	swapf	SendNum@num,w
  2081  03DE  390F               	andlw	15
  2082  03DF  00FA               	movwf	SendNum@nib
  2083                           
  2084                           ;SWUART.C: 44: swUartSendByte(nib <10 ? (nib+'0') :(nib+'A'-10));
  2085  03E0  300A               	movlw	10
  2086  03E1  027A               	subwf	SendNum@nib,w
  2087  03E2  087A               	movf	SendNum@nib,w
  2088  03E3  00F5               	movwf	_SendNum$4581
  2089  03E4  1C03               	skipc
  2090  03E5  2BE8               	goto	L6
  2091  03E6  3037               	movlw	55
  2092  03E7  2BE9               	goto	L4
  2093  03E8                     L6:	
  2094  03E8  3030               	movlw	48
  2095  03E9                     L4:	
  2096  03E9  01F6               	clrf	_SendNum$4581+1
  2097  03EA  07F5               	addwf	_SendNum$4581,f
  2098  03EB  1803               	skipnc
  2099  03EC  0AF6               	incf	_SendNum$4581+1,f
  2100  03ED  0875               	movf	_SendNum$4581,w
  2101  03EE  23B4               	fcall	_swUartSendByte
  2102                           
  2103                           ;SWUART.C: 45: nib = num&0x0f;
  2104  03EF  0879               	movf	SendNum@num,w
  2105  03F0  00FA               	movwf	SendNum@nib
  2106  03F1  300F               	movlw	15
  2107  03F2  05FA               	andwf	SendNum@nib,f
  2108                           
  2109                           ;SWUART.C: 46: swUartSendByte(nib <10 ? (nib+'0') :(nib+'A'-10));
  2110  03F3  300A               	movlw	10
  2111  03F4  027A               	subwf	SendNum@nib,w
  2112  03F5  087A               	movf	SendNum@nib,w
  2113  03F6  00F7               	movwf	_SendNum$4582
  2114  03F7  1C03               	skipc
  2115  03F8  2BFB               	goto	L7
  2116  03F9  3037               	movlw	55
  2117  03FA  2BFC               	goto	L5
  2118  03FB                     L7:	
  2119  03FB  3030               	movlw	48
  2120  03FC                     L5:	
  2121  03FC  01F8               	clrf	_SendNum$4582+1
  2122  03FD  07F7               	addwf	_SendNum$4582,f
  2123  03FE  1803               	skipnc
  2124  03FF  0AF8               	incf	_SendNum$4582+1,f
  2125  0400  0877               	movf	_SendNum$4582,w
  2126  0401  2BB4               	ljmp	_swUartSendByte
  2127  0402                     __end_of_SendNum:	
  2128                           
  2129                           	psect	text573
  2130  05B5                     __ptext573:	
  2131 ;; =============== function _SendNum ends ============
  2132                           
  2133                           
  2134 ;; *************** function _swUartSendString *****************
  2135 ;; Defined at:
  2136 ;;		line 35 in file "SWUART.C"
  2137 ;; Parameters:    Size  Location     Type
  2138 ;;  str             1    wreg     PTR unsigned char 
  2139 ;;		 -> STR_1(7), 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;  str             1    5[COMMON] PTR unsigned char 
  2142 ;;		 -> STR_1(7), 
  2143 ;; Return value:  Size  Location     Type
  2144 ;;		None               void
  2145 ;; Registers used:
  2146 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2147 ;; Tracked objects:
  2148 ;;		On entry : 60/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMMON   BANK0   BANK1
  2152 ;;      Params:         0       0       0
  2153 ;;      Locals:         1       0       0
  2154 ;;      Temps:          0       0       0
  2155 ;;      Totals:         1       0       0
  2156 ;;Total ram usage:        1 bytes
  2157 ;; Hardware stack levels used:    1
  2158 ;; Hardware stack levels required when called:    2
  2159 ;; This function calls:
  2160 ;;		_swUartSendByte
  2161 ;; This function is called by:
  2162 ;;		_main
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165  05B5                     _swUartSendString:	
  2166                           
  2167                           ; Regs used in _swUartSendString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2168                           ;swUartSendString@str stored from wreg
  2169  05B5  00F5               	movwf	swUartSendString@str
  2170  05B6                     l6591:	
  2171                           ;SWUART.C: 36: while(*str){
  2172                           
  2173  05B6  0875               	movf	swUartSendString@str,w
  2174  05B7  0084               	movwf	4
  2175  05B8  25A8               	fcall	stringdir
  2176  05B9  3800               	iorlw	0
  2177  05BA  1903               	btfsc	3,2
  2178  05BB  0008               	return
  2179                           
  2180                           ;SWUART.C: 37: swUartSendByte((char)*str);
  2181  05BC  0875               	movf	swUartSendString@str,w
  2182  05BD  0084               	movwf	4
  2183  05BE  25A8               	fcall	stringdir
  2184  05BF  23B4               	fcall	_swUartSendByte
  2185                           
  2186                           ;SWUART.C: 38: str++;
  2187  05C0  0AF5               	incf	swUartSendString@str,f
  2188  05C1  2DB6               	goto	l6591
  2189  05C2                     __end_of_swUartSendString:	
  2190                           
  2191                           	psect	text574
  2192  04A4                     __ptext574:	
  2193 ;; =============== function _swUartSendString ends ============
  2194                           
  2195                           
  2196 ;; *************** function _beep *****************
  2197 ;; Defined at:
  2198 ;;		line 45 in file "MAIN.C"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;  delay           1    wreg     unsigned char 
  2201 ;;  rep             1    5[COMMON] unsigned char 
  2202 ;; Auto vars:     Size  Location     Type
  2203 ;;  delay           1    6[COMMON] unsigned char 
  2204 ;; Return value:  Size  Location     Type
  2205 ;;		None               void
  2206 ;; Registers used:
  2207 ;;		wreg, status,2, status,0, pclath, cstack
  2208 ;; Tracked objects:
  2209 ;;		On entry : 0/0
  2210 ;;		On exit  : 0/0
  2211 ;;		Unchanged: 0/0
  2212 ;; Data sizes:     COMMON   BANK0   BANK1
  2213 ;;      Params:         1       0       0
  2214 ;;      Locals:         1       0       0
  2215 ;;      Temps:          0       0       0
  2216 ;;      Totals:         2       0       0
  2217 ;;Total ram usage:        2 bytes
  2218 ;; Hardware stack levels used:    1
  2219 ;; Hardware stack levels required when called:    2
  2220 ;; This function calls:
  2221 ;;		_delay_x10ms
  2222 ;; This function is called by:
  2223 ;;		_main
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226  04A4                     _beep:	
  2227                           
  2228                           ; Regs used in _beep: [wreg+status,2+status,0+pclath+cstack]
  2229                           ;beep@delay stored from wreg
  2230  04A4  00F6               	movwf	beep@delay
  2231                           
  2232                           ;MAIN.C: 46: TMR1ON = 1;T0IE = 1;
  2233  04A5  1283               	bcf	3,5	;RP0=0, select bank0
  2234  04A6  1303               	bcf	3,6	;RP1=0, select bank0
  2235  04A7  1410               	bsf	16,0
  2236  04A8  168B               	bsf	11,5
  2237  04A9                     l6583:	
  2238                           ;MAIN.C: 48: while(rep--){
  2239                           
  2240  04A9  03F5               	decf	beep@rep,f
  2241  04AA  0875               	movf	beep@rep,w
  2242  04AB  3AFF               	xorlw	255
  2243  04AC  1903               	btfsc	3,2
  2244  04AD  2CBE               	goto	l3452
  2245  04AE  302A               	movlw	42
  2246                           
  2247                           ;MAIN.C: 49: TMR1ON = 1;T0IE = 1;
  2248  04AF  1283               	bcf	3,5	;RP0=0, select bank0
  2249  04B0  1303               	bcf	3,6	;RP1=0, select bank0
  2250  04B1  1410               	bsf	16,0
  2251  04B2  168B               	bsf	11,5
  2252                           
  2253                           ;MAIN.C: 50: buzFre=42;
  2254  04B3  00A5               	movwf	_buzFre
  2255                           
  2256                           ;MAIN.C: 51: delay_x10ms(delay);
  2257  04B4  0876               	movf	beep@delay,w
  2258  04B5  256C               	fcall	_delay_x10ms
  2259  04B6  3014               	movlw	20
  2260                           
  2261                           ;MAIN.C: 52: T0IE = 0;
  2262  04B7  128B               	bcf	11,5
  2263                           
  2264                           ;MAIN.C: 53: TMR1ON = 0;RC0 =0;
  2265  04B8  1283               	bcf	3,5	;RP0=0, select bank0
  2266  04B9  1303               	bcf	3,6	;RP1=0, select bank0
  2267  04BA  1010               	bcf	16,0
  2268  04BB  1007               	bcf	7,0
  2269                           
  2270                           ;MAIN.C: 54: delay_x10ms(20);
  2271  04BC  256C               	fcall	_delay_x10ms
  2272  04BD  2CA9               	goto	l6583
  2273  04BE                     l3452:	
  2274                           
  2275                           ;MAIN.C: 55: }
  2276                           ;MAIN.C: 57: T0IE = 0;
  2277  04BE  128B               	bcf	11,5
  2278  04BF  0008               	return
  2279  04C0                     __end_of_beep:	
  2280                           
  2281                           	psect	text575
  2282  0526                     __ptext575:	
  2283 ;; =============== function _beep ends ============
  2284                           
  2285                           
  2286 ;; *************** function _eepromWriteBlock *****************
  2287 ;; Defined at:
  2288 ;;		line 43 in file "ms82_eeprom.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;  addStart        1    wreg     unsigned char 
  2291 ;;  buff            1    6[COMMON] PTR unsigned char 
  2292 ;;		 -> buffTag(25), 
  2293 ;;  len             1    7[COMMON] unsigned char 
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;  addStart        1    9[COMMON] unsigned char 
  2296 ;;  i               1   10[COMMON] unsigned char 
  2297 ;; Return value:  Size  Location     Type
  2298 ;;		None               void
  2299 ;; Registers used:
  2300 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2301 ;; Tracked objects:
  2302 ;;		On entry : 160/0
  2303 ;;		On exit  : 0/0
  2304 ;;		Unchanged: 0/0
  2305 ;; Data sizes:     COMMON   BANK0   BANK1
  2306 ;;      Params:         2       0       0
  2307 ;;      Locals:         2       0       0
  2308 ;;      Temps:          1       0       0
  2309 ;;      Totals:         5       0       0
  2310 ;;Total ram usage:        5 bytes
  2311 ;; Hardware stack levels used:    1
  2312 ;; Hardware stack levels required when called:    2
  2313 ;; This function calls:
  2314 ;;		_eepromWriteByte
  2315 ;; This function is called by:
  2316 ;;		_id_replate
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319  0526                     _eepromWriteBlock:	
  2320                           
  2321                           ; Regs used in _eepromWriteBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2322                           ;eepromWriteBlock@addStart stored from wreg
  2323  0526  00F9               	movwf	eepromWriteBlock@addStart
  2324                           
  2325                           ;ms82_eeprom.c: 44: unsigned char i;
  2326                           ;ms82_eeprom.c: 45: for(i=0;i<len;i++){
  2327  0527  01FA               	clrf	eepromWriteBlock@i
  2328  0528                     l6567:	
  2329  0528  0877               	movf	eepromWriteBlock@len,w
  2330  0529  027A               	subwf	eepromWriteBlock@i,w
  2331  052A  1803               	btfsc	3,0
  2332  052B  0008               	return
  2333                           
  2334                           ;ms82_eeprom.c: 46: eepromWriteByte(addStart+i,buff[i]);
  2335  052C  087A               	movf	eepromWriteBlock@i,w
  2336  052D  0776               	addwf	eepromWriteBlock@buff,w
  2337  052E  00F8               	movwf	??_eepromWriteBlock
  2338  052F  0084               	movwf	4
  2339  0530  1383               	bcf	3,7	;select IRP bank0
  2340  0531  0800               	movf	0,w
  2341  0532  00F2               	movwf	?_eepromWriteByte
  2342  0533  087A               	movf	eepromWriteBlock@i,w
  2343  0534  0779               	addwf	eepromWriteBlock@addStart,w
  2344  0535  2402               	fcall	_eepromWriteByte
  2345  0536  0AFA               	incf	eepromWriteBlock@i,f
  2346  0537  2D28               	goto	l6567
  2347  0538                     __end_of_eepromWriteBlock:	
  2348                           
  2349                           	psect	text576
  2350  03B4                     __ptext576:	
  2351 ;; =============== function _eepromWriteBlock ends ============
  2352                           
  2353                           
  2354 ;; *************** function _swUartSendByte *****************
  2355 ;; Defined at:
  2356 ;;		line 13 in file "SWUART.C"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;  dat             1    wreg     unsigned char 
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;  dat             1    3[COMMON] unsigned char 
  2361 ;;  i               1    4[COMMON] unsigned char 
  2362 ;; Return value:  Size  Location     Type
  2363 ;;		None               void
  2364 ;; Registers used:
  2365 ;;		wreg, status,2, status,0
  2366 ;; Tracked objects:
  2367 ;;		On entry : 0/0
  2368 ;;		On exit  : 0/0
  2369 ;;		Unchanged: 0/0
  2370 ;; Data sizes:     COMMON   BANK0   BANK1
  2371 ;;      Params:         0       0       0
  2372 ;;      Locals:         2       0       0
  2373 ;;      Temps:          1       0       0
  2374 ;;      Totals:         3       0       0
  2375 ;;Total ram usage:        3 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; Hardware stack levels required when called:    1
  2378 ;; This function calls:
  2379 ;;		Nothing
  2380 ;; This function is called by:
  2381 ;;		_swUartSendString
  2382 ;;		_SendNum
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385  03B4                     _swUartSendByte:	
  2386                           
  2387                           ; Regs used in _swUartSendByte: [wreg+status,2+status,0]
  2388                           ;swUartSendByte@dat stored from wreg
  2389  03B4  00F3               	movwf	swUartSendByte@dat
  2390  03B5  308A               	movlw	138
  2391                           
  2392                           ;SWUART.C: 14: unsigned char i;
  2393                           ;SWUART.C: 16: RA2 = 0;
  2394  03B6  1283               	bcf	3,5	;RP0=0, select bank0
  2395  03B7  1303               	bcf	3,6	;RP1=0, select bank0
  2396  03B8  1105               	bcf	5,2
  2397                           
  2398                           ;SWUART.C: 18: _delay((unsigned long)(((2000000/9600))*(8000000/4000000.0)));
  2399  03B9  00F2               	movwf	??_swUartSendByte
  2400  03BA                     u2267:	
  2401  03BA  0BF2               	decfsz	??_swUartSendByte,f
  2402  03BB  2BBA               	goto	u2267
  2403  03BC  0064               	clrwdt
  2404                           
  2405                           ;SWUART.C: 19: for(i=0;i<8;i++){
  2406  03BD  01F4               	clrf	swUartSendByte@i
  2407  03BE                     l4199:	
  2408                           
  2409                           ;SWUART.C: 20: RA2 = (dat&1);
  2410  03BE  1C73               	btfss	swUartSendByte@dat,0
  2411  03BF  2BC4               	goto	u1770
  2412  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  2413  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  2414  03C2  1505               	bsf	5,2
  2415  03C3  2BC7               	goto	u1784
  2416  03C4                     u1770:	
  2417  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  2418  03C5  1303               	bcf	3,6	;RP1=0, select bank0
  2419  03C6  1105               	bcf	5,2
  2420  03C7                     u1784:	
  2421  03C7  308A               	movlw	138
  2422                           
  2423                           ;SWUART.C: 21: dat=dat>>1;
  2424  03C8  1003               	clrc
  2425  03C9  0CF3               	rrf	swUartSendByte@dat,f
  2426                           
  2427                           ;SWUART.C: 23: _delay((unsigned long)(((2000000/9600))*(8000000/4000000.0)));
  2428  03CA  00F2               	movwf	??_swUartSendByte
  2429  03CB                     u2277:	
  2430  03CB  0BF2               	decfsz	??_swUartSendByte,f
  2431  03CC  2BCB               	goto	u2277
  2432  03CD  0064               	clrwdt
  2433  03CE  3008               	movlw	8
  2434  03CF  0AF4               	incf	swUartSendByte@i,f
  2435  03D0  0274               	subwf	swUartSendByte@i,w
  2436  03D1  1C03               	skipc
  2437  03D2  2BBE               	goto	l4199
  2438  03D3  308A               	movlw	138
  2439                           
  2440                           ;SWUART.C: 24: }
  2441                           ;SWUART.C: 29: RA2 = 1;
  2442  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  2443  03D5  1303               	bcf	3,6	;RP1=0, select bank0
  2444  03D6  1505               	bsf	5,2
  2445                           
  2446                           ;SWUART.C: 31: _delay((unsigned long)(((2000000/9600))*(8000000/4000000.0)));
  2447  03D7  00F2               	movwf	??_swUartSendByte
  2448  03D8                     u2287:	
  2449  03D8  0BF2               	decfsz	??_swUartSendByte,f
  2450  03D9  2BD8               	goto	u2287
  2451  03DA  0064               	clrwdt
  2452  03DB  0008               	return
  2453  03DC                     __end_of_swUartSendByte:	
  2454                           
  2455                           	psect	text577
  2456  04C0                     __ptext577:	
  2457 ;; =============== function _swUartSendByte ends ============
  2458                           
  2459                           
  2460 ;; *************** function _id_search *****************
  2461 ;; Defined at:
  2462 ;;		line 124 in file "MAIN.C"
  2463 ;; Parameters:    Size  Location     Type
  2464 ;;  id_input        1    wreg     PTR unsigned char 
  2465 ;;		 -> keyID(5), 
  2466 ;;  buff            1   10[COMMON] PTR unsigned char 
  2467 ;;		 -> buffTag(25), 
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;  id_input        1    0[BANK0 ] PTR unsigned char 
  2470 ;;		 -> keyID(5), 
  2471 ;;  i               1    1[BANK0 ] unsigned char 
  2472 ;; Return value:  Size  Location     Type
  2473 ;;                  1    wreg      unsigned char 
  2474 ;; Registers used:
  2475 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2476 ;; Tracked objects:
  2477 ;;		On entry : 0/0
  2478 ;;		On exit  : 60/0
  2479 ;;		Unchanged: FFE9F/0
  2480 ;; Data sizes:     COMMON   BANK0   BANK1
  2481 ;;      Params:         1       0       0
  2482 ;;      Locals:         0       2       0
  2483 ;;      Temps:          1       0       0
  2484 ;;      Totals:         2       2       0
  2485 ;;Total ram usage:        4 bytes
  2486 ;; Hardware stack levels used:    1
  2487 ;; Hardware stack levels required when called:    2
  2488 ;; This function calls:
  2489 ;;		_comArr
  2490 ;;		___lbdiv
  2491 ;; This function is called by:
  2492 ;;		_main
  2493 ;; This function uses a non-reentrant model
  2494 ;;
  2495  04C0                     _id_search:	
  2496                           
  2497                           ; Regs used in _id_search: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2498                           ;id_search@id_input stored from wreg
  2499  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  2500  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  2501  04C2  00BF               	movwf	id_search@id_input
  2502                           
  2503                           ;MAIN.C: 125: unsigned char i;
  2504                           ;MAIN.C: 126: for(i=0;i<21;i+=5){
  2505  04C3  01C0               	clrf	id_search@i
  2506  04C4                     l6529:	
  2507                           
  2508                           ;MAIN.C: 127: if(comArr(id_input,buff+i,5,5))
  2509  04C4  0840               	movf	id_search@i,w
  2510  04C5  077A               	addwf	id_search@buff,w
  2511  04C6  00F2               	movwf	?_comArr
  2512  04C7  3005               	movlw	5
  2513  04C8  00F3               	movwf	?_comArr+1
  2514  04C9  00F4               	movwf	?_comArr+2
  2515  04CA  083F               	movf	id_search@id_input,w
  2516  04CB  2485               	fcall	_comArr
  2517  04CC  3A00               	xorlw	0
  2518                           
  2519                           ;MAIN.C: 128: return i/5 +1;
  2520  04CD  3005               	movlw	5
  2521  04CE  1903               	skipnz
  2522  04CF  2CD6               	goto	L8
  2523  04D0  00F2               	movwf	?___lbdiv
  2524  04D1  0840               	movf	id_search@i,w
  2525  04D2  24DC               	fcall	___lbdiv
  2526  04D3  00FB               	movwf	??_id_search
  2527  04D4  0A7B               	incf	??_id_search,w
  2528  04D5  0008               	return
  2529  04D6                     L8:	
  2530  04D6  07C0               	addwf	id_search@i,f
  2531  04D7  3015               	movlw	21
  2532  04D8  0240               	subwf	id_search@i,w
  2533  04D9  1803               	btfsc	3,0
  2534                           
  2535                           ;MAIN.C: 129: }
  2536                           ;MAIN.C: 130: return 255;
  2537  04DA  34FF               	retlw	255
  2538  04DB  2CC4               	goto	l6529
  2539  04DC                     __end_of_id_search:	
  2540                           
  2541                           	psect	text578
  2542  056C                     __ptext578:	
  2543 ;; =============== function _id_search ends ============
  2544                           
  2545                           
  2546 ;; *************** function _delay_x10ms *****************
  2547 ;; Defined at:
  2548 ;;		line 41 in file "MAIN.C"
  2549 ;; Parameters:    Size  Location     Type
  2550 ;;  t               1    wreg     unsigned char 
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;  t               1    4[COMMON] unsigned char 
  2553 ;; Return value:  Size  Location     Type
  2554 ;;		None               void
  2555 ;; Registers used:
  2556 ;;		wreg, status,2, status,0
  2557 ;; Tracked objects:
  2558 ;;		On entry : 60/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMMON   BANK0   BANK1
  2562 ;;      Params:         0       0       0
  2563 ;;      Locals:         1       0       0
  2564 ;;      Temps:          2       0       0
  2565 ;;      Totals:         3       0       0
  2566 ;;Total ram usage:        3 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; Hardware stack levels required when called:    1
  2569 ;; This function calls:
  2570 ;;		Nothing
  2571 ;; This function is called by:
  2572 ;;		_beep
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575  056C                     _delay_x10ms:	
  2576                           
  2577                           ; Regs used in _delay_x10ms: [wreg+status,2+status,0]
  2578                           ;delay_x10ms@t stored from wreg
  2579  056C  00F4               	movwf	delay_x10ms@t
  2580  056D                     l6521:	
  2581                           ;MAIN.C: 42: while(t--)
  2582                           
  2583  056D  03F4               	decf	delay_x10ms@t,f
  2584  056E  0874               	movf	delay_x10ms@t,w
  2585  056F  3AFF               	xorlw	255
  2586  0570  1903               	btfsc	3,2
  2587  0571  0008               	return
  2588                           
  2589                           ;MAIN.C: 43: _delay((unsigned long)((10)*(8000000/4000.0)));
  2590  0572  301A               	movlw	26
  2591  0573  00F3               	movwf	??_delay_x10ms+1
  2592  0574  30F8               	movlw	248
  2593  0575  00F2               	movwf	??_delay_x10ms
  2594  0576                     u2297:	
  2595  0576  0BF2               	decfsz	??_delay_x10ms,f
  2596  0577  2D76               	goto	u2297
  2597  0578  0BF3               	decfsz	??_delay_x10ms+1,f
  2598  0579  2D76               	goto	u2297
  2599  057A  0064               	clrwdt
  2600  057B  2D6D               	goto	l6521
  2601  057C                     __end_of_delay_x10ms:	
  2602                           
  2603                           	psect	text579
  2604  022C                     __ptext579:	
  2605 ;; =============== function _delay_x10ms ends ============
  2606                           
  2607                           
  2608 ;; *************** function _get_RFID *****************
  2609 ;; Defined at:
  2610 ;;		line 21 in file "rfid125.c"
  2611 ;; Parameters:    Size  Location     Type
  2612 ;;		None
  2613 ;; Auto vars:     Size  Location     Type
  2614 ;;  RF_serial_55   11    0[BANK0 ] unsigned char [11]
  2615 ;;  timeOutVal      2   17[BANK0 ] unsigned int 
  2616 ;;  ii              1   19[BANK0 ] unsigned char 
  2617 ;;  flag_RFID_la    1   16[BANK0 ] unsigned char 
  2618 ;;  i               1   15[BANK0 ] unsigned char 
  2619 ;;  j               1   14[BANK0 ] unsigned char 
  2620 ;;  even_row        1   13[BANK0 ] unsigned char 
  2621 ;;  even_col        1   12[BANK0 ] unsigned char 
  2622 ;;  flag_RFID_sy    1   11[BANK0 ] unsigned char 
  2623 ;; Return value:  Size  Location     Type
  2624 ;;                  1    wreg      unsigned char 
  2625 ;; Registers used:
  2626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2627 ;; Tracked objects:
  2628 ;;		On entry : 60/0
  2629 ;;		On exit  : 60/0
  2630 ;;		Unchanged: FFE9F/0
  2631 ;; Data sizes:     COMMON   BANK0   BANK1
  2632 ;;      Params:         0       0       0
  2633 ;;      Locals:         0      20       0
  2634 ;;      Temps:          1       0       0
  2635 ;;      Totals:         1      20       0
  2636 ;;Total ram usage:       21 bytes
  2637 ;; Hardware stack levels used:    1
  2638 ;; Hardware stack levels required when called:    2
  2639 ;; This function calls:
  2640 ;;		_timerOut
  2641 ;;		___lbdiv
  2642 ;; This function is called by:
  2643 ;;		_main
  2644 ;; This function uses a non-reentrant model
  2645 ;;
  2646  022C                     _get_RFID:	
  2647  022C  3010               	movlw	16
  2648                           
  2649                           ;rfid125.c: 23: unsigned char RF_serial_55bits[11];
  2650                           ;rfid125.c: 24: unsigned int timeOutVal;
  2651                           ;rfid125.c: 25: unsigned char i,ii,j;
  2652                           ;rfid125.c: 26: unsigned char flag_RFID_syn, flag_RFID_last;
  2653                           ;rfid125.c: 27: unsigned char even_row, even_col;
  2654                           ;rfid125.c: 30: flag_RFID_syn = 0;
  2655                           
  2656                           ; Regs used in _get_RFID: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2657  022D  01CA               	clrf	get_RFID@flag_RFID_syn
  2658                           
  2659                           ;rfid125.c: 33: i=16;
  2660  022E  00CE               	movwf	get_RFID@i
  2661  022F                     l6299:	
  2662                           
  2663                           ;rfid125.c: 35: {
  2664                           ;rfid125.c: 36: timeOutVal=timerOut(1,600);
  2665  022F  3058               	movlw	88
  2666  0230  00F2               	movwf	?_timerOut
  2667  0231  3002               	movlw	2
  2668  0232  00F3               	movwf	?_timerOut+1
  2669  0233  3001               	movlw	1
  2670  0234  2425               	fcall	_timerOut
  2671                           
  2672                           ;rfid125.c: 37: if(timeOutVal==0) return 0;
  2673  0235  2362               	fcall	PL2	;call to abstracted procedure
  2674  0236  1903               	btfsc	3,2
  2675  0237  3400               	retlw	0
  2676                           
  2677                           ;rfid125.c: 39: timeOutVal=timerOut(0,600);
  2678  0238  3058               	movlw	88
  2679  0239  2375               	fcall	PL6	;call to abstracted procedure
  2680  023A  2425               	fcall	_timerOut
  2681                           
  2682                           ;rfid125.c: 40: if(timeOutVal==0) return 0;
  2683  023B  2362               	fcall	PL2	;call to abstracted procedure
  2684  023C  1903               	btfsc	3,2
  2685  023D  3400               	retlw	0
  2686  023E  3001               	movlw	1
  2687                           
  2688                           ;rfid125.c: 42: i--;
  2689  023F  03CE               	decf	get_RFID@i,f
  2690                           
  2691                           ;rfid125.c: 43: }
  2692                           ;rfid125.c: 44: while(timeOutVal<290 && i>0);
  2693  0240  0251               	subwf	get_RFID@timeOutVal+1,w
  2694  0241  3022               	movlw	34
  2695  0242  1903               	skipnz
  2696  0243  0250               	subwf	get_RFID@timeOutVal,w
  2697  0244  1803               	skipnc
  2698  0245  2A49               	goto	l2051
  2699  0246  08CE               	movf	get_RFID@i,f
  2700  0247  1D03               	skipz
  2701  0248  2A2F               	goto	l6299
  2702  0249                     l2051:	
  2703                           
  2704                           ;rfid125.c: 45: flag_RFID_last = 1;
  2705  0249  01CF               	clrf	get_RFID@flag_RFID_last
  2706  024A  0ACF               	incf	get_RFID@flag_RFID_last,f
  2707                           
  2708                           ;rfid125.c: 46: i = 0;
  2709  024B  01CE               	clrf	get_RFID@i
  2710  024C                     l6387:	
  2711                           ;rfid125.c: 47: while(i<64)
  2712                           
  2713  024C  3040               	movlw	64
  2714  024D  024E               	subwf	get_RFID@i,w
  2715  024E  1803               	btfsc	3,0
  2716  024F  2AA5               	goto	l6389
  2717                           
  2718                           ;rfid125.c: 48: {
  2719                           ;rfid125.c: 49: for(ii=0;ii<9;ii++)
  2720  0250  01D2               	clrf	get_RFID@ii
  2721  0251                     l6329:	
  2722                           
  2723                           ;rfid125.c: 50: {
  2724                           ;rfid125.c: 51: timeOutVal=timerOut(flag_RFID_last,600);
  2725  0251  236F               	fcall	PL5	;call to abstracted procedure
  2726  0252  2425               	fcall	_timerOut
  2727                           
  2728                           ;rfid125.c: 52: if(timeOutVal==0) return 0;
  2729  0253  2362               	fcall	PL2	;call to abstracted procedure
  2730  0254  1903               	btfsc	3,2
  2731  0255  3400               	retlw	0
  2732                           
  2733                           ;rfid125.c: 54: if(0==flag_RFID_last && timeOutVal<=290 ||
  2734                           ;rfid125.c: 55: 1==flag_RFID_last && timeOutVal>290)
  2735  0256  08CF               	movf	get_RFID@flag_RFID_last,f
  2736  0257  1D03               	skipz
  2737  0258  2A60               	goto	l6341
  2738  0259  3001               	movlw	1
  2739  025A  0251               	subwf	get_RFID@timeOutVal+1,w
  2740  025B  3023               	movlw	35
  2741  025C  1903               	skipnz
  2742  025D  0250               	subwf	get_RFID@timeOutVal,w
  2743  025E  1C03               	skipc
  2744  025F  2A69               	goto	l6345
  2745  0260                     l6341:	
  2746  0260  0B4F               	decfsz	get_RFID@flag_RFID_last,w
  2747  0261  2A77               	goto	l6359
  2748  0262  3001               	movlw	1
  2749  0263  0251               	subwf	get_RFID@timeOutVal+1,w
  2750  0264  3023               	movlw	35
  2751  0265  1903               	skipnz
  2752  0266  0250               	subwf	get_RFID@timeOutVal,w
  2753  0267  1C03               	skipc
  2754  0268  2A77               	goto	l6359
  2755  0269                     l6345:	
  2756                           
  2757                           ;rfid125.c: 56: {
  2758                           ;rfid125.c: 57: if(!flag_RFID_last)
  2759  0269  08CF               	movf	get_RFID@flag_RFID_last,f
  2760  026A  1D03               	skipz
  2761  026B  2A74               	goto	l6355
  2762                           
  2763                           ;rfid125.c: 58: {
  2764                           ;rfid125.c: 59: timeOutVal=timerOut(1,290);
  2765  026C  3022               	movlw	34
  2766  026D  00F2               	movwf	?_timerOut
  2767  026E  3001               	movlw	1
  2768  026F  00F3               	movwf	?_timerOut+1
  2769  0270  2425               	fcall	_timerOut
  2770                           
  2771                           ;rfid125.c: 60: if(timeOutVal==0) return 0;
  2772  0271  2362               	fcall	PL2	;call to abstracted procedure
  2773  0272  1903               	btfsc	3,2
  2774  0273  3400               	retlw	0
  2775  0274                     l6355:	
  2776                           
  2777                           ;rfid125.c: 61: }
  2778                           ;rfid125.c: 62: flag_RFID_last = 0;
  2779  0274  01CF               	clrf	get_RFID@flag_RFID_last
  2780                           
  2781                           ;rfid125.c: 63: i++;
  2782  0275  0ACE               	incf	get_RFID@i,f
  2783                           
  2784                           ;rfid125.c: 64: }
  2785  0276  2A9A               	goto	l6379
  2786  0277                     l6359:	
  2787                           
  2788                           ;rfid125.c: 65: else
  2789                           ;rfid125.c: 66: if(0==flag_RFID_last && timeOutVal>290 ||
  2790                           ;rfid125.c: 67: 1==flag_RFID_last && timeOutVal<=290)
  2791  0277  08CF               	movf	get_RFID@flag_RFID_last,f
  2792  0278  1D03               	skipz
  2793  0279  2A81               	goto	l6363
  2794  027A  3001               	movlw	1
  2795  027B  0251               	subwf	get_RFID@timeOutVal+1,w
  2796  027C  3023               	movlw	35
  2797  027D  1903               	skipnz
  2798  027E  0250               	subwf	get_RFID@timeOutVal,w
  2799  027F  1803               	skipnc
  2800  0280  2A8A               	goto	l6367
  2801  0281                     l6363:	
  2802  0281  0B4F               	decfsz	get_RFID@flag_RFID_last,w
  2803  0282  2A9A               	goto	l6379
  2804  0283  3001               	movlw	1
  2805  0284  0251               	subwf	get_RFID@timeOutVal+1,w
  2806  0285  3023               	movlw	35
  2807  0286  1903               	skipnz
  2808  0287  0250               	subwf	get_RFID@timeOutVal,w
  2809  0288  1803               	skipnc
  2810  0289  2A9A               	goto	l6379
  2811  028A                     l6367:	
  2812                           
  2813                           ;rfid125.c: 68: {
  2814                           ;rfid125.c: 69: if(flag_RFID_last)
  2815  028A  084F               	movf	get_RFID@flag_RFID_last,w
  2816  028B  1903               	btfsc	3,2
  2817  028C  2A96               	goto	l2070
  2818                           
  2819                           ;rfid125.c: 70: {
  2820                           ;rfid125.c: 71: timeOutVal=timerOut(0,290);
  2821  028D  3022               	movlw	34
  2822  028E  00F2               	movwf	?_timerOut
  2823  028F  3001               	movlw	1
  2824  0290  00F3               	movwf	?_timerOut+1
  2825  0291  3000               	movlw	0
  2826  0292  2425               	fcall	_timerOut
  2827                           
  2828                           ;rfid125.c: 72: if(timeOutVal==0) return 0;
  2829  0293  2362               	fcall	PL2	;call to abstracted procedure
  2830  0294  1903               	btfsc	3,2
  2831  0295  3400               	retlw	0
  2832  0296                     l2070:	
  2833                           
  2834                           ;rfid125.c: 73: }
  2835                           ;rfid125.c: 74: flag_RFID_last = 1;
  2836  0296  01CF               	clrf	get_RFID@flag_RFID_last
  2837  0297  0ACF               	incf	get_RFID@flag_RFID_last,f
  2838                           
  2839                           ;rfid125.c: 75: i++;
  2840  0298  0ACE               	incf	get_RFID@i,f
  2841                           
  2842                           ;rfid125.c: 77: break;
  2843  0299  2A9F               	goto	l6383
  2844  029A                     l6379:	
  2845  029A  3009               	movlw	9
  2846  029B  0AD2               	incf	get_RFID@ii,f
  2847  029C  0252               	subwf	get_RFID@ii,w
  2848  029D  1C03               	skipc
  2849  029E  2A51               	goto	l6329
  2850  029F                     l6383:	
  2851                           
  2852                           ;rfid125.c: 78: }
  2853                           ;rfid125.c: 80: }
  2854                           ;rfid125.c: 81: if(9==ii)
  2855  029F  0852               	movf	get_RFID@ii,w
  2856  02A0  3A09               	xorlw	9
  2857  02A1  1D03               	skipz
  2858  02A2  2A4C               	goto	l6387
  2859                           
  2860                           ;rfid125.c: 82: {
  2861                           ;rfid125.c: 83: flag_RFID_syn = 1;
  2862  02A3  01CA               	clrf	get_RFID@flag_RFID_syn
  2863  02A4  0ACA               	incf	get_RFID@flag_RFID_syn,f
  2864  02A5                     l6389:	
  2865                           ;rfid125.c: 84: break;
  2866                           
  2867                           
  2868                           ;rfid125.c: 85: }
  2869                           ;rfid125.c: 86: }
  2870                           ;rfid125.c: 88: if(!flag_RFID_syn)
  2871  02A5  08CA               	movf	get_RFID@flag_RFID_syn,f
  2872  02A6  1903               	btfsc	3,2
  2873  02A7  3400               	retlw	0
  2874                           
  2875                           ;rfid125.c: 91: }
  2876                           ;rfid125.c: 92: for(ii=0;ii<55;ii++)
  2877  02A8  01D2               	clrf	get_RFID@ii
  2878  02A9                     l6401:	
  2879                           
  2880                           ;rfid125.c: 93: {
  2881                           ;rfid125.c: 94: i = ii/5;
  2882  02A9  3005               	movlw	5
  2883  02AA  00F2               	movwf	?___lbdiv
  2884  02AB  0852               	movf	get_RFID@ii,w
  2885  02AC  24DC               	fcall	___lbdiv
  2886  02AD  00CE               	movwf	get_RFID@i
  2887                           
  2888                           ;rfid125.c: 95: timeOutVal=timerOut(flag_RFID_last,600);
  2889  02AE  236F               	fcall	PL5	;call to abstracted procedure
  2890  02AF  2425               	fcall	_timerOut
  2891                           
  2892                           ;rfid125.c: 96: if(timeOutVal==0) return 0;
  2893  02B0  2362               	fcall	PL2	;call to abstracted procedure
  2894  02B1  1903               	btfsc	3,2
  2895  02B2  3400               	retlw	0
  2896                           
  2897                           ;rfid125.c: 98: if(0==flag_RFID_last && timeOutVal<=290 ||
  2898                           ;rfid125.c: 99: 1==flag_RFID_last && timeOutVal>290)
  2899  02B3  08CF               	movf	get_RFID@flag_RFID_last,f
  2900  02B4  1D03               	skipz
  2901  02B5  2ABD               	goto	l6415
  2902  02B6  3001               	movlw	1
  2903  02B7  0251               	subwf	get_RFID@timeOutVal+1,w
  2904  02B8  3023               	movlw	35
  2905  02B9  1903               	skipnz
  2906  02BA  0250               	subwf	get_RFID@timeOutVal,w
  2907  02BB  1C03               	skipc
  2908  02BC  2AC6               	goto	l6419
  2909  02BD                     l6415:	
  2910  02BD  0B4F               	decfsz	get_RFID@flag_RFID_last,w
  2911  02BE  2AD8               	goto	l6435
  2912  02BF  3001               	movlw	1
  2913  02C0  0251               	subwf	get_RFID@timeOutVal+1,w
  2914  02C1  3023               	movlw	35
  2915  02C2  1903               	skipnz
  2916  02C3  0250               	subwf	get_RFID@timeOutVal,w
  2917  02C4  1C03               	skipc
  2918  02C5  2AD8               	goto	l6435
  2919  02C6                     l6419:	
  2920                           
  2921                           ;rfid125.c: 100: {
  2922                           ;rfid125.c: 101: if(!flag_RFID_last)
  2923  02C6  08CF               	movf	get_RFID@flag_RFID_last,f
  2924  02C7  1D03               	skipz
  2925  02C8  2AD1               	goto	l6429
  2926                           
  2927                           ;rfid125.c: 102: {
  2928                           ;rfid125.c: 103: timeOutVal=timerOut(1,290);
  2929  02C9  3022               	movlw	34
  2930  02CA  00F2               	movwf	?_timerOut
  2931  02CB  3001               	movlw	1
  2932  02CC  00F3               	movwf	?_timerOut+1
  2933  02CD  2425               	fcall	_timerOut
  2934                           
  2935                           ;rfid125.c: 104: if(timeOutVal==0) return 0;
  2936  02CE  2362               	fcall	PL2	;call to abstracted procedure
  2937  02CF  1903               	btfsc	3,2
  2938  02D0  3400               	retlw	0
  2939  02D1                     l6429:	
  2940                           
  2941                           ;rfid125.c: 105: }
  2942                           ;rfid125.c: 106: flag_RFID_last = 0;
  2943  02D1  01CF               	clrf	get_RFID@flag_RFID_last
  2944                           
  2945                           ;rfid125.c: 107: RF_serial_55bits[i] <<= 1;
  2946  02D2  2368               	fcall	PL4	;call to abstracted procedure
  2947                           
  2948                           ;rfid125.c: 108: RF_serial_55bits[i] |= 0x01;
  2949  02D3  084E               	movf	get_RFID@i,w
  2950  02D4  3E3F               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2951  02D5  0084               	movwf	4
  2952  02D6  1400               	bsf	0,0
  2953                           
  2954                           ;rfid125.c: 109: }
  2955  02D7  2AF7               	goto	l6455
  2956  02D8                     l6435:	
  2957                           
  2958                           ;rfid125.c: 110: else
  2959                           ;rfid125.c: 111: if(0==flag_RFID_last && timeOutVal>290 ||
  2960                           ;rfid125.c: 112: 1==flag_RFID_last && timeOutVal<=290)
  2961  02D8  08CF               	movf	get_RFID@flag_RFID_last,f
  2962  02D9  1D03               	skipz
  2963  02DA  2AE2               	goto	l6439
  2964  02DB  3001               	movlw	1
  2965  02DC  0251               	subwf	get_RFID@timeOutVal+1,w
  2966  02DD  3023               	movlw	35
  2967  02DE  1903               	skipnz
  2968  02DF  0250               	subwf	get_RFID@timeOutVal,w
  2969  02E0  1803               	skipnc
  2970  02E1  2AEB               	goto	l6443
  2971  02E2                     l6439:	
  2972  02E2  0B4F               	decfsz	get_RFID@flag_RFID_last,w
  2973  02E3  2AF7               	goto	l6455
  2974  02E4  3001               	movlw	1
  2975  02E5  0251               	subwf	get_RFID@timeOutVal+1,w
  2976  02E6  3023               	movlw	35
  2977  02E7  1903               	skipnz
  2978  02E8  0250               	subwf	get_RFID@timeOutVal,w
  2979  02E9  1803               	skipnc
  2980  02EA  2AF7               	goto	l6455
  2981  02EB                     l6443:	
  2982                           
  2983                           ;rfid125.c: 113: {
  2984                           ;rfid125.c: 114: if(flag_RFID_last)
  2985  02EB  084F               	movf	get_RFID@flag_RFID_last,w
  2986  02EC  1903               	btfsc	3,2
  2987  02ED  2AF4               	goto	l2091
  2988                           
  2989                           ;rfid125.c: 115: {
  2990                           ;rfid125.c: 116: timeOutVal=timerOut(0,600);
  2991  02EE  3058               	movlw	88
  2992  02EF  2375               	fcall	PL6	;call to abstracted procedure
  2993  02F0  2425               	fcall	_timerOut
  2994                           
  2995                           ;rfid125.c: 117: if(timeOutVal==0) return 0;
  2996  02F1  2362               	fcall	PL2	;call to abstracted procedure
  2997  02F2  1903               	btfsc	3,2
  2998  02F3  3400               	retlw	0
  2999  02F4                     l2091:	
  3000                           
  3001                           ;rfid125.c: 118: }
  3002                           ;rfid125.c: 119: flag_RFID_last = 1;
  3003  02F4  01CF               	clrf	get_RFID@flag_RFID_last
  3004  02F5  0ACF               	incf	get_RFID@flag_RFID_last,f
  3005                           
  3006                           ;rfid125.c: 120: RF_serial_55bits[i] <<= 1;
  3007  02F6  2368               	fcall	PL4	;call to abstracted procedure
  3008  02F7                     l6455:	
  3009  02F7  3037               	movlw	55
  3010  02F8  0AD2               	incf	get_RFID@ii,f
  3011  02F9  0252               	subwf	get_RFID@ii,w
  3012  02FA  1C03               	skipc
  3013  02FB  2AA9               	goto	l6401
  3014                           
  3015                           ;rfid125.c: 121: }
  3016                           ;rfid125.c: 122: }
  3017                           ;rfid125.c: 123: if(55==ii)
  3018  02FC  0852               	movf	get_RFID@ii,w
  3019  02FD  3A37               	xorlw	55
  3020  02FE  1D03               	skipz
  3021  02FF  3400               	retlw	0
  3022                           
  3023                           ;rfid125.c: 124: {
  3024                           ;rfid125.c: 125: even_col = 0;
  3025  0300  01CB               	clrf	get_RFID@even_col
  3026                           
  3027                           ;rfid125.c: 126: for(ii=0;ii<10;ii++)
  3028  0301  01D2               	clrf	get_RFID@ii
  3029  0302                     l6467:	
  3030                           
  3031                           ;rfid125.c: 127: {
  3032                           ;rfid125.c: 128: even_row = (RF_serial_55bits[ii] & 0x01);
  3033  0302  0852               	movf	get_RFID@ii,w
  3034  0303  3E3F               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3035  0304  0084               	movwf	4
  3036  0305  1383               	bcf	3,7	;select IRP bank0
  3037  0306  0800               	movf	0,w
  3038  0307  00CC               	movwf	get_RFID@even_row
  3039  0308  3001               	movlw	1
  3040  0309  05CC               	andwf	get_RFID@even_row,f
  3041                           
  3042                           ;rfid125.c: 129: for(j=1;j<5;j++)
  3043  030A  01CD               	clrf	get_RFID@j
  3044  030B  0ACD               	incf	get_RFID@j,f
  3045  030C                     l6477:	
  3046                           
  3047                           ;rfid125.c: 130: {
  3048                           ;rfid125.c: 131: even_row = even_row ^ ((RF_serial_55bits[ii]>>j) & 0x01);
  3049  030C  0852               	movf	get_RFID@ii,w
  3050  030D  3E3F               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3051  030E  0084               	movwf	4
  3052  030F  0800               	movf	0,w
  3053  0310  00F7               	movwf	??_get_RFID
  3054  0311  0A4D               	incf	get_RFID@j,w
  3055  0312  2B15               	goto	u1674
  3056  0313                     u1675:	
  3057  0313  1003               	clrc
  3058  0314  0CF7               	rrf	??_get_RFID,f
  3059  0315                     u1674:	
  3060  0315  3EFF               	addlw	-1
  3061  0316  1D03               	skipz
  3062  0317  2B13               	goto	u1675
  3063  0318  0877               	movf	??_get_RFID,w
  3064  0319  3901               	andlw	1
  3065  031A  06CC               	xorwf	get_RFID@even_row,f
  3066  031B  3005               	movlw	5
  3067  031C  0ACD               	incf	get_RFID@j,f
  3068  031D  024D               	subwf	get_RFID@j,w
  3069  031E  1C03               	skipc
  3070  031F  2B0C               	goto	l6477
  3071                           
  3072                           ;rfid125.c: 132: }
  3073                           ;rfid125.c: 133: if(even_row & 0x01)
  3074  0320  184C               	btfsc	get_RFID@even_row,0
  3075  0321  3400               	retlw	0
  3076                           
  3077                           ;rfid125.c: 136: }
  3078                           ;rfid125.c: 138: RF_serial_55bits[ii] <<= 3;
  3079  0322  0852               	movf	get_RFID@ii,w
  3080  0323  3E3F               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3081  0324  0084               	movwf	4
  3082  0325  0D80               	rlf	0,f
  3083  0326  0D80               	rlf	0,f
  3084  0327  0D00               	rlf	0,w
  3085  0328  39F8               	andlw	248
  3086  0329  0080               	movwf	0
  3087                           
  3088                           ;rfid125.c: 140: i = RF_serial_55bits[ii];
  3089  032A  0852               	movf	get_RFID@ii,w
  3090  032B  3E3F               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3091  032C  0084               	movwf	4
  3092  032D  0800               	movf	0,w
  3093  032E  00CE               	movwf	get_RFID@i
  3094                           
  3095                           ;rfid125.c: 141: if( 0==ii%2 )
  3096  032F  1852               	btfsc	get_RFID@ii,0
  3097  0330  2B3E               	goto	l6493
  3098                           
  3099                           ;rfid125.c: 142: {
  3100                           ;rfid125.c: 143: keyID[ii/2] = (i & 0xF0);
  3101  0331  1003               	clrc
  3102  0332  0C52               	rrf	get_RFID@ii,w
  3103  0333  3E60               	addlw	_keyID& (0+255)
  3104  0334  0084               	movwf	4
  3105  0335  084E               	movf	get_RFID@i,w
  3106  0336  0080               	movwf	0
  3107  0337  1003               	clrc
  3108  0338  0C52               	rrf	get_RFID@ii,w
  3109  0339  3E60               	addlw	_keyID& (0+255)
  3110  033A  0084               	movwf	4
  3111  033B  30F0               	movlw	240
  3112  033C  0580               	andwf	0,f
  3113                           
  3114                           ;rfid125.c: 144: }
  3115  033D  2B48               	goto	l6497
  3116  033E                     l6493:	
  3117  033E  300F               	movlw	15
  3118                           
  3119                           ;rfid125.c: 145: else
  3120                           ;rfid125.c: 146: {
  3121                           ;rfid125.c: 147: i >>=4;
  3122  033F  0ECE               	swapf	get_RFID@i,f
  3123  0340  05CE               	andwf	get_RFID@i,f
  3124                           
  3125                           ;rfid125.c: 148: keyID[ii/2] |= (i & 0x0F);
  3126  0341  1003               	clrc
  3127  0342  0C52               	rrf	get_RFID@ii,w
  3128  0343  3E60               	addlw	_keyID& (0+255)
  3129  0344  0084               	movwf	4
  3130  0345  084E               	movf	get_RFID@i,w
  3131  0346  390F               	andlw	15
  3132  0347  0480               	iorwf	0,f
  3133  0348                     l6497:	
  3134                           
  3135                           ;rfid125.c: 149: }
  3136                           ;rfid125.c: 150: even_col ^= RF_serial_55bits[ii];
  3137  0348  0852               	movf	get_RFID@ii,w
  3138  0349  3E3F               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3139  034A  0084               	movwf	4
  3140  034B  0800               	movf	0,w
  3141  034C  06CB               	xorwf	get_RFID@even_col,f
  3142  034D  300A               	movlw	10
  3143  034E  0AD2               	incf	get_RFID@ii,f
  3144  034F  0252               	subwf	get_RFID@ii,w
  3145  0350  1C03               	skipc
  3146  0351  2B02               	goto	l6467
  3147                           
  3148                           ;rfid125.c: 151: }
  3149                           ;rfid125.c: 152: RF_serial_55bits[10] <<= 3;
  3150  0352  0DC9               	rlf	get_RFID@RF_serial_55bits+10,f
  3151  0353  0DC9               	rlf	get_RFID@RF_serial_55bits+10,f
  3152  0354  0D49               	rlf	get_RFID@RF_serial_55bits+10,w
  3153  0355  39F8               	andlw	248
  3154  0356  00C9               	movwf	get_RFID@RF_serial_55bits+10
  3155  0357  30F0               	movlw	240
  3156                           
  3157                           ;rfid125.c: 153: keyID[0] =0x00;
  3158  0358  01E0               	clrf	_keyID
  3159                           
  3160                           ;rfid125.c: 154: if(((RF_serial_55bits[10] & 0xf0)==(even_col & 0xf0)) && (0==(RF_serial
      +                          _55bits[10]&0x08)))
  3161  0359  054B               	andwf	get_RFID@even_col,w
  3162  035A  00F7               	movwf	??_get_RFID
  3163  035B  0849               	movf	get_RFID@RF_serial_55bits+10,w
  3164  035C  39F0               	andlw	240
  3165  035D  0677               	xorwf	??_get_RFID,w
  3166  035E  1903               	btfsc	3,2
  3167  035F  19C9               	btfsc	get_RFID@RF_serial_55bits+10,3
  3168  0360  3400               	retlw	0
  3169                           
  3170                           ;rfid125.c: 155: {
  3171                           ;rfid125.c: 157: return 1;
  3172  0361  3401               	retlw	1
  3173  0362                     __end_of_get_RFID:	
  3174  0362                     PL2:	
  3175  0362  0873               	movf	?_timerOut+1,w
  3176  0363  00D1               	movwf	get_RFID@timeOutVal+1
  3177  0364  0872               	movf	?_timerOut,w
  3178  0365  00D0               	movwf	get_RFID@timeOutVal
  3179  0366  0451               	iorwf	get_RFID@timeOutVal+1,w
  3180  0367  0008               	return
  3181  0368                     PL4:	
  3182  0368  084E               	movf	get_RFID@i,w
  3183  0369  3E3F               	addlw	get_RFID@RF_serial_55bits& (0+255)
  3184  036A  0084               	movwf	4
  3185  036B  1383               	bcf	3,7	;select IRP bank0
  3186  036C  1003               	clrc
  3187  036D  0D80               	rlf	0,f
  3188  036E  0008               	return
  3189  036F                     PL5:	
  3190  036F  3058               	movlw	88
  3191  0370  00F2               	movwf	?_timerOut
  3192  0371  3002               	movlw	2
  3193  0372  00F3               	movwf	?_timerOut+1
  3194  0373  084F               	movf	get_RFID@flag_RFID_last,w
  3195  0374  0008               	return
  3196  0375                     PL6:	
  3197  0375  00F2               	movwf	?_timerOut
  3198  0376  3002               	movlw	2
  3199  0377  00F3               	movwf	?_timerOut+1
  3200  0378  3400               	retlw	0
  3201                           
  3202                           	psect	text580
  3203  0402                     __ptext580:	
  3204 ;; =============== function _get_RFID ends ============
  3205                           
  3206                           
  3207 ;; *************** function _eepromWriteByte *****************
  3208 ;; Defined at:
  3209 ;;		line 26 in file "ms82_eeprom.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;  EEAddr          1    wreg     unsigned char 
  3212 ;;  EEData          1    2[COMMON] unsigned char 
  3213 ;; Auto vars:     Size  Location     Type
  3214 ;;  EEAddr          1    5[COMMON] unsigned char 
  3215 ;; Return value:  Size  Location     Type
  3216 ;;		None               void
  3217 ;; Registers used:
  3218 ;;		wreg
  3219 ;; Tracked objects:
  3220 ;;		On entry : 0/20
  3221 ;;		On exit  : 0/0
  3222 ;;		Unchanged: 0/0
  3223 ;; Data sizes:     COMMON   BANK0   BANK1
  3224 ;;      Params:         1       0       0
  3225 ;;      Locals:         1       0       0
  3226 ;;      Temps:          2       0       0
  3227 ;;      Totals:         4       0       0
  3228 ;;Total ram usage:        4 bytes
  3229 ;; Hardware stack levels used:    1
  3230 ;; Hardware stack levels required when called:    1
  3231 ;; This function calls:
  3232 ;;		Nothing
  3233 ;; This function is called by:
  3234 ;;		_eepromWriteBlock
  3235 ;;		_main
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238  0402                     _eepromWriteByte:	
  3239                           
  3240                           ; Regs used in _eepromWriteByte: [wreg]
  3241                           ;eepromWriteByte@EEAddr stored from wreg
  3242  0402  00F5               	movwf	eepromWriteByte@EEAddr
  3243                           
  3244                           ;ms82_eeprom.c: 27: GIE = 0;
  3245  0403  138B               	bcf	11,7
  3246  0404                     l1325:	
  3247                           ;ms82_eeprom.c: 29: {
  3248                           ;ms82_eeprom.c: 30: while(GIE) asm("clrwdt");
  3249                           
  3250  0404  1F8B               	btfss	11,7
  3251  0405  2C08               	goto	l6285
  3252  0406  0064               	clrwdt	;#
  3253  0407  2C04               	goto	l1325
  3254  0408                     l6285:	
  3255                           
  3256                           ;ms82_eeprom.c: 31: EEADR = EEAddr;
  3257  0408  0875               	movf	eepromWriteByte@EEAddr,w
  3258  0409  1683               	bsf	3,5	;RP0=1, select bank1
  3259  040A  1303               	bcf	3,6	;RP1=0, select bank1
  3260  040B  009B               	movwf	27	;volatile
  3261                           
  3262                           ;ms82_eeprom.c: 32: EEDAT = EEData;
  3263  040C  0872               	movf	eepromWriteByte@EEData,w
  3264  040D  009A               	movwf	26	;volatile
  3265  040E  3034               	movlw	52
  3266                           
  3267                           ;ms82_eeprom.c: 33: EEIF = 0;
  3268  040F  1283               	bcf	3,5	;RP0=0, select bank0
  3269  0410  138C               	bcf	12,7
  3270                           
  3271                           ;ms82_eeprom.c: 34: EECON1 = 0x34;
  3272  0411  1683               	bsf	3,5	;RP0=1, select bank1
  3273  0412  009C               	movwf	28	;volatile
  3274                           
  3275                           ;ms82_eeprom.c: 35: WR = 1;
  3276  0413  141D               	bsf	29,0
  3277  0414                     l1328:	
  3278                           ;ms82_eeprom.c: 36: while(WR) asm("clrwdt");
  3279                           
  3280  0414  1683               	bsf	3,5	;RP0=1, select bank1
  3281  0415  1303               	bcf	3,6	;RP1=0, select bank1
  3282  0416  1C1D               	btfss	29,0
  3283  0417  2C1A               	goto	l6291
  3284  0418  0064               	clrwdt	;#
  3285  0419  2C14               	goto	l1328
  3286  041A                     l6291:	
  3287                           
  3288                           ;ms82_eeprom.c: 37: _delay((unsigned long)((2)*(8000000/4000.0)));
  3289  041A  3006               	movlw	6
  3290  041B  00F4               	movwf	??_eepromWriteByte+1
  3291  041C  3030               	movlw	48
  3292  041D  00F3               	movwf	??_eepromWriteByte
  3293  041E                     u2307:	
  3294  041E  0BF3               	decfsz	??_eepromWriteByte,f
  3295  041F  2C1E               	goto	u2307
  3296  0420  0BF4               	decfsz	??_eepromWriteByte+1,f
  3297  0421  2C1E               	goto	u2307
  3298  0422  0064               	clrwdt
  3299                           
  3300                           ;ms82_eeprom.c: 38: }
  3301                           ;ms82_eeprom.c: 39: GIE = 1;
  3302  0423  178B               	bsf	11,7
  3303  0424  0008               	return
  3304  0425                     __end_of_eepromWriteByte:	
  3305                           
  3306                           	psect	text581
  3307  054A                     __ptext581:	
  3308 ;; =============== function _eepromWriteByte ends ============
  3309                           
  3310                           
  3311 ;; *************** function _eepromReadBlock *****************
  3312 ;; Defined at:
  3313 ;;		line 18 in file "ms82_eeprom.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;  addStart        1    wreg     unsigned char 
  3316 ;;  buff            1    4[COMMON] PTR unsigned char 
  3317 ;;		 -> buffTag(25), 
  3318 ;;  len             1    5[COMMON] unsigned char 
  3319 ;; Auto vars:     Size  Location     Type
  3320 ;;  addStart        1    7[COMMON] unsigned char 
  3321 ;;  i               1    8[COMMON] unsigned char 
  3322 ;; Return value:  Size  Location     Type
  3323 ;;		None               void
  3324 ;; Registers used:
  3325 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/20
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: FFE9F/0
  3330 ;; Data sizes:     COMMON   BANK0   BANK1
  3331 ;;      Params:         2       0       0
  3332 ;;      Locals:         2       0       0
  3333 ;;      Temps:          1       0       0
  3334 ;;      Totals:         5       0       0
  3335 ;;Total ram usage:        5 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:    2
  3338 ;; This function calls:
  3339 ;;		_eepromReadByte
  3340 ;; This function is called by:
  3341 ;;		_main
  3342 ;; This function uses a non-reentrant model
  3343 ;;
  3344  054A                     _eepromReadBlock:	
  3345                           
  3346                           ; Regs used in _eepromReadBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3347                           ;eepromReadBlock@addStart stored from wreg
  3348  054A  00F7               	movwf	eepromReadBlock@addStart
  3349                           
  3350                           ;ms82_eeprom.c: 19: unsigned char i;
  3351                           ;ms82_eeprom.c: 20: for(i=0;i<len;i++){
  3352  054B  01F8               	clrf	eepromReadBlock@i
  3353  054C                     l6281:	
  3354  054C  0875               	movf	eepromReadBlock@len,w
  3355  054D  0278               	subwf	eepromReadBlock@i,w
  3356  054E  1803               	btfsc	3,0
  3357  054F  0008               	return
  3358                           
  3359                           ;ms82_eeprom.c: 21: buff[i] = eepromReadByte(addStart+i);
  3360  0550  0878               	movf	eepromReadBlock@i,w
  3361  0551  0774               	addwf	eepromReadBlock@buff,w
  3362  0552  00F6               	movwf	??_eepromReadBlock
  3363  0553  0084               	movwf	4
  3364  0554  0878               	movf	eepromReadBlock@i,w
  3365  0555  0777               	addwf	eepromReadBlock@addStart,w
  3366  0556  25E1               	fcall	_eepromReadByte
  3367  0557  1383               	bcf	3,7	;select IRP bank0
  3368  0558  0080               	movwf	0
  3369  0559  0AF8               	incf	eepromReadBlock@i,f
  3370  055A  2D4C               	goto	l6281
  3371  055B                     __end_of_eepromReadBlock:	
  3372                           
  3373                           	psect	text582
  3374  05CD                     __ptext582:	
  3375 ;; =============== function _eepromReadBlock ends ============
  3376                           
  3377                           
  3378 ;; *************** function _sys_init *****************
  3379 ;; Defined at:
  3380 ;;		line 3 in file "sysinit.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;		None
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;		None
  3385 ;; Return value:  Size  Location     Type
  3386 ;;		None               void
  3387 ;; Registers used:
  3388 ;;		wreg
  3389 ;; Tracked objects:
  3390 ;;		On entry : 0/0
  3391 ;;		On exit  : 60/20
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMMON   BANK0   BANK1
  3394 ;;      Params:         0       0       0
  3395 ;;      Locals:         0       0       0
  3396 ;;      Temps:          0       0       0
  3397 ;;      Totals:         0       0       0
  3398 ;;Total ram usage:        0 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; Hardware stack levels required when called:    1
  3401 ;; This function calls:
  3402 ;;		Nothing
  3403 ;; This function is called by:
  3404 ;;		_main
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407  05CD                     _sys_init:	
  3408                           
  3409                           ;sysinit.c: 21: OSCCON = 0B01100001;
  3410                           
  3411                           ; Regs used in _sys_init: [wreg]
  3412  05CD  3061               	movlw	97
  3413  05CE  1683               	bsf	3,5	;RP0=1, select bank1
  3414  05CF  1303               	bcf	3,6	;RP1=0, select bank1
  3415  05D0  008F               	movwf	15	;volatile
  3416                           
  3417                           ;sysinit.c: 22: _nop();
  3418  05D1  0000               	nop
  3419  05D2                     l651:	
  3420                           ;sysinit.c: 28: while(HTS==0);
  3421                           
  3422  05D2  1683               	bsf	3,5	;RP0=1, select bank1
  3423  05D3  1303               	bcf	3,6	;RP1=0, select bank1
  3424  05D4  190F               	btfsc	15,2
  3425  05D5  0008               	return
  3426  05D6  2DD2               	goto	l651
  3427  05D7                     __end_of_sys_init:	
  3428                           
  3429                           	psect	text583
  3430  04DC                     __ptext583:	
  3431 ;; =============== function _sys_init ends ============
  3432                           
  3433                           
  3434 ;; *************** function ___lbdiv *****************
  3435 ;; Defined at:
  3436 ;;		line 5 in file "D:\OneDrive\SmarRF\MCU\MC82\IDE\ORIGINIDE_V2.0.9\Program Files (x86)\HI-TECH Software\PICC\9.83\sour
      +ces\lbdiv.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;  dividend        1    wreg     unsigned char 
  3439 ;;  divisor         1    2[COMMON] unsigned char 
  3440 ;; Auto vars:     Size  Location     Type
  3441 ;;  dividend        1    3[COMMON] unsigned char 
  3442 ;;  quotient        1    5[COMMON] unsigned char 
  3443 ;;  counter         1    4[COMMON] unsigned char 
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  1    wreg      unsigned char 
  3446 ;; Registers used:
  3447 ;;		wreg, status,2, status,0
  3448 ;; Tracked objects:
  3449 ;;		On entry : 60/0
  3450 ;;		On exit  : 60/0
  3451 ;;		Unchanged: FFF9F/0
  3452 ;; Data sizes:     COMMON   BANK0   BANK1
  3453 ;;      Params:         1       0       0
  3454 ;;      Locals:         3       0       0
  3455 ;;      Temps:          0       0       0
  3456 ;;      Totals:         4       0       0
  3457 ;;Total ram usage:        4 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; Hardware stack levels required when called:    1
  3460 ;; This function calls:
  3461 ;;		Nothing
  3462 ;; This function is called by:
  3463 ;;		_get_RFID
  3464 ;;		_id_search
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467  04DC                     ___lbdiv:	
  3468                           
  3469                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3470                           ;___lbdiv@dividend stored from wreg
  3471  04DC  00F3               	movwf	___lbdiv@dividend
  3472  04DD  01F5               	clrf	___lbdiv@quotient
  3473  04DE  0872               	movf	___lbdiv@divisor,w
  3474  04DF  1903               	btfsc	3,2
  3475  04E0  2CF5               	goto	l6267
  3476  04E1  01F4               	clrf	___lbdiv@counter
  3477  04E2                     l6253:	
  3478  04E2  0AF4               	incf	___lbdiv@counter,f
  3479  04E3  1BF2               	btfsc	___lbdiv@divisor,7
  3480  04E4  2CE8               	goto	l4917
  3481  04E5  1003               	clrc
  3482  04E6  0DF2               	rlf	___lbdiv@divisor,f
  3483  04E7  2CE2               	goto	l6253
  3484  04E8                     l4917:	
  3485  04E8  1003               	clrc
  3486  04E9  0DF5               	rlf	___lbdiv@quotient,f
  3487  04EA  0872               	movf	___lbdiv@divisor,w
  3488  04EB  0273               	subwf	___lbdiv@dividend,w
  3489  04EC  1C03               	skipc
  3490  04ED  2CF2               	goto	L9
  3491  04EE  0872               	movf	___lbdiv@divisor,w
  3492  04EF  02F3               	subwf	___lbdiv@dividend,f
  3493  04F0  1475               	bsf	___lbdiv@quotient,0
  3494  04F1  1003               	clrc
  3495  04F2                     L9:	
  3496  04F2  0CF2               	rrf	___lbdiv@divisor,f
  3497  04F3  0BF4               	decfsz	___lbdiv@counter,f
  3498  04F4  2CE8               	goto	l4917
  3499  04F5                     l6267:	
  3500  04F5  0875               	movf	___lbdiv@quotient,w
  3501  04F6  0008               	return
  3502  04F7                     __end_of___lbdiv:	
  3503                           
  3504                           	psect	text584
  3505  059A                     __ptext584:	
  3506 ;; =============== function ___lbdiv ends ============
  3507                           
  3508                           
  3509 ;; *************** function ___bmul *****************
  3510 ;; Defined at:
  3511 ;;		line 3 in file "D:\OneDrive\SmarRF\MCU\MC82\IDE\ORIGINIDE_V2.0.9\Program Files (x86)\HI-TECH Software\PICC\9.83\sour
      +ces\bmul.c"
  3512 ;; Parameters:    Size  Location     Type
  3513 ;;  multiplier      1    wreg     unsigned char 
  3514 ;;  multiplicand    1    2[COMMON] unsigned char 
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;  multiplier      1    4[COMMON] unsigned char 
  3517 ;;  product         1    3[COMMON] unsigned char 
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  1    wreg      unsigned char 
  3520 ;; Registers used:
  3521 ;;		wreg, status,2, status,0
  3522 ;; Tracked objects:
  3523 ;;		On entry : 60/0
  3524 ;;		On exit  : 60/0
  3525 ;;		Unchanged: FFF9F/0
  3526 ;; Data sizes:     COMMON   BANK0   BANK1
  3527 ;;      Params:         1       0       0
  3528 ;;      Locals:         2       0       0
  3529 ;;      Temps:          0       0       0
  3530 ;;      Totals:         3       0       0
  3531 ;;Total ram usage:        3 bytes
  3532 ;; Hardware stack levels used:    1
  3533 ;; Hardware stack levels required when called:    1
  3534 ;; This function calls:
  3535 ;;		Nothing
  3536 ;; This function is called by:
  3537 ;;		_id_replate
  3538 ;; This function uses a non-reentrant model
  3539 ;;
  3540  059A                     ___bmul:	
  3541                           
  3542                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3543                           ;___bmul@multiplier stored from wreg
  3544  059A  00F4               	movwf	___bmul@multiplier
  3545  059B  01F3               	clrf	___bmul@product
  3546  059C                     l6233:	
  3547  059C  0872               	movf	___bmul@multiplicand,w
  3548  059D  1874               	btfsc	___bmul@multiplier,0
  3549  059E  07F3               	addwf	___bmul@product,f
  3550  059F  1003               	clrc
  3551  05A0  0DF2               	rlf	___bmul@multiplicand,f
  3552  05A1  1003               	clrc
  3553  05A2  0CF4               	rrf	___bmul@multiplier,f
  3554  05A3  08F4               	movf	___bmul@multiplier,f
  3555  05A4  1D03               	skipz
  3556  05A5  2D9C               	goto	l6233
  3557  05A6  0873               	movf	___bmul@product,w
  3558  05A7  0008               	return
  3559  05A8                     __end_of___bmul:	
  3560                           
  3561                           	psect	text585
  3562  05C2                     __ptext585:	
  3563 ;; =============== function ___bmul ends ============
  3564                           
  3565                           
  3566 ;; *************** function _setState *****************
  3567 ;; Defined at:
  3568 ;;		line 117 in file "MAIN.C"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;  stt             1    wreg     unsigned char 
  3571 ;;  _tOut           2    2[COMMON] unsigned int 
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;  stt             1    4[COMMON] unsigned char 
  3574 ;; Return value:  Size  Location     Type
  3575 ;;		None               void
  3576 ;; Registers used:
  3577 ;;		wreg, status,2
  3578 ;; Tracked objects:
  3579 ;;		On entry : 0/20
  3580 ;;		On exit  : 60/0
  3581 ;;		Unchanged: FFF9F/0
  3582 ;; Data sizes:     COMMON   BANK0   BANK1
  3583 ;;      Params:         2       0       0
  3584 ;;      Locals:         1       0       0
  3585 ;;      Temps:          0       0       0
  3586 ;;      Totals:         3       0       0
  3587 ;;Total ram usage:        3 bytes
  3588 ;; Hardware stack levels used:    1
  3589 ;; Hardware stack levels required when called:    1
  3590 ;; This function calls:
  3591 ;;		Nothing
  3592 ;; This function is called by:
  3593 ;;		_main
  3594 ;; This function uses a non-reentrant model
  3595 ;;
  3596  05C2                     _setState:	
  3597                           
  3598                           ; Regs used in _setState: [wreg+status,2]
  3599                           ;setState@stt stored from wreg
  3600  05C2  00F4               	movwf	setState@stt
  3601                           
  3602                           ;MAIN.C: 119: mtState = stt;
  3603  05C3  1283               	bcf	3,5	;RP0=0, select bank0
  3604  05C4  1303               	bcf	3,6	;RP1=0, select bank0
  3605  05C5  00DF               	movwf	_mtState
  3606                           
  3607                           ;MAIN.C: 120: timeTick =0;
  3608  05C6  01DC               	clrf	_timeTick
  3609  05C7  01DD               	clrf	_timeTick+1
  3610                           
  3611                           ;MAIN.C: 121: timeOut = _tOut;
  3612  05C8  0873               	movf	setState@_tOut+1,w
  3613  05C9  00DB               	movwf	_timeOut+1
  3614  05CA  0872               	movf	setState@_tOut,w
  3615  05CB  00DA               	movwf	_timeOut
  3616  05CC  0008               	return
  3617  05CD                     __end_of_setState:	
  3618                           
  3619                           	psect	text586
  3620  04F7                     __ptext586:	
  3621 ;; =============== function _setState ends ============
  3622                           
  3623                           
  3624 ;; *************** function _SET_EPWM_ON *****************
  3625 ;; Defined at:
  3626 ;;		line 11 in file "ms82_pwm.c"
  3627 ;; Parameters:    Size  Location     Type
  3628 ;;		None
  3629 ;; Auto vars:     Size  Location     Type
  3630 ;;		None
  3631 ;; Return value:  Size  Location     Type
  3632 ;;		None               void
  3633 ;; Registers used:
  3634 ;;		wreg, status,2
  3635 ;; Tracked objects:
  3636 ;;		On entry : 60/20
  3637 ;;		On exit  : 60/20
  3638 ;;		Unchanged: FFE00/0
  3639 ;; Data sizes:     COMMON   BANK0   BANK1
  3640 ;;      Params:         0       0       0
  3641 ;;      Locals:         0       0       0
  3642 ;;      Temps:          0       0       0
  3643 ;;      Totals:         0       0       0
  3644 ;;Total ram usage:        0 bytes
  3645 ;; Hardware stack levels used:    1
  3646 ;; Hardware stack levels required when called:    1
  3647 ;; This function calls:
  3648 ;;		Nothing
  3649 ;; This function is called by:
  3650 ;;		_main
  3651 ;; This function uses a non-reentrant model
  3652 ;;
  3653  04F7                     _SET_EPWM_ON:	
  3654                           
  3655                           ;ms82_pwm.c: 12: TRISC |= 0b00000100;
  3656                           
  3657                           ; Regs used in _SET_EPWM_ON: [wreg+status,2]
  3658  04F7  1507               	bsf	7,2	;volatile
  3659                           
  3660                           ;ms82_pwm.c: 13: PR2 = 15;
  3661  04F8  300F               	movlw	15
  3662  04F9  0092               	movwf	18	;volatile
  3663                           
  3664                           ;ms82_pwm.c: 14: EPWMR1L =0;
  3665  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  3666  04FB  0193               	clrf	19	;volatile
  3667                           
  3668                           ;ms82_pwm.c: 15: EPWM1CON = 0b10011100;
  3669  04FC  309C               	movlw	156
  3670  04FD  0095               	movwf	21	;volatile
  3671                           
  3672                           ;ms82_pwm.c: 16: TMR2 = 0;
  3673  04FE  0191               	clrf	17	;volatile
  3674  04FF  3004               	movlw	4
  3675                           
  3676                           ;ms82_pwm.c: 17: TMR2IF = 0;
  3677  0500  108C               	bcf	12,1
  3678                           
  3679                           ;ms82_pwm.c: 18: T2CON = 0B00000100;
  3680  0501  0092               	movwf	18	;volatile
  3681  0502                     l2750:	
  3682                           ;ms82_pwm.c: 19: while(TMR2IF==1) asm("clrwdt");
  3683                           
  3684  0502  1283               	bcf	3,5	;RP0=0, select bank0
  3685  0503  1303               	bcf	3,6	;RP1=0, select bank0
  3686  0504  1C8C               	btfss	12,1
  3687  0505  2D08               	goto	l6211
  3688  0506  0064               	clrwdt	;#
  3689  0507  2D02               	goto	l2750
  3690  0508                     l6211:	
  3691                           
  3692                           ;ms82_pwm.c: 20: PWM1CON = 0b00010000;
  3693  0508  3010               	movlw	16
  3694  0509  0096               	movwf	22	;volatile
  3695                           
  3696                           ;ms82_pwm.c: 21: EPWM1AUX = 0b10001000;
  3697  050A  3088               	movlw	136
  3698  050B  1683               	bsf	3,5	;RP0=1, select bank1
  3699  050C  0090               	movwf	16	;volatile
  3700                           
  3701                           ;ms82_pwm.c: 22: TRISC &= 0b11111011;
  3702  050D  1107               	bcf	7,2	;volatile
  3703  050E  0008               	return
  3704  050F                     __end_of_SET_EPWM_ON:	
  3705                           
  3706                           	psect	text587
  3707  0425                     __ptext587:	
  3708 ;; =============== function _SET_EPWM_ON ends ============
  3709                           
  3710                           
  3711 ;; *************** function _timerOut *****************
  3712 ;; Defined at:
  3713 ;;		line 6 in file "rfid125.c"
  3714 ;; Parameters:    Size  Location     Type
  3715 ;;  Logic           1    wreg     unsigned char 
  3716 ;;  time            2    2[COMMON] unsigned int 
  3717 ;; Auto vars:     Size  Location     Type
  3718 ;;  Logic           1    4[COMMON] unsigned char 
  3719 ;;  CurTimer        2    5[COMMON] unsigned int 
  3720 ;; Return value:  Size  Location     Type
  3721 ;;                  2    2[COMMON] unsigned int 
  3722 ;; Registers used:
  3723 ;;		wreg, status,2
  3724 ;; Tracked objects:
  3725 ;;		On entry : 60/0
  3726 ;;		On exit  : 60/0
  3727 ;;		Unchanged: FFF9F/0
  3728 ;; Data sizes:     COMMON   BANK0   BANK1
  3729 ;;      Params:         2       0       0
  3730 ;;      Locals:         3       0       0
  3731 ;;      Temps:          0       0       0
  3732 ;;      Totals:         5       0       0
  3733 ;;Total ram usage:        5 bytes
  3734 ;; Hardware stack levels used:    1
  3735 ;; Hardware stack levels required when called:    1
  3736 ;; This function calls:
  3737 ;;		Nothing
  3738 ;; This function is called by:
  3739 ;;		_get_RFID
  3740 ;; This function uses a non-reentrant model
  3741 ;;
  3742  0425                     _timerOut:	
  3743                           
  3744                           ; Regs used in _timerOut: [wreg+status,2]
  3745                           ;timerOut@Logic stored from wreg
  3746  0425  00F4               	movwf	timerOut@Logic
  3747                           
  3748                           ;rfid125.c: 7: unsigned int CurTimer;
  3749                           ;rfid125.c: 8: TMR1ON = 0;
  3750  0426  1010               	bcf	16,0
  3751                           
  3752                           ;rfid125.c: 9: TMR1H = 0;
  3753  0427  018F               	clrf	15	;volatile
  3754                           
  3755                           ;rfid125.c: 10: TMR1L = 0;
  3756  0428  018E               	clrf	14	;volatile
  3757                           
  3758                           ;rfid125.c: 11: TMR1IF = 0;
  3759  0429  100C               	bcf	12,0
  3760                           
  3761                           ;rfid125.c: 12: TMR1ON = 1;
  3762  042A  1410               	bsf	16,0
  3763  042B                     l6193:	
  3764                           ;rfid125.c: 13: while(RA4==Logic){
  3765                           
  3766  042B  3000               	movlw	0
  3767  042C  1A05               	btfsc	5,4
  3768  042D  3001               	movlw	1
  3769  042E  0674               	xorwf	timerOut@Logic,w
  3770  042F  1D03               	btfss	3,2
  3771  0430  2C41               	goto	l6195
  3772                           
  3773                           ;rfid125.c: 14: CurTimer= (TMR1H <<8 )| TMR1L;
  3774  0431  080F               	movf	15,w	;volatile
  3775  0432  00F6               	movwf	timerOut@CurTimer+1
  3776  0433  01F5               	clrf	timerOut@CurTimer
  3777  0434  080E               	movf	14,w	;volatile
  3778  0435  04F5               	iorwf	timerOut@CurTimer,f
  3779                           
  3780                           ;rfid125.c: 15: if(CurTimer>time)
  3781  0436  0876               	movf	timerOut@CurTimer+1,w
  3782  0437  0273               	subwf	timerOut@time+1,w
  3783  0438  1D03               	skipz
  3784  0439  2C3C               	goto	u1165
  3785  043A  0875               	movf	timerOut@CurTimer,w
  3786  043B  0272               	subwf	timerOut@time,w
  3787  043C                     u1165:	
  3788  043C  1803               	skipnc
  3789  043D  2C2B               	goto	l6193
  3790                           
  3791                           ;rfid125.c: 16: return 0;
  3792  043E  01F2               	clrf	?_timerOut
  3793  043F  01F3               	clrf	?_timerOut+1
  3794  0440  0008               	return
  3795  0441                     l6195:	
  3796                           
  3797                           ;rfid125.c: 17: }
  3798                           ;rfid125.c: 18: return CurTimer;
  3799  0441  0876               	movf	timerOut@CurTimer+1,w
  3800  0442  00F3               	movwf	?_timerOut+1
  3801  0443  0875               	movf	timerOut@CurTimer,w
  3802  0444  00F2               	movwf	?_timerOut
  3803  0445  0008               	return
  3804  0446                     __end_of_timerOut:	
  3805                           
  3806                           	psect	text588
  3807  0485                     __ptext588:	
  3808 ;; =============== function _timerOut ends ============
  3809                           
  3810                           
  3811 ;; *************** function _comArr *****************
  3812 ;; Defined at:
  3813 ;;		line 52 in file "ms82_eeprom.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;  arr1            1    wreg     PTR unsigned char 
  3816 ;;		 -> keyID(5), 
  3817 ;;  arr2            1    2[COMMON] PTR unsigned char 
  3818 ;;		 -> buffTag(25), 
  3819 ;;  len1            1    3[COMMON] unsigned char 
  3820 ;;  len2            1    4[COMMON] unsigned char 
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;  arr1            1    8[COMMON] PTR unsigned char 
  3823 ;;		 -> keyID(5), 
  3824 ;;  i               1    9[COMMON] unsigned char 
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  1    wreg      unsigned char 
  3827 ;; Registers used:
  3828 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3829 ;; Tracked objects:
  3830 ;;		On entry : 60/0
  3831 ;;		On exit  : 60/0
  3832 ;;		Unchanged: FFE9F/0
  3833 ;; Data sizes:     COMMON   BANK0   BANK1
  3834 ;;      Params:         3       0       0
  3835 ;;      Locals:         2       0       0
  3836 ;;      Temps:          3       0       0
  3837 ;;      Totals:         8       0       0
  3838 ;;Total ram usage:        8 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; Hardware stack levels required when called:    1
  3841 ;; This function calls:
  3842 ;;		Nothing
  3843 ;; This function is called by:
  3844 ;;		_id_search
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847  0485                     _comArr:	
  3848                           
  3849                           ; Regs used in _comArr: [wreg-fsr0h+status,2+status,0]
  3850                           ;comArr@arr1 stored from wreg
  3851  0485  00F8               	movwf	comArr@arr1
  3852                           
  3853                           ;ms82_eeprom.c: 53: unsigned char i;
  3854                           ;ms82_eeprom.c: 55: if(len1!=len2)
  3855  0486  0873               	movf	comArr@len1,w
  3856  0487  0674               	xorwf	comArr@len2,w
  3857  0488  1D03               	btfss	3,2
  3858                           
  3859                           ;ms82_eeprom.c: 56: return 0;
  3860  0489  3400               	retlw	0
  3861                           
  3862                           ;ms82_eeprom.c: 57: else{
  3863                           ;ms82_eeprom.c: 58: for(i=0;i<len1;i++){
  3864  048A  01F9               	clrf	comArr@i
  3865  048B                     l6165:	
  3866  048B  0873               	movf	comArr@len1,w
  3867  048C  0279               	subwf	comArr@i,w
  3868                           
  3869                           ;ms82_eeprom.c: 59: if(*(arr1+i) != *(arr2+i)){
  3870  048D  0879               	movf	comArr@i,w
  3871  048E  1803               	btfsc	3,0
  3872  048F  2CA0               	goto	L10
  3873  0490  0772               	addwf	comArr@arr2,w
  3874  0491  00F5               	movwf	??_comArr
  3875  0492  0084               	movwf	4
  3876  0493  1383               	bcf	3,7	;select IRP bank0
  3877  0494  0800               	movf	0,w
  3878  0495  00F6               	movwf	??_comArr+1
  3879  0496  0879               	movf	comArr@i,w
  3880  0497  0778               	addwf	comArr@arr1,w
  3881  0498  00F7               	movwf	??_comArr+2
  3882  0499  0084               	movwf	4
  3883  049A  0800               	movf	0,w
  3884  049B  0676               	xorwf	??_comArr+1,w
  3885  049C  1D03               	btfss	3,2
  3886  049D  3400               	retlw	0
  3887  049E  0AF9               	incf	comArr@i,f
  3888  049F  2C8B               	goto	l6165
  3889  04A0                     L10:	
  3890                           ;ms82_eeprom.c: 61: }
  3891                           ;ms82_eeprom.c: 62: }
  3892                           ;ms82_eeprom.c: 63: if(i==len1)
  3893                           
  3894  04A0  0673               	xorwf	comArr@len1,w
  3895  04A1  1903               	btfsc	3,2
  3896                           
  3897                           ;ms82_eeprom.c: 64: return 1;
  3898  04A2  3401               	retlw	1
  3899  04A3  3400               	retlw	0
  3900  04A4                     __end_of_comArr:	
  3901                           
  3902                           	psect	text589
  3903  05E1                     __ptext589:	
  3904 ;; =============== function _comArr ends ============
  3905                           
  3906                           
  3907 ;; *************** function _eepromReadByte *****************
  3908 ;; Defined at:
  3909 ;;		line 7 in file "ms82_eeprom.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;  EEAddr          1    wreg     unsigned char 
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;  EEAddr          1    2[COMMON] unsigned char 
  3914 ;;  ReEepromData    1    3[COMMON] unsigned char 
  3915 ;; Return value:  Size  Location     Type
  3916 ;;                  1    wreg      unsigned char 
  3917 ;; Registers used:
  3918 ;;		wreg
  3919 ;; Tracked objects:
  3920 ;;		On entry : 0/20
  3921 ;;		On exit  : 60/20
  3922 ;;		Unchanged: FFF9F/0
  3923 ;; Data sizes:     COMMON   BANK0   BANK1
  3924 ;;      Params:         0       0       0
  3925 ;;      Locals:         2       0       0
  3926 ;;      Temps:          0       0       0
  3927 ;;      Totals:         2       0       0
  3928 ;;Total ram usage:        2 bytes
  3929 ;; Hardware stack levels used:    1
  3930 ;; Hardware stack levels required when called:    1
  3931 ;; This function calls:
  3932 ;;		Nothing
  3933 ;; This function is called by:
  3934 ;;		_eepromReadBlock
  3935 ;;		_main
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938  05E1                     _eepromReadByte:	
  3939                           
  3940                           ; Regs used in _eepromReadByte: [wreg]
  3941                           ;eepromReadByte@EEAddr stored from wreg
  3942  05E1  00F2               	movwf	eepromReadByte@EEAddr
  3943                           
  3944                           ;ms82_eeprom.c: 8: unsigned char ReEepromData;
  3945                           ;ms82_eeprom.c: 10: EEADR = EEAddr;
  3946  05E2  1683               	bsf	3,5	;RP0=1, select bank1
  3947  05E3  1303               	bcf	3,6	;RP1=0, select bank1
  3948  05E4  009B               	movwf	27	;volatile
  3949                           
  3950                           ;ms82_eeprom.c: 11: RD = 1;
  3951  05E5  141C               	bsf	28,0
  3952                           
  3953                           ;ms82_eeprom.c: 12: ReEepromData = EEDAT;
  3954  05E6  081A               	movf	26,w	;volatile
  3955  05E7  00F3               	movwf	eepromReadByte@ReEepromData
  3956                           
  3957                           ;ms82_eeprom.c: 13: RD = 0;
  3958  05E8  101C               	bcf	28,0
  3959                           
  3960                           ;ms82_eeprom.c: 14: return ReEepromData;
  3961  05E9  0008               	return
  3962  05EA                     __end_of_eepromReadByte:	
  3963                           
  3964                           	psect	text590
  3965  0538                     __ptext590:	
  3966 ;; =============== function _eepromReadByte ends ============
  3967                           
  3968                           
  3969 ;; *************** function _int_init *****************
  3970 ;; Defined at:
  3971 ;;		line 66 in file "sysinit.c"
  3972 ;; Parameters:    Size  Location     Type
  3973 ;;		None
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;		None
  3976 ;; Return value:  Size  Location     Type
  3977 ;;		None               void
  3978 ;; Registers used:
  3979 ;;		status,2
  3980 ;; Tracked objects:
  3981 ;;		On entry : 60/0
  3982 ;;		On exit  : 60/20
  3983 ;;		Unchanged: FFF9F/0
  3984 ;; Data sizes:     COMMON   BANK0   BANK1
  3985 ;;      Params:         0       0       0
  3986 ;;      Locals:         0       0       0
  3987 ;;      Temps:          0       0       0
  3988 ;;      Totals:         0       0       0
  3989 ;;Total ram usage:        0 bytes
  3990 ;; Hardware stack levels used:    1
  3991 ;; Hardware stack levels required when called:    1
  3992 ;; This function calls:
  3993 ;;		Nothing
  3994 ;; This function is called by:
  3995 ;;		_main
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998  0538                     _int_init:	
  3999                           
  4000                           ;sysinit.c: 71: INTCON = 0B00000000;
  4001                           
  4002                           ; Regs used in _int_init: [status,2]
  4003  0538  018B               	clrf	11	;volatile
  4004                           
  4005                           ;sysinit.c: 72: PIE1 = 0B00000000;
  4006  0539  1683               	bsf	3,5	;RP0=1, select bank1
  4007  053A  018C               	clrf	12	;volatile
  4008                           
  4009                           ;sysinit.c: 73: PIR1 = 0B00000000;
  4010  053B  1283               	bcf	3,5	;RP0=0, select bank0
  4011  053C  018C               	clrf	12	;volatile
  4012                           
  4013                           ;sysinit.c: 85: T0IF = 0;
  4014  053D  110B               	bcf	11,2
  4015                           
  4016                           ;sysinit.c: 86: T0IE = 0;
  4017  053E  128B               	bcf	11,5
  4018                           
  4019                           ;sysinit.c: 87: TMR1ON = 0;
  4020  053F  1010               	bcf	16,0
  4021                           
  4022                           ;sysinit.c: 89: TMR2IF = 0;
  4023  0540  108C               	bcf	12,1
  4024                           
  4025                           ;sysinit.c: 90: TMR2IE = 0;
  4026  0541  1683               	bsf	3,5	;RP0=1, select bank1
  4027  0542  108C               	bcf	12,1
  4028                           
  4029                           ;sysinit.c: 93: TMR1IF = 0;
  4030  0543  1283               	bcf	3,5	;RP0=0, select bank0
  4031  0544  100C               	bcf	12,0
  4032                           
  4033                           ;sysinit.c: 94: TMR1IE = 0;
  4034  0545  1683               	bsf	3,5	;RP0=1, select bank1
  4035  0546  100C               	bcf	12,0
  4036                           
  4037                           ;sysinit.c: 96: PEIE = 0;
  4038  0547  130B               	bcf	11,6
  4039                           
  4040                           ;sysinit.c: 98: GIE = 1;
  4041  0548  178B               	bsf	11,7
  4042  0549  0008               	return
  4043  054A                     __end_of_int_init:	
  4044                           
  4045                           	psect	text591
  4046  05D7                     __ptext591:	
  4047 ;; =============== function _int_init ends ============
  4048                           
  4049                           
  4050 ;; *************** function _timer_init *****************
  4051 ;; Defined at:
  4052 ;;		line 44 in file "sysinit.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;		None
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;		None
  4057 ;; Return value:  Size  Location     Type
  4058 ;;		None               void
  4059 ;; Registers used:
  4060 ;;		wreg
  4061 ;; Tracked objects:
  4062 ;;		On entry : 60/20
  4063 ;;		On exit  : 60/0
  4064 ;;		Unchanged: FFF9F/0
  4065 ;; Data sizes:     COMMON   BANK0   BANK1
  4066 ;;      Params:         0       0       0
  4067 ;;      Locals:         0       0       0
  4068 ;;      Temps:          0       0       0
  4069 ;;      Totals:         0       0       0
  4070 ;;Total ram usage:        0 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    1
  4073 ;; This function calls:
  4074 ;;		Nothing
  4075 ;; This function is called by:
  4076 ;;		_main
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079  05D7                     _timer_init:	
  4080                           
  4081                           ;sysinit.c: 46: OPTION = 0B00000001;
  4082                           
  4083                           ; Regs used in _timer_init: [wreg]
  4084  05D7  3001               	movlw	1
  4085  05D8  0081               	movwf	1	;volatile
  4086                           
  4087                           ;sysinit.c: 59: TMR1H = -5000>>8;
  4088  05D9  30EC               	movlw	236
  4089  05DA  1283               	bcf	3,5	;RP0=0, select bank0
  4090  05DB  008F               	movwf	15	;volatile
  4091                           
  4092                           ;sysinit.c: 60: TMR1L = -5000;
  4093  05DC  3078               	movlw	120
  4094  05DD  008E               	movwf	14	;volatile
  4095                           
  4096                           ;sysinit.c: 61: T1CON = 0B00100001;
  4097  05DE  3021               	movlw	33
  4098  05DF  0090               	movwf	16	;volatile
  4099  05E0  0008               	return
  4100  05E1                     __end_of_timer_init:	
  4101                           
  4102                           	psect	text592
  4103  058B                     __ptext592:	
  4104 ;; =============== function _timer_init ends ============
  4105                           
  4106                           
  4107 ;; *************** function _gpio_init *****************
  4108 ;; Defined at:
  4109 ;;		line 32 in file "sysinit.c"
  4110 ;; Parameters:    Size  Location     Type
  4111 ;;		None
  4112 ;; Auto vars:     Size  Location     Type
  4113 ;;		None
  4114 ;; Return value:  Size  Location     Type
  4115 ;;		None               void
  4116 ;; Registers used:
  4117 ;;		wreg, status,2
  4118 ;; Tracked objects:
  4119 ;;		On entry : 60/20
  4120 ;;		On exit  : 60/20
  4121 ;;		Unchanged: FFF9F/0
  4122 ;; Data sizes:     COMMON   BANK0   BANK1
  4123 ;;      Params:         0       0       0
  4124 ;;      Locals:         0       0       0
  4125 ;;      Temps:          0       0       0
  4126 ;;      Totals:         0       0       0
  4127 ;;Total ram usage:        0 bytes
  4128 ;; Hardware stack levels used:    1
  4129 ;; Hardware stack levels required when called:    1
  4130 ;; This function calls:
  4131 ;;		Nothing
  4132 ;; This function is called by:
  4133 ;;		_main
  4134 ;; This function uses a non-reentrant model
  4135 ;;
  4136  058B                     _gpio_init:	
  4137                           
  4138                           ;sysinit.c: 34: PORTA = 0B00000000;
  4139                           
  4140                           ; Regs used in _gpio_init: [wreg+status,2]
  4141  058B  1283               	bcf	3,5	;RP0=0, select bank0
  4142  058C  0185               	clrf	5	;volatile
  4143                           
  4144                           ;sysinit.c: 35: TRISA = 0B01110011;
  4145  058D  3073               	movlw	115
  4146  058E  1683               	bsf	3,5	;RP0=1, select bank1
  4147  058F  0085               	movwf	5	;volatile
  4148                           
  4149                           ;sysinit.c: 36: WPUA = 0B10010000;
  4150  0590  3090               	movlw	144
  4151  0591  0095               	movwf	21	;volatile
  4152                           
  4153                           ;sysinit.c: 37: PORTC = 0B00000010;
  4154  0592  3002               	movlw	2
  4155  0593  1283               	bcf	3,5	;RP0=0, select bank0
  4156  0594  0087               	movwf	7	;volatile
  4157                           
  4158                           ;sysinit.c: 38: TRISC = 0B11111110;
  4159  0595  30FE               	movlw	254
  4160  0596  1683               	bsf	3,5	;RP0=1, select bank1
  4161  0597  0087               	movwf	7	;volatile
  4162                           
  4163                           ;sysinit.c: 39: WPUC = 0B00000000;
  4164  0598  0188               	clrf	8	;volatile
  4165  0599  0008               	return
  4166  059A                     __end_of_gpio_init:	
  4167                           
  4168                           	psect	text593
  4169  055B                     __ptext593:	
  4170 ;; =============== function _gpio_init ends ============
  4171                           
  4172                           
  4173 ;; *************** function _ISR *****************
  4174 ;; Defined at:
  4175 ;;		line 61 in file "MAIN.C"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;		None
  4178 ;; Auto vars:     Size  Location     Type
  4179 ;;		None
  4180 ;; Return value:  Size  Location     Type
  4181 ;;		None               void
  4182 ;; Registers used:
  4183 ;;		wreg
  4184 ;; Tracked objects:
  4185 ;;		On entry : 0/0
  4186 ;;		On exit  : 0/0
  4187 ;;		Unchanged: FFF9F/0
  4188 ;; Data sizes:     COMMON   BANK0   BANK1
  4189 ;;      Params:         0       0       0
  4190 ;;      Locals:         0       0       0
  4191 ;;      Temps:          2       0       0
  4192 ;;      Totals:         2       0       0
  4193 ;;Total ram usage:        2 bytes
  4194 ;; Hardware stack levels used:    1
  4195 ;; This function calls:
  4196 ;;		Nothing
  4197 ;; This function is called by:
  4198 ;;		Interrupt level 1
  4199 ;; This function uses a non-reentrant model
  4200 ;;
  4201  055B                     _ISR:	
  4202                           
  4203                           ;MAIN.C: 87: if(T0IE&&T0IF)
  4204  055B  1A8B               	btfsc	11,5
  4205  055C  1D0B               	btfss	11,2
  4206  055D  2D65               	goto	i1l3457
  4207                           
  4208                           ;MAIN.C: 88: {
  4209                           ;MAIN.C: 89: T0IF = 0;
  4210  055E  110B               	bcf	11,2
  4211                           
  4212                           ;MAIN.C: 90: TMR0 = buzFre;
  4213  055F  1283               	bcf	3,5	;RP0=0, select bank0
  4214  0560  1303               	bcf	3,6	;RP1=0, select bank0
  4215  0561  0825               	movf	_buzFre,w
  4216  0562  0081               	movwf	1	;volatile
  4217                           
  4218                           ;MAIN.C: 91: RC0 = ~RC0;
  4219  0563  3001               	movlw	1
  4220  0564  0687               	xorwf	7,f
  4221  0565                     i1l3457:	
  4222  0565  0871               	movf	??_ISR+1,w
  4223  0566  008A               	movwf	10
  4224  0567  0E70               	swapf	??_ISR^(0+-128),w
  4225  0568  0083               	movwf	3
  4226  0569  0EFE               	swapf	126,f
  4227  056A  0E7E               	swapf	126,w
  4228  056B  0009               	retfie
  4229  056C                     __end_of_ISR:	
  4230                           
  4231                           	psect	intentry
  4232  0004                     __pintentry:	
  4233                           ; Regs used in _ISR: [wreg]
  4234                           
  4235  0004                     interrupt_function:	
  4236  007E                     saved_w	set	btemp
  4237  0004  00FE               	movwf	btemp
  4238  0005  0E03               	swapf	3,w
  4239  0006  00F0               	movwf	??_ISR
  4240  0007  080A               	movf	10,w
  4241  0008  00F1               	movwf	??_ISR+1
  4242  0009  2D5B               	ljmp	_ISR
  4243                           
  4244                           	psect	text594
  4245  0000                     __ptext594:	
  4246 ;; =============== function _ISR ends ============
  4247                           
  4248  007E                     btemp	set	126	;btemp
  4249  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Fri Dec 27 12:49:25 2019

                         pc 0002              ___bmul@product 0073                          _RD 04E0  
                        _WR 04E8                          fsr 0004                         l651 05D2  
                       l660 0000                         l654 0000                         l663 0000  
                       l657 0000                         _GIE 005F                         _RA2 002A  
                       _RA3 002B                         _RC0 0038                         _RA4 002C  
                       _RC1 0039                         _PR2 0092                         _HTS 047A  
                       _ISR 055B                         _SR0 0CF6                         _SR1 0CF7  
                       fsr0 0004                         indf 0000            get_RFID@even_col 004B  
          get_RFID@even_row 004C                 main@idState 0057                        S6915 05EA  
                      ?_ISR 0070                        l1322 0000                        l1331 0000  
                      l2051 0249                        l1316 0000                        l1325 0404  
                      l2070 0296                        l1328 0414                        l1337 0000  
                      l2091 02F4                        l4201 0000                        l3501 0199  
                      l4207 0000                        l4218 0000                        l3530 01DF  
                      l3460 0000                        l3452 04BE                        l3453 0000  
                      l3533 0212                        l2750 0502                        l6111 0000  
                      l3447 0000                        l3535 0226                        l6113 0000  
                      l6121 0000                        l2753 0000                        l6201 0000  
                      l6115 0000                        l6107 0000                        l6131 0000  
                      l6123 0000                        l6211 0508                        l6203 0000  
                      l6109 0000                        l6117 0000                        l6133 0000  
                      l6125 0000                        l6141 0000                        l6213 0000  
                      l6205 0000                        l6301 0000                        l3469 0000  
                      l3477 0000                        l6135 0000                        l6127 0000  
                      l6119 0000                        l6143 0000                        l6207 0000  
                      l6231 0000                        l4199 03BE                        l6137 0000  
                      l6129 0000                        l6209 0000                        l6225 0000  
                      l6241 0000                        l6233 059C                        l6401 02A9  
                      l6321 0000                        l3498 00F8                        l6139 0000  
                      l6147 0000                        l6227 0000                        l6251 0000  
                      l6403 0000                        l6331 0000                        l6165 048B  
                      l6181 0000                        l6229 0000                        l6261 0000  
                      l6253 04E2                        l6501 0000                        l6405 0000  
                      l6341 0260                        l6317 0000                        l6309 0000  
                      l6183 0000                        l6239 0000                        l6247 0000  
                      l6271 0000                        l6503 0000                        l6431 0000  
                      l6423 0000                        l6415 02BD                        l6343 0000  
                      l4920 0000                        l6193 042B                        l6185 0000  
                      l6265 0000                        l6257 0000                        l6249 0000  
                      l6273 0000                        l6281 054C                        l6505 0000  
                      l6441 0000                        l6433 0000                        l6417 0000  
                      l6345 0269                        l6329 0251                        l6521 056D  
                      l6195 0441                        l6179 0000                        l6267 04F5  
                      l6275 0000                        l6291 041A                        l6283 0000  
                      l6443 02EB                        l6435 02D8                        l6419 02C6  
                      l6371 0000                        l6363 0281                        l6355 0274  
                      l6523 0000                        l6603 0000                        l4917 04E8  
                      l6293 0000                        l6285 0408                        l6453 0000  
                      l6445 0000                        l6429 02D1                        l6381 0000  
                      l6365 0000                        l6357 0000                        l6349 0000  
                      l6517 0000                        l6605 0000                        l6621 0000  
                      l6701 00A9                        l6199 0000                        l6279 0000  
                      l6287 0000                        l6471 0000                        l6447 0000  
                      l6439 02E2                        l6455 02F7                        l6383 029F  
                      l6367 028A                        l6359 0277                        l6295 0000  
                      l6543 0000                        l6607 0000                        l6623 0000  
                      l6615 0000                        l6711 0000                        l6703 00AE  
                      l6289 0000                        l6481 0000                        l6457 0000  
                      l6377 0000                        l6369 0000                        l6297 0000  
                      l6537 0000                        l6529 04C4                        l6553 0000  
                      l6545 0000                        l6561 0000                        l6625 0000  
                      l6617 0000                        l6633 0000                        l6801 0000  
                      l6721 0000                        l6713 0000                        l6641 0000  
                      l6467 0302                        l6379 029A                        l6387 024C  
                      l6299 022F                        l6555 0000                        l6547 0000  
                      l6571 0000                        l6627 0000                        l6619 0000  
                      l6635 0458                        l6731 00E6                        l6723 00D6  
                      l6715 0000                        l6707 00B7                        l6651 0000  
                      l6643 0000                        l4884 0000                        l6493 033E  
                      l6477 030C                        l6469 0000                        l6389 02A5  
                      l6557 0000                        l6565 0000                        l6581 0000  
                      l6573 0000                        l6629 0000                        l6821 01B4  
                      l6805 0000                        l6741 0000                        l6813 018E  
                      l6717 0000                        l6709 00B9                        l6661 0000  
                      l6653 0000                        l6645 0000                        l6637 0000  
                      l6495 0000                        l6479 0000                        l6559 0000  
                      l6567 0528                        l6575 0000                        l6583 04A9  
                      l6591 05B6                        l6831 01CB                        l6815 0000  
                      l6807 0000                        l6743 0000                        l6735 0101  
                      l6719 0000                        l6655 0000                        l6647 0000  
                      l6639 0000                        l6497 0348                        l6489 0000  
                      l6577 0000                        l6569 0000                        l6585 0000  
                      l6593 0000                        l6833 01D1                        l6809 0189  
                      l6761 0000                        l6745 0112                        l6737 0000  
                      l6817 01A7                        l6681 0000                        l6673 0052  
                      l6665 0033                        l6657 0000                        l6649 0000  
                      l6499 0000                        l6579 0000                        l6595 0000  
                      l6851 0000                        l6843 0000                        l6835 0000  
                      l6827 01C3                        l6819 0000                        l6763 0000  
                      l6755 0126                        l6739 0000                        l6691 0080  
                      l6675 0000                        l6659 0000                        l6589 0000  
                      l6853 01F3                        l6845 0000                        l6837 0000  
                      l6829 0000                        l6861 020B                        l6773 0000  
                      l6765 0000                        l6757 0000                        l6693 0099  
                      l6669 003B                        l6855 0000                        l6847 0000  
                      l6839 0000                        l6791 0000                        l6775 0000  
                      l6767 013A                        l6695 0000                        l6679 0000  
                      l6865 0213                        l6785 0000                        l6793 0169  
                      l6777 0000                        l6697 0000                        l6875 0223  
                      l6859 01FD                        l6795 016E                        l6779 014F  
                      l6699 0000                        l6877 0228                        l6869 0000  
                      l6789 0000                        _EEIF 0067                        STR_1 05AE  
                      _T0IE 005D                        _T0IF 005A                        u1165 043C  
                      u2307 041E                        u2155 01C0                        u2237 0026  
                      u2247 01A1                        u2257 01AE                        u2267 03BA  
                      u2277 03CB                        u2287 03D8                        _PIE1 008C  
                      u2297 0576                        u1674 0315                        u1770 03C4  
                      u1675 0313                        u1784 03C7                        _PEIE 005E  
                      _PIR1 000C                        _TMR0 0001                        _TMR2 0011  
                      _STRA 0CE8                        _STRB 0CE9                        _STRC 0CEA  
                      _STRD 0CEB                        _WREN 0C62                        _WPUA 0095  
                      _WPUC 0088                        _beep 04A4                        _main 000B  
                      btemp 007E                        start 000A           ___bmul@multiplier 0074  
                     ??_ISR 0070             __end_of_SendNum 0402                       ?_beep 0075  
                     _C1SEN 0CF5                       _C2REN 0CF4                       ?_main 0070  
           __end_of___lbdiv 04F7                       _EEADR 009B                       _EEDAT 009A  
                     _EEPGD 0C67                       _T1CON 0010                       _T2CON 0012  
                     _TMR1H 000F                       _TMR1L 000E                       _PORTA 0005  
                     _PORTC 0007                       _SRCON 019E                       _PULSR 0CF2  
                     _PULSS 0CF3                       _TRISA 0085                       _TRISC 0087  
  __size_of_eepromReadBlock 0011                       _keyID 0060            ??_swUartSendByte 0072  
                     pclath 000A                       status 0003                       wtemp0 007E  
           ___lbdiv@divisor 0072             ___lbdiv@counter 0074        __size_of_delay_x10ms 0010  
          ??_eepromReadByte 0072                  SendNum@nib 007A                  SendNum@num 0079  
          _eepromWriteBlock 0526                __end_of_beep 04C0                __end_of_main 022C  
  __end_of_swUartSendString 05C2                      ??_beep 0076                      ??_main 0053  
          eepromReadBlock@i 0078                      _EECON1 009C    __size_of_eepromWriteByte 0023  
                    i1l3457 0565                      i1l6221 0000                      i1l6215 0000  
                    _INTCON 000B                      _OSCCON 008F                      _TMR1IE 0460  
                    _TMR1IF 0060                      _TMR2IE 0461                      _TMR2IF 0061  
                    _OPTION 0081                      _TMR1ON 0080                ?_SET_EPWM_ON 0070  
          __end_of_get_RFID 0362            __end_of_id_clear 0466                   ??_SendNum 0075  
        get_RFID@timeOutVal 0050                      ___bmul 059A                   ??___lbdiv 0073  
                    _comArr 0485                      _buzFre 0025            __end_of_int_init 054A  
                    main@t1 0056            __end_of_setState 05CD                      saved_w 007E  
          __end_of_timerOut 0446         eepromReadBlock@buff 0074            ___lbdiv@dividend 0073  
          __end_of_sys_init 05D7           ??_eepromReadBlock 0076         ___bmul@multiplicand 0072  
            __pcstackCOMMON 0070                __pidataBANK0 0466            ___lbdiv@quotient 0075  
        __size_of_id_search 001C                  __pbssBANK0 005A          __size_of_gpio_init 000F  
         ??_eepromWriteByte 0073                  __pmaintext 000B                     ?___bmul 0072  
                   ?_comArr 0072                  __pintentry 0004                  _id_replate 0379  
                   _EPWMR1L 0013                   ?_get_RFID 0070                   ?_id_clear 0043  
                   _PWM1CON 0016    __end_of_eepromWriteBlock 0538                     _PSTRCON 019D  
                   _STRSYNC 0CEC                   ?_int_init 0070    get_RFID@RF_serial_55bits 003F  
                   _PwInNum 005E           __end_of_id_search 04DC                 setState@stt 0074  
                   _SendNum 03DC        __size_of_SET_EPWM_ON 0018                   ?_setState 0072  
                 ?_timerOut 0072             __size_of___bmul 000E                     ___lbdiv 04DC  
           __size_of_comArr 001F                     _buffTag 0026                     beep@rep 0075  
         __end_of_gpio_init 059A                   ?_sys_init 0070           ?_swUartSendString 0070  
              __size_of_ISR 0011                     _mtState 005F          ??_swUartSendString 0075  
                   comArr@i 0079                  ??_get_RFID 0077                  ??_id_clear 007C  
                   _timeOut 005A                  comArr@arr1 0078                  comArr@arr2 0072  
                comArr@len1 0073                  comArr@len2 0074                     main@tmp 0059  
      end_of_initialization 0524               ??_delay_x10ms 0072                     init_ram 0580  
                get_RFID@ii 0052                  ??_int_init 0072                  ??_setState 0074  
       eepromWriteBlock@len 0077                  ??_timerOut 0074       get_RFID@flag_RFID_syn 004A  
                id_search@i 0040                  _timer_init 05D7                 ?_id_replate 003F  
                ??_sys_init 0072             _eepromReadBlock 054A     __size_of_swUartSendByte 0028  
       __end_of_delay_x10ms 057C              __end_of___bmul 05A8              __end_of_comArr 04A4  
   __size_of_eepromReadByte 0009        eepromReadByte@EEAddr 0072         start_initialization 050F  
               __end_of_ISR 056C             _eepromWriteByte 0402               setState@_tOut 0072  
eepromReadByte@ReEepromData 0073         __size_of_id_replate 0034                    ??___bmul 0073  
                  ??_comArr 0075                 __pdataBANK0 0020     __end_of_eepromReadBlock 055B  
               ?_timer_init 0070          eepromReadBlock@len 0075               __pcstackBANK0 003F  
             id_clear@idMax 0043               id_clear@idMin 0049           ?_eepromWriteBlock 0076  
         __size_of_get_RFID 0136           __size_of_id_clear 0020          ??_eepromWriteBlock 0078  
               _delay_x10ms 056C                    ?_SendNum 0070           __size_of_int_init 0012  
                  ?___lbdiv 0072           __size_of_setState 000B                   __ptext570 0446  
                 __ptext571 0379                   __ptext580 0402                   __ptext572 03DC  
                 __ptext581 054A                   __ptext573 05B5                   __ptext590 0538  
                 __ptext582 05CD                   __ptext574 04A4                   __ptext591 05D7  
                 __ptext583 04DC                   __ptext575 0526                   __ptext592 058B  
                 __ptext584 059A                   __ptext576 03B4                   __ptext593 055B  
                 __ptext585 05C2                   __ptext577 04C0                   __ptext594 0000  
                 __ptext586 04F7                   __ptext578 056C                   __ptext587 0425  
                 __ptext579 022C                   __ptext588 0485                   __ptext589 05E1  
                 _id_search 04C0                   beep@delay 0076                _SendNum$4581 0075  
              _SendNum$4582 0077           __size_of_timerOut 0021                   __pstrings 05A8  
                 __pswtext1 05EA     __end_of_eepromWriteByte 0425           __size_of_sys_init 000A  
                 _gpio_init 058B                    _EPWM1CON 0015                    _EPWM1AUX 0090  
 __size_of_swUartSendString 000D           interrupt_function 0004               ??_SET_EPWM_ON 0072  
       __size_of_timer_init 000A                   get_RFID@i 004E                   get_RFID@j 004D  
            _swUartSendByte 03B4                  ?_id_search 007A                delay_x10ms@t 0074  
          timerOut@CurTimer 0075              _eepromReadByte 05E1            ?_eepromReadBlock 0074  
              ??_id_replate 0041                 __stringbase 05AD                  ?_gpio_init 0070  
    __end_of_swUartSendByte 03DC          __end_of_id_replate 03AD            __size_of_SendNum 0026  
                 init_fetch 057C         __end_of_SET_EPWM_ON 050F              id_replate@Cont 003F  
    __end_of_eepromReadByte 05EA                id_clear@F971 0020            __size_of___lbdiv 001B  
            id_replate@buff 0040           id_search@id_input 003F            ?_eepromWriteByte 0072  
   eepromReadBlock@addStart 0077                    _get_RFID 022C                    _id_clear 0446  
             __size_of_beep 001C             ?_swUartSendByte 0070               __size_of_main 0221  
                  _int_init 0538               id_search@buff 007A                    _setState 05C2  
         eepromWriteBlock@i 007A                    _timeTick 005C                    _timerOut 0425  
               ??_id_search 007B             ?_eepromReadByte 0070                    main@idop 0058  
              ??_timer_init 0072                    _sys_init 05CD    eepromWriteBlock@addStart 0079  
               ??_gpio_init 0072                 id_clear@tmp 0044                    intlevel1 0000  
          _swUartSendString 05B5                ?_delay_x10ms 0070                 _SET_EPWM_ON 04F7  
        __end_of_timer_init 05E1                   stringcode 05A8        eepromWriteBlock@buff 0076  
 __size_of_eepromWriteBlock 0012       eepromWriteByte@EEAddr 0075       eepromWriteByte@EEData 0072  
    get_RFID@flag_RFID_last 004F           swUartSendByte@dat 0073                id_replate@id 007B  
       swUartSendString@str 0075                    stringdir 05A8                    stringtab 05A8  
             timerOut@Logic 0074             swUartSendByte@i 0074                timerOut@time 0072  
